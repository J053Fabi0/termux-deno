--- a/cli/build.rs
+++ b/cli/build.rs
@@ -417,13 +417,20 @@ fn main() {
     panic!("Cross compiling with snapshot is not supported.");
   }
 
-  let symbols_path = std::path::Path::new("napi").join(
-    format!("generated_symbol_exports_list_{}.def", env::consts::OS).as_str(),
-  )
-  .canonicalize()
-  .expect(
-    "Missing symbols list! Generate using tools/napi/generate_symbols_lists.js",
-  );
+  let symbols_file_name = match env::consts::OS {
+    "windows" => "generated_symbol_exports_list_windows.def".to_string(),
+    "macos" => "generated_symbol_exports_list_macos.def".to_string(),
+    "android" | "linux" => {
+      "generated_symbol_exports_list_linux.def".to_string()
+    }
+    os => format!("generated_symbol_exports_list_{}.def", os),
+  };
+  let symbols_path = std::path::Path::new("napi")
+    .join(symbols_file_name)
+    .canonicalize()
+    .expect(
+        "Missing symbols list! Generate using tools/napi/generate_symbols_lists.js",
+    );
 
   #[cfg(target_os = "windows")]
   println!(
@@ -456,6 +463,12 @@ fn main() {
     }
   }
 
+  #[cfg(target_os = "android")]
+  println!(
+    "cargo:rustc-link-arg-bin=deno=-Wl,--export-dynamic-symbol-list={}",
+    symbols_path.display()
+  );
+
   // To debug snapshot issues uncomment:
   // op_fetch_asset::trace_serializer();
 
--- a/ext/fs/std_fs.rs
+++ b/ext/fs/std_fs.rs
@@ -62,7 +62,7 @@ impl FileSystem for RealFs {
       let _ = umask(prev);
       prev
     };
-    #[cfg(target_os = "linux")]
+    #[cfg(any(target_os = "android", target_os = "linux"))]
     {
       Ok(r.bits())
     }
--- a/ext/net/ops.rs
+++ b/ext/net/ops.rs
@@ -373,7 +373,7 @@ where
   #[cfg(not(windows))]
   socket.set_reuse_address(true)?;
   if reuse_port {
-    #[cfg(target_os = "linux")]
+    #[cfg(any(target_os = "android", target_os = "linux"))]
     socket.set_reuse_port(true)?;
   }
   let socket_addr = socket2::SockAddr::from(addr);
--- a/ext/net/ops_tls.rs
+++ b/ext/net/ops_tls.rs
@@ -1073,7 +1073,7 @@ where
   #[cfg(not(windows))]
   socket.set_reuse_address(true)?;
   if args.reuse_port {
-    #[cfg(target_os = "linux")]
+    #[cfg(any(target_os = "android", target_os = "linux"))]
     socket.set_reuse_port(true)?;
   }
   let socket_addr = socket2::SockAddr::from(bind_addr);
--- a/ext/node/lib.rs
+++ b/ext/node/lib.rs
@@ -132,12 +132,10 @@ pub static NODE_ENV_VAR_ALLOWLIST: Lazy<HashSet<String>> = Lazy::new(|| {
 
 #[op]
 fn op_node_build_os() -> String {
-  std::env::var("TARGET")
-    .unwrap()
-    .split('-')
-    .nth(2)
-    .unwrap()
-    .to_string()
+  match std::env::var("TARGET").unwrap().as_str() {
+    "aarch64-linux-android" => "linux".to_string(),
+    target => target.split('-').nth(2).unwrap().to_string(),
+  }
 }
 
 #[op(fast)]
--- a/ext/node/ops/os.rs
+++ b/ext/node/ops/os.rs
@@ -66,6 +66,9 @@ mod priority {
   #[cfg(target_os = "linux")]
   #[allow(non_camel_case_types)]
   type priority_t = u32;
+  #[cfg(target_os = "android")]
+  #[allow(non_camel_case_types)]
+  type priority_t = i32;
 
   const PRIORITY_HIGH: i32 = -14;
 
--- a/runtime/ops/os/mod.rs
+++ b/runtime/ops/os/mod.rs
@@ -305,7 +305,7 @@ fn op_runtime_memory_usage(scope: &mut v8::HandleScope) -> MemoryUsage {
   }
 }
 
-#[cfg(target_os = "linux")]
+#[cfg(any(target_os = "android", target_os = "linux"))]
 fn rss() -> usize {
   // Inspired by https://github.com/Arc-blroth/memory-stats/blob/5364d0d09143de2a470d33161b2330914228fde9/src/linux.rs
 
--- a/runtime/ops/os/sys_info.rs
+++ b/runtime/ops/os/sys_info.rs
@@ -6,7 +6,7 @@ type LoadAvg = (f64, f64, f64);
 const DEFAULT_LOADAVG: LoadAvg = (0.0, 0.0, 0.0);
 
 pub fn loadavg() -> LoadAvg {
-  #[cfg(target_os = "linux")]
+  #[cfg(any(target_os = "android", target_os = "linux"))]
   {
     use libc::SI_LOAD_SHIFT;
 
@@ -46,7 +46,7 @@ pub fn loadavg() -> LoadAvg {
 }
 
 pub fn os_release() -> String {
-  #[cfg(target_os = "linux")]
+  #[cfg(any(target_os = "android", target_os = "linux"))]
   {
     #[allow(clippy::disallowed_methods)]
     match std::fs::read_to_string("/proc/sys/kernel/osrelease") {
@@ -198,7 +198,7 @@ pub fn mem_info() -> Option<MemInfo> {
     swap_total: 0,
     swap_free: 0,
   };
-  #[cfg(target_os = "linux")]
+  #[cfg(any(target_os = "android", target_os = "linux"))]
   {
     let mut info = std::mem::MaybeUninit::uninit();
     // SAFETY: `info` is a valid pointer to a `libc::sysinfo` struct.
@@ -331,7 +331,7 @@ pub fn mem_info() -> Option<MemInfo> {
 pub fn os_uptime() -> u64 {
   let uptime: u64;
 
-  #[cfg(target_os = "linux")]
+  #[cfg(any(target_os = "android", target_os = "linux"))]
   {
     let mut info = std::mem::MaybeUninit::uninit();
     // SAFETY: `info` is a valid pointer to a `libc::sysinfo` struct.
