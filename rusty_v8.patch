Submodule build contains modified content
diff --git a/build/config/BUILD.gn b/build/config/BUILD.gn
index ed793c8f..ecf1c565 100644
--- a/build/config/BUILD.gn
+++ b/build/config/BUILD.gn
@@ -204,6 +204,7 @@ config("default_libs") {
     libs = [
       "dl",
       "m",
+      "unwind",
     ]
   } else if (is_mac) {
     # Targets should choose to explicitly link frameworks they require. Since
diff --git a/build/toolchain/gcc_toolchain.gni b/build/toolchain/gcc_toolchain.gni
index ad994319..dbbb8093 100644
--- a/build/toolchain/gcc_toolchain.gni
+++ b/build/toolchain/gcc_toolchain.gni
@@ -859,22 +859,32 @@ template("gcc_toolchain") {
 # use_gold too.
 template("clang_toolchain") {
   gcc_toolchain(target_name) {
-    _path = "$clang_base_path/bin"
-    _is_path_absolute = get_path_info(_path, "abspath") == _path
+    assert(defined(invoker.toolchain_args))
+    invoker_toolchain_args = invoker.toolchain_args
+    assert(defined(invoker_toolchain_args.current_os))
 
-    # Preserve absolute paths for tools like distcc.
-    if (_is_path_absolute && filter_include([ _path ], [ "//*" ]) == []) {
-      prefix = _path
+    if (invoker_toolchain_args.current_os == host_os) {
+      cc = getenv("BUILD_CC")
+      cxx = getenv("BUILD_CXX")
+      ar = getenv("BUILD_AR")
+      nm = getenv("BUILD_NM")
+
+      extra_cflags = getenv("BUILD_CFLAGS")
+      extra_cxxflags = getenv("BUILD_CXXFLAGS")
+      extra_ldflags = getenv("BUILD_LDFLAGS")
     } else {
-      prefix = rebase_path(_path, root_build_dir)
+      cc = getenv("CC")
+      cxx = getenv("CXX")
+      ar = getenv("AR")
+      nm = getenv("NM")
+
+      extra_cflags = getenv("CFLAGS")
+      extra_cxxflags = getenv("CXXFLAGS")
+      extra_ldflags = getenv("LDFLAGS")
     }
 
-    cc = "${prefix}/clang"
-    cxx = "${prefix}/clang++"
     ld = cxx
-    readelf = "${prefix}/llvm-readelf"
-    ar = "${prefix}/llvm-ar"
-    nm = "${prefix}/llvm-nm"
+    readelf = "llvm-readelf"
 
     forward_variables_from(invoker,
                            [
diff --git a/build.rs b/build.rs
index 5c1698a..cc901fd 100644
--- a/build.rs
+++ b/build.rs
@@ -22,6 +22,7 @@ fn main() {
   let envs = vec![
     "CCACHE",
     "CLANG_BASE_PATH",
+    "CXXSTDLIB",
     "DENO_TRYBUILD",
     "DOCS_RS",
     "GN",
@@ -260,25 +261,23 @@ fn maybe_install_sysroot(arch: &str) {
 }
 
 fn platform() -> String {
-  #[cfg(target_os = "linux")]
-  let os = "linux";
-  #[cfg(target_os = "macos")]
-  let os = "mac";
-  #[cfg(target_os = "windows")]
-  let os = "windows";
-  #[cfg(not(any(
-    target_os = "linux",
-    target_os = "macos",
-    target_os = "windows"
-  )))]
-  let arch = "unknown";
+  let os = if cfg!(target_os = "linux") {
+    "linux"
+  } else if cfg!(target_os = "macos") {
+    "mac"
+  } else if cfg!(target_os = "windows") {
+    "windows"
+  } else {
+    "unknown"
+  };
 
-  #[cfg(target_arch = "x86_64")]
-  let arch = "amd64";
-  #[cfg(target_arch = "aarch64")]
-  let arch = "arm64";
-  #[cfg(not(any(target_arch = "x86_64", target_arch = "aarch64")))]
-  let arch = "unknown";
+  let arch = if cfg!(target_arch = "x86_64") {
+    "amd64"
+  } else if cfg!(target_arch = "aarch64") {
+    "arm64"
+  } else {
+    "unknown"
+  };
 
   format!("{os}-{arch}")
 }
@@ -467,16 +466,23 @@ fn print_link_flags() {
 
   if should_dyn_link_libcxx {
     // Based on https://github.com/alexcrichton/cc-rs/blob/fba7feded71ee4f63cfe885673ead6d7b4f2f454/src/lib.rs#L2462
-    let target = env::var("TARGET").unwrap();
-    if target.contains("apple")
-      || target.contains("freebsd")
-      || target.contains("openbsd")
-    {
-      println!("cargo:rustc-link-lib=dylib=c++");
-    } else if target.contains("linux") {
-      println!("cargo:rustc-link-lib=dylib=stdc++");
-    } else if target.contains("android") {
-      println!("cargo:rustc-link-lib=dylib=c++_shared");
+    if let Ok(stdlib) = env::var("CXXSTDLIB") {
+      if !stdlib.is_empty() {
+        println!("cargo:rustc-link-lib=dylib={}", stdlib);
+      }
+    } else {
+      let target = env::var("TARGET").unwrap();
+      if target.contains("apple") {
+        println!("cargo:rustc-link-lib=dylib=c++");
+      } else if target.contains("freebsd") {
+        println!("cargo:rustc-link-lib=dylib=c++");
+      } else if target.contains("openbsd") {
+        println!("cargo:rustc-link-lib=dylib=c++");
+      } else if target.contains("android") {
+        println!("cargo:rustc-link-lib=dylib=c++_shared");
+      } else if !target.contains("msvc") {
+        println!("cargo:rustc-link-lib=dylib=stdc++");
+      }
     }
   }
 
@@ -530,10 +536,6 @@ fn is_compatible_clang_version(clang_path: &Path) -> bool {
 }
 
 fn find_compatible_system_clang() -> Option<PathBuf> {
-  if cfg!(target_os = "android") {
-    return None;
-  }
-
   if let Ok(p) = env::var("CLANG_BASE_PATH") {
     let base_path = Path::new(&p);
     let clang_path = base_path.join("bin").join("clang");
@@ -672,6 +674,10 @@ fn ninja(gn_out_dir: &Path, maybe_env: Option<NinjaEnv>) -> Command {
   let mut cmd = Command::new(cmd_string);
   cmd.arg("-C");
   cmd.arg(gn_out_dir);
+  if let Ok(jobs) = env::var("NUM_JOBS") {
+    cmd.arg("-j");
+    cmd.arg(jobs);
+  }
   if let Some(env) = maybe_env {
     for item in env {
       cmd.env(item.0, item.1);
