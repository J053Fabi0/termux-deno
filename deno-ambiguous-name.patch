--- a/bench_util/benches/op_baseline.rs
+++ b/bench_util/benches/op_baseline.rs
@@ -1,13 +1,13 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_bench_util::bench_js_async;
-use deno_bench_util::bench_js_sync;
-use deno_bench_util::bench_or_profile;
-use deno_bench_util::bencher::benchmark_group;
-use deno_bench_util::bencher::Bencher;
+use ::deno_bench_util::bench_js_async;
+use ::deno_bench_util::bench_js_sync;
+use ::deno_bench_util::bench_or_profile;
+use ::deno_bench_util::bencher::benchmark_group;
+use ::deno_bench_util::bencher::Bencher;
 
-use deno_core::op;
-use deno_core::Extension;
+use ::deno_core::op;
+use ::deno_core::Extension;
 
 deno_core::extension!(
   bench_setup,
--- a/bench_util/benches/utf8.rs
+++ b/bench_util/benches/utf8.rs
@@ -1,13 +1,13 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_bench_util::bench_js_sync_with;
-use deno_bench_util::bench_or_profile;
-use deno_bench_util::bencher::benchmark_group;
-use deno_bench_util::bencher::Bencher;
-use deno_bench_util::BenchOptions;
-use deno_core::Extension;
-use deno_core::ExtensionFileSource;
-use deno_core::ExtensionFileSourceCode;
+use ::deno_bench_util::bench_js_sync_with;
+use ::deno_bench_util::bench_or_profile;
+use ::deno_bench_util::bencher::benchmark_group;
+use ::deno_bench_util::bencher::Bencher;
+use ::deno_bench_util::BenchOptions;
+use ::deno_core::Extension;
+use ::deno_core::ExtensionFileSource;
+use ::deno_core::ExtensionFileSourceCode;
 
 fn setup() -> Vec<Extension> {
   vec![Extension::builder("bench_setup")
--- a/bench_util/js_runtime.rs
+++ b/bench_util/js_runtime.rs
@@ -1,9 +1,9 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 use bencher::Bencher;
-use deno_core::v8;
-use deno_core::Extension;
-use deno_core::JsRuntime;
-use deno_core::RuntimeOptions;
+use ::deno_core::v8;
+use ::deno_core::Extension;
+use ::deno_core::JsRuntime;
+use ::deno_core::RuntimeOptions;
 
 use crate::profiling::is_profiling;
 
--- a/cli/args/config_file.rs
+++ b/cli/args/config_file.rs
@@ -5,17 +5,17 @@ use crate::args::Flags;
 use crate::util::path::specifier_parent;
 use crate::util::path::specifier_to_file_path;
 
-use deno_core::anyhow::anyhow;
-use deno_core::anyhow::bail;
-use deno_core::anyhow::Context;
-use deno_core::error::AnyError;
-use deno_core::serde::Deserialize;
-use deno_core::serde::Serialize;
-use deno_core::serde::Serializer;
-use deno_core::serde_json;
-use deno_core::serde_json::json;
-use deno_core::serde_json::Value;
-use deno_core::ModuleSpecifier;
+use ::deno_core::anyhow::anyhow;
+use ::deno_core::anyhow::bail;
+use ::deno_core::anyhow::Context;
+use ::deno_core::error::AnyError;
+use ::deno_core::serde::Deserialize;
+use ::deno_core::serde::Serialize;
+use ::deno_core::serde::Serializer;
+use ::deno_core::serde_json;
+use ::deno_core::serde_json::json;
+use ::deno_core::serde_json::Value;
+use ::deno_core::ModuleSpecifier;
 use indexmap::IndexMap;
 use std::borrow::Cow;
 use std::collections::BTreeMap;
@@ -1246,7 +1246,7 @@ impl From<TsConfig> for deno_ast::EmitOptions {
 #[cfg(test)]
 mod tests {
   use super::*;
-  use deno_core::serde_json::json;
+  use ::deno_core::serde_json::json;
   use pretty_assertions::assert_eq;
 
   fn unpack_object<T>(result: Result<Option<T>, AnyError>, name: &str) -> T {
--- a/cli/args/flags.rs
+++ b/cli/args/flags.rs
@@ -7,10 +7,10 @@ use clap::ArgMatches;
 use clap::ColorChoice;
 use clap::Command;
 use clap::ValueHint;
-use deno_core::resolve_url_or_path;
-use deno_core::url::Url;
-use deno_graph::GraphKind;
-use deno_runtime::permissions::parse_sys_kind;
+use ::deno_core::resolve_url_or_path;
+use ::deno_core::url::Url;
+use ::deno_graph::GraphKind;
+use ::deno_runtime::permissions::parse_sys_kind;
 use log::debug;
 use log::Level;
 use std::env;
--- a/cli/args/flags_allow_net.rs
+++ b/cli/args/flags_allow_net.rs
@@ -1,6 +1,6 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_core::url::Url;
+use ::deno_core::url::Url;
 use std::net::IpAddr;
 use std::str::FromStr;
 
--- a/cli/args/import_map.rs
+++ b/cli/args/import_map.rs
@@ -1,9 +1,9 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_core::error::AnyError;
-use deno_core::serde_json;
-use deno_core::url::Url;
-use deno_runtime::permissions::PermissionsContainer;
+use ::deno_core::error::AnyError;
+use ::deno_core::serde_json;
+use ::deno_core::url::Url;
+use ::deno_runtime::permissions::PermissionsContainer;
 use import_map::ImportMap;
 use import_map::ImportMapDiagnostic;
 use log::warn;
--- a/cli/args/lockfile.rs
+++ b/cli/args/lockfile.rs
@@ -4,19 +4,19 @@ use std::collections::HashMap;
 use std::path::PathBuf;
 use std::sync::Arc;
 
-use deno_core::anyhow::bail;
-use deno_core::anyhow::Context;
-use deno_core::error::AnyError;
-use deno_core::futures::stream::FuturesOrdered;
-use deno_core::futures::StreamExt;
-use deno_core::parking_lot::Mutex;
-use deno_npm::registry::NpmRegistryApi;
-use deno_npm::resolution::SerializedNpmResolutionSnapshot;
-use deno_npm::resolution::SerializedNpmResolutionSnapshotPackage;
-use deno_npm::resolution::ValidSerializedNpmResolutionSnapshot;
-use deno_npm::NpmPackageId;
-use deno_npm::NpmResolutionPackageSystemInfo;
-use deno_semver::npm::NpmPackageReq;
+use ::deno_core::anyhow::bail;
+use ::deno_core::anyhow::Context;
+use ::deno_core::error::AnyError;
+use ::deno_core::futures::stream::FuturesOrdered;
+use ::deno_core::futures::StreamExt;
+use ::deno_core::parking_lot::Mutex;
+use ::deno_npm::registry::NpmRegistryApi;
+use ::deno_npm::resolution::SerializedNpmResolutionSnapshot;
+use ::deno_npm::resolution::SerializedNpmResolutionSnapshotPackage;
+use ::deno_npm::resolution::ValidSerializedNpmResolutionSnapshot;
+use ::deno_npm::NpmPackageId;
+use ::deno_npm::NpmResolutionPackageSystemInfo;
+use ::deno_semver::npm::NpmPackageReq;
 
 use crate::args::ConfigFile;
 use crate::npm::CliNpmRegistryApi;
@@ -24,8 +24,8 @@ use crate::Flags;
 
 use super::DenoSubcommand;
 
-pub use deno_lockfile::Lockfile;
-pub use deno_lockfile::LockfileError;
+pub use ::deno_lockfile::Lockfile;
+pub use ::deno_lockfile::LockfileError;
 
 pub fn discover(
   flags: &Flags,
--- a/cli/args/mod.rs
+++ b/cli/args/mod.rs
@@ -11,11 +11,11 @@ pub use self::import_map::resolve_import_map_from_specifier;
 pub use self::lockfile::snapshot_from_lockfile;
 use self::package_json::PackageJsonDeps;
 use ::import_map::ImportMap;
-use deno_core::resolve_url_or_path;
-use deno_npm::resolution::ValidSerializedNpmResolutionSnapshot;
-use deno_npm::NpmSystemInfo;
-use deno_runtime::deno_tls::RootCertStoreProvider;
-use deno_semver::npm::NpmPackageReqReference;
+use ::deno_core::resolve_url_or_path;
+use ::deno_npm::resolution::ValidSerializedNpmResolutionSnapshot;
+use ::deno_npm::NpmSystemInfo;
+use ::deno_runtime::deno_tls::RootCertStoreProvider;
+use ::deno_semver::npm::NpmPackageReqReference;
 use indexmap::IndexMap;
 
 pub use config_file::BenchConfig;
@@ -36,24 +36,24 @@ pub use lockfile::Lockfile;
 pub use lockfile::LockfileError;
 pub use package_json::PackageJsonDepsProvider;
 
-use deno_ast::ModuleSpecifier;
-use deno_core::anyhow::anyhow;
-use deno_core::anyhow::bail;
-use deno_core::anyhow::Context;
-use deno_core::error::AnyError;
-use deno_core::normalize_path;
-use deno_core::parking_lot::Mutex;
-use deno_core::serde_json;
-use deno_core::url::Url;
-use deno_runtime::colors;
-use deno_runtime::deno_node::PackageJson;
-use deno_runtime::deno_tls::rustls;
-use deno_runtime::deno_tls::rustls::RootCertStore;
-use deno_runtime::deno_tls::rustls_native_certs::load_native_certs;
-use deno_runtime::deno_tls::rustls_pemfile;
-use deno_runtime::deno_tls::webpki_roots;
-use deno_runtime::inspector_server::InspectorServer;
-use deno_runtime::permissions::PermissionsOptions;
+use ::deno_ast::ModuleSpecifier;
+use ::deno_core::anyhow::anyhow;
+use ::deno_core::anyhow::bail;
+use ::deno_core::anyhow::Context;
+use ::deno_core::error::AnyError;
+use ::deno_core::normalize_path;
+use ::deno_core::parking_lot::Mutex;
+use ::deno_core::serde_json;
+use ::deno_core::url::Url;
+use ::deno_runtime::colors;
+use ::deno_runtime::deno_node::PackageJson;
+use ::deno_runtime::deno_tls::rustls;
+use ::deno_runtime::deno_tls::rustls::RootCertStore;
+use ::deno_runtime::deno_tls::rustls_native_certs::load_native_certs;
+use ::deno_runtime::deno_tls::rustls_pemfile;
+use ::deno_runtime::deno_tls::webpki_roots;
+use ::deno_runtime::inspector_server::InspectorServer;
+use ::deno_runtime::permissions::PermissionsOptions;
 use once_cell::sync::Lazy;
 use once_cell::sync::OnceCell;
 use std::collections::HashMap;
--- a/cli/args/package_json.rs
+++ b/cli/args/package_json.rs
@@ -5,14 +5,14 @@ use std::collections::HashMap;
 use std::path::Path;
 use std::path::PathBuf;
 
-use deno_core::anyhow::bail;
-use deno_core::error::AnyError;
-use deno_npm::registry::parse_dep_entry_name_and_raw_version;
-use deno_npm::registry::PackageDepNpmSchemeValueParseError;
-use deno_runtime::deno_node::PackageJson;
-use deno_semver::npm::NpmPackageReq;
-use deno_semver::npm::NpmVersionReqSpecifierParseError;
-use deno_semver::VersionReq;
+use ::deno_core::anyhow::bail;
+use ::deno_core::error::AnyError;
+use ::deno_npm::registry::parse_dep_entry_name_and_raw_version;
+use ::deno_npm::registry::PackageDepNpmSchemeValueParseError;
+use ::deno_runtime::deno_node::PackageJson;
+use ::deno_semver::npm::NpmPackageReq;
+use ::deno_semver::npm::NpmVersionReqSpecifierParseError;
+use ::deno_semver::VersionReq;
 use thiserror::Error;
 
 #[derive(Debug, Error, Clone)]
--- a/cli/auth_tokens.rs
+++ b/cli/auth_tokens.rs
@@ -1,6 +1,6 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_core::ModuleSpecifier;
+use ::deno_core::ModuleSpecifier;
 use log::debug;
 use log::error;
 use std::fmt;
@@ -96,7 +96,7 @@ impl AuthTokens {
 #[cfg(test)]
 mod tests {
   use super::*;
-  use deno_core::resolve_url;
+  use ::deno_core::resolve_url;
 
   #[test]
   fn test_auth_token() {
--- a/cli/bench/lsp.rs
+++ b/cli/bench/lsp.rs
@@ -1,10 +1,10 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_core::serde::Deserialize;
-use deno_core::serde_json;
-use deno_core::serde_json::json;
-use deno_core::serde_json::Value;
-use deno_core::url::Url;
+use ::deno_core::serde::Deserialize;
+use ::deno_core::serde_json;
+use ::deno_core::serde_json::json;
+use ::deno_core::serde_json::Value;
+use ::deno_core::url::Url;
 use std::collections::HashMap;
 use std::path::Path;
 use std::time::Duration;
--- a/cli/bench/lsp_bench_standalone.rs
+++ b/cli/bench/lsp_bench_standalone.rs
@@ -1,10 +1,10 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_bench_util::bencher::benchmark_group;
-use deno_bench_util::bencher::benchmark_main;
-use deno_bench_util::bencher::Bencher;
-use deno_core::serde_json::json;
-use deno_core::serde_json::Value;
+use ::deno_bench_util::bencher::benchmark_group;
+use ::deno_bench_util::bencher::benchmark_main;
+use ::deno_bench_util::bencher::Bencher;
+use ::deno_core::serde_json::json;
+use ::deno_core::serde_json::Value;
 use test_util::lsp::LspClient;
 use test_util::lsp::LspClientBuilder;
 
--- a/cli/bench/main.rs
+++ b/cli/bench/main.rs
@@ -1,8 +1,8 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_core::error::AnyError;
-use deno_core::serde_json;
-use deno_core::serde_json::Value;
+use ::deno_core::error::AnyError;
+use ::deno_core::serde_json;
+use ::deno_core::serde_json::Value;
 use std::collections::HashMap;
 use std::convert::From;
 use std::env;
--- a/cli/build.rs
+++ b/cli/build.rs
@@ -4,23 +4,23 @@ use std::env;
 use std::path::PathBuf;
 use std::sync::Arc;
 
-use deno_core::snapshot_util::*;
-use deno_core::Extension;
-use deno_core::ExtensionFileSource;
-use deno_core::ExtensionFileSourceCode;
-use deno_runtime::deno_cache::SqliteBackedCache;
-use deno_runtime::deno_http::DefaultHttpPropertyExtractor;
-use deno_runtime::deno_kv::sqlite::SqliteDbHandler;
-use deno_runtime::permissions::PermissionsContainer;
-use deno_runtime::*;
+use ::deno_core::snapshot_util::*;
+use ::deno_core::Extension;
+use ::deno_core::ExtensionFileSource;
+use ::deno_core::ExtensionFileSourceCode;
+use ::deno_runtime::deno_cache::SqliteBackedCache;
+use ::deno_runtime::deno_http::DefaultHttpPropertyExtractor;
+use ::deno_runtime::deno_kv::sqlite::SqliteDbHandler;
+use ::deno_runtime::permissions::PermissionsContainer;
+use ::deno_runtime::*;
 
 mod ts {
   use super::*;
-  use deno_core::error::custom_error;
-  use deno_core::error::AnyError;
-  use deno_core::op;
-  use deno_core::OpState;
-  use deno_runtime::deno_node::SUPPORTED_BUILTIN_NODE_MODULES;
+  use ::deno_core::error::custom_error;
+  use ::deno_core::error::AnyError;
+  use ::deno_core::op;
+  use ::deno_core::OpState;
+  use ::deno_runtime::deno_node::SUPPORTED_BUILTIN_NODE_MODULES;
   use serde::Deserialize;
   use serde_json::json;
   use serde_json::Value;
--- a/cli/cache/cache_db.rs
+++ b/cli/cache/cache_db.rs
@@ -1,13 +1,13 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_core::error::AnyError;
-use deno_core::parking_lot::Mutex;
-use deno_core::parking_lot::MutexGuard;
-use deno_core::task::spawn_blocking;
-use deno_runtime::deno_webstorage::rusqlite;
-use deno_runtime::deno_webstorage::rusqlite::Connection;
-use deno_runtime::deno_webstorage::rusqlite::OptionalExtension;
-use deno_runtime::deno_webstorage::rusqlite::Params;
+use ::deno_core::error::AnyError;
+use ::deno_core::parking_lot::Mutex;
+use ::deno_core::parking_lot::MutexGuard;
+use ::deno_core::task::spawn_blocking;
+use ::deno_runtime::deno_webstorage::rusqlite;
+use ::deno_runtime::deno_webstorage::rusqlite::Connection;
+use ::deno_runtime::deno_webstorage::rusqlite::OptionalExtension;
+use ::deno_runtime::deno_webstorage::rusqlite::Params;
 use once_cell::sync::OnceCell;
 use std::path::PathBuf;
 use std::sync::Arc;
--- a/cli/cache/check.rs
+++ b/cli/cache/check.rs
@@ -3,9 +3,9 @@
 use super::cache_db::CacheDB;
 use super::cache_db::CacheDBConfiguration;
 use super::cache_db::CacheFailure;
-use deno_ast::ModuleSpecifier;
-use deno_core::error::AnyError;
-use deno_runtime::deno_webstorage::rusqlite::params;
+use ::deno_ast::ModuleSpecifier;
+use ::deno_core::error::AnyError;
+use ::deno_runtime::deno_webstorage::rusqlite::params;
 
 pub static TYPE_CHECK_CACHE_DB: CacheDBConfiguration = CacheDBConfiguration {
   table_initializer: concat!(
--- a/cli/cache/disk_cache.rs
+++ b/cli/cache/disk_cache.rs
@@ -4,8 +4,8 @@ use super::http_cache::url_to_filename;
 use super::CACHE_PERM;
 use crate::util::fs::atomic_write_file;
 
-use deno_core::url::Host;
-use deno_core::url::Url;
+use ::deno_core::url::Host;
+use ::deno_core::url::Url;
 use std::ffi::OsStr;
 use std::fs;
 use std::io;
--- a/cli/cache/emit.rs
+++ b/cli/cache/emit.rs
@@ -2,10 +2,10 @@
 
 use std::path::PathBuf;
 
-use deno_ast::ModuleSpecifier;
-use deno_core::anyhow::anyhow;
-use deno_core::error::AnyError;
-use deno_core::serde_json;
+use ::deno_ast::ModuleSpecifier;
+use ::deno_core::anyhow::anyhow;
+use ::deno_core::error::AnyError;
+use ::deno_core::serde_json;
 use serde::Deserialize;
 use serde::Serialize;
 
--- a/cli/cache/http_cache.rs
+++ b/cli/cache/http_cache.rs
@@ -5,12 +5,12 @@
 //! at hand.
 use crate::http_util::HeadersMap;
 use crate::util;
-use deno_core::error::generic_error;
-use deno_core::error::AnyError;
-use deno_core::serde::Deserialize;
-use deno_core::serde::Serialize;
-use deno_core::serde_json;
-use deno_core::url::Url;
+use ::deno_core::error::generic_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::serde::Deserialize;
+use ::deno_core::serde::Serialize;
+use ::deno_core::serde_json;
+use ::deno_core::url::Url;
 use std::fs;
 use std::fs::File;
 use std::io;
--- a/cli/cache/incremental.rs
+++ b/cli/cache/incremental.rs
@@ -4,12 +4,12 @@ use std::collections::HashMap;
 use std::path::Path;
 use std::path::PathBuf;
 
-use deno_core::error::AnyError;
-use deno_core::parking_lot::Mutex;
-use deno_core::serde_json;
-use deno_core::task::spawn;
-use deno_core::task::JoinHandle;
-use deno_runtime::deno_webstorage::rusqlite::params;
+use ::deno_core::error::AnyError;
+use ::deno_core::parking_lot::Mutex;
+use ::deno_core::serde_json;
+use ::deno_core::task::spawn;
+use ::deno_core::task::JoinHandle;
+use ::deno_runtime::deno_webstorage::rusqlite::params;
 use serde::Serialize;
 
 use super::cache_db::CacheDB;
--- a/cli/cache/mod.rs
+++ b/cli/cache/mod.rs
@@ -3,14 +3,14 @@
 use crate::errors::get_error_class_name;
 use crate::file_fetcher::FileFetcher;
 
-use deno_core::futures;
-use deno_core::futures::FutureExt;
-use deno_core::ModuleSpecifier;
-use deno_graph::source::CacheInfo;
-use deno_graph::source::LoadFuture;
-use deno_graph::source::LoadResponse;
-use deno_graph::source::Loader;
-use deno_runtime::permissions::PermissionsContainer;
+use ::deno_core::futures;
+use ::deno_core::futures::FutureExt;
+use ::deno_core::ModuleSpecifier;
+use ::deno_graph::source::CacheInfo;
+use ::deno_graph::source::LoadFuture;
+use ::deno_graph::source::LoadResponse;
+use ::deno_graph::source::Loader;
+use ::deno_runtime::permissions::PermissionsContainer;
 use std::collections::HashMap;
 use std::sync::Arc;
 
@@ -29,8 +29,8 @@ mod parsed_source;
 pub use caches::Caches;
 pub use check::TypeCheckCache;
 pub use common::FastInsecureHasher;
-pub use deno_dir::DenoDir;
-pub use deno_dir::DenoDirProvider;
+pub use self::deno_dir::DenoDir;
+pub use self::deno_dir::DenoDirProvider;
 pub use disk_cache::DiskCache;
 pub use emit::EmitCache;
 pub use http_cache::CachedUrlMetadata;
--- a/cli/cache/node.rs
+++ b/cli/cache/node.rs
@@ -1,9 +1,9 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_ast::CjsAnalysis;
-use deno_core::error::AnyError;
-use deno_core::serde_json;
-use deno_runtime::deno_webstorage::rusqlite::params;
+use ::deno_ast::CjsAnalysis;
+use ::deno_core::error::AnyError;
+use ::deno_core::serde_json;
+use ::deno_runtime::deno_webstorage::rusqlite::params;
 
 use super::cache_db::CacheDB;
 use super::cache_db::CacheDBConfiguration;
--- a/cli/cache/parsed_source.rs
+++ b/cli/cache/parsed_source.rs
@@ -3,17 +3,17 @@
 use std::collections::HashMap;
 use std::sync::Arc;
 
-use deno_ast::MediaType;
-use deno_ast::ModuleSpecifier;
-use deno_ast::ParsedSource;
-use deno_core::error::AnyError;
-use deno_core::parking_lot::Mutex;
-use deno_core::serde_json;
-use deno_graph::CapturingModuleParser;
-use deno_graph::DefaultModuleAnalyzer;
-use deno_graph::ModuleInfo;
-use deno_graph::ModuleParser;
-use deno_runtime::deno_webstorage::rusqlite::params;
+use ::deno_ast::MediaType;
+use ::deno_ast::ModuleSpecifier;
+use ::deno_ast::ParsedSource;
+use ::deno_core::error::AnyError;
+use ::deno_core::parking_lot::Mutex;
+use ::deno_core::serde_json;
+use ::deno_graph::CapturingModuleParser;
+use ::deno_graph::DefaultModuleAnalyzer;
+use ::deno_graph::ModuleInfo;
+use ::deno_graph::ModuleParser;
+use ::deno_runtime::deno_webstorage::rusqlite::params;
 
 use super::cache_db::CacheDB;
 use super::cache_db::CacheDBConfiguration;
@@ -267,8 +267,8 @@ fn compute_source_hash(bytes: &[u8]) -> String {
 
 #[cfg(test)]
 mod test {
-  use deno_graph::PositionRange;
-  use deno_graph::SpecifierWithRange;
+  use ::deno_graph::PositionRange;
+  use ::deno_graph::SpecifierWithRange;
 
   use super::*;
 
--- a/cli/emit.rs
+++ b/cli/emit.rs
@@ -4,12 +4,12 @@ use crate::cache::EmitCache;
 use crate::cache::FastInsecureHasher;
 use crate::cache::ParsedSourceCache;
 
-use deno_core::error::AnyError;
-use deno_core::ModuleCode;
-use deno_core::ModuleSpecifier;
-use deno_graph::MediaType;
-use deno_graph::Module;
-use deno_graph::ModuleGraph;
+use ::deno_core::error::AnyError;
+use ::deno_core::ModuleCode;
+use ::deno_core::ModuleSpecifier;
+use ::deno_graph::MediaType;
+use ::deno_graph::Module;
+use ::deno_graph::ModuleGraph;
 use std::sync::Arc;
 
 pub struct Emitter {
--- a/cli/errors.rs
+++ b/cli/errors.rs
@@ -9,11 +9,11 @@
 //!   Diagnostics are compile-time type errors, whereas JsErrors are runtime
 //!   exceptions.
 
-use deno_ast::Diagnostic;
-use deno_core::error::AnyError;
-use deno_graph::ModuleError;
-use deno_graph::ModuleGraphError;
-use deno_graph::ResolutionError;
+use ::deno_ast::Diagnostic;
+use ::deno_core::error::AnyError;
+use ::deno_graph::ModuleError;
+use ::deno_graph::ModuleGraphError;
+use ::deno_graph::ResolutionError;
 use import_map::ImportMapError;
 
 fn get_import_map_error_class(_: &ImportMapError) -> &'static str {
--- a/cli/factory.rs
+++ b/cli/factory.rs
@@ -44,17 +44,17 @@ use crate::worker::CliMainWorkerFactory;
 use crate::worker::CliMainWorkerOptions;
 use crate::worker::HasNodeSpecifierChecker;
 
-use deno_core::error::AnyError;
-use deno_core::parking_lot::Mutex;
+use ::deno_core::error::AnyError;
+use ::deno_core::parking_lot::Mutex;
 
-use deno_graph::GraphKind;
-use deno_runtime::deno_fs;
-use deno_runtime::deno_node::analyze::NodeCodeTranslator;
-use deno_runtime::deno_node::NodeResolver;
-use deno_runtime::deno_tls::RootCertStoreProvider;
-use deno_runtime::deno_web::BlobStore;
-use deno_runtime::inspector_server::InspectorServer;
-use deno_semver::npm::NpmPackageReqReference;
+use ::deno_graph::GraphKind;
+use ::deno_runtime::deno_fs;
+use ::deno_runtime::deno_node::analyze::NodeCodeTranslator;
+use ::deno_runtime::deno_node::NodeResolver;
+use ::deno_runtime::deno_tls::RootCertStoreProvider;
+use ::deno_runtime::deno_web::BlobStore;
+use ::deno_runtime::inspector_server::InspectorServer;
+use ::deno_semver::npm::NpmPackageReqReference;
 use import_map::ImportMap;
 use log::warn;
 use std::cell::RefCell;
--- a/cli/file_fetcher.rs
+++ b/cli/file_fetcher.rs
@@ -15,23 +15,23 @@ use crate::util::progress_bar::UpdateGuard;
 use crate::util::text_encoding;
 
 use data_url::DataUrl;
-use deno_ast::MediaType;
-use deno_core::error::custom_error;
-use deno_core::error::generic_error;
-use deno_core::error::uri_error;
-use deno_core::error::AnyError;
-use deno_core::futures;
-use deno_core::futures::future::FutureExt;
-use deno_core::parking_lot::Mutex;
-use deno_core::url::Url;
-use deno_core::ModuleSpecifier;
-use deno_runtime::deno_fetch::reqwest::header::HeaderValue;
-use deno_runtime::deno_fetch::reqwest::header::ACCEPT;
-use deno_runtime::deno_fetch::reqwest::header::AUTHORIZATION;
-use deno_runtime::deno_fetch::reqwest::header::IF_NONE_MATCH;
-use deno_runtime::deno_fetch::reqwest::StatusCode;
-use deno_runtime::deno_web::BlobStore;
-use deno_runtime::permissions::PermissionsContainer;
+use ::deno_ast::MediaType;
+use ::deno_core::error::custom_error;
+use ::deno_core::error::generic_error;
+use ::deno_core::error::uri_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::futures;
+use ::deno_core::futures::future::FutureExt;
+use ::deno_core::parking_lot::Mutex;
+use ::deno_core::url::Url;
+use ::deno_core::ModuleSpecifier;
+use ::deno_runtime::deno_fetch::reqwest::header::HeaderValue;
+use ::deno_runtime::deno_fetch::reqwest::header::ACCEPT;
+use ::deno_runtime::deno_fetch::reqwest::header::AUTHORIZATION;
+use ::deno_runtime::deno_fetch::reqwest::header::IF_NONE_MATCH;
+use ::deno_runtime::deno_fetch::reqwest::StatusCode;
+use ::deno_runtime::deno_web::BlobStore;
+use ::deno_runtime::permissions::PermissionsContainer;
 use log::debug;
 use std::borrow::Borrow;
 use std::collections::HashMap;
@@ -740,13 +740,13 @@ mod tests {
   use crate::version;
 
   use super::*;
-  use deno_core::error::get_custom_error_class;
-  use deno_core::resolve_url;
-  use deno_core::url::Url;
-  use deno_runtime::deno_fetch::create_http_client;
-  use deno_runtime::deno_fetch::CreateHttpClientOptions;
-  use deno_runtime::deno_web::Blob;
-  use deno_runtime::deno_web::InMemoryBlobPart;
+  use ::deno_core::error::get_custom_error_class;
+  use ::deno_core::resolve_url;
+  use ::deno_core::url::Url;
+  use ::deno_runtime::deno_fetch::create_http_client;
+  use ::deno_runtime::deno_fetch::CreateHttpClientOptions;
+  use ::deno_runtime::deno_web::Blob;
+  use ::deno_runtime::deno_web::InMemoryBlobPart;
   use std::fs::read;
   use test_util::TempDir;
 
@@ -2010,8 +2010,8 @@ mod tests {
   #[tokio::test]
   #[ignore] // https://github.com/denoland/deno/issues/12561
   async fn test_fetch_with_empty_certificate_store() {
-    use deno_runtime::deno_tls::rustls::RootCertStore;
-    use deno_runtime::deno_tls::RootCertStoreProvider;
+    use ::deno_runtime::deno_tls::rustls::RootCertStore;
+    use ::deno_runtime::deno_tls::RootCertStoreProvider;
 
     struct ValueRootCertStoreProvider(RootCertStore);
 
--- a/cli/graph_util.rs
+++ b/cli/graph_util.rs
@@ -13,24 +13,24 @@ use crate::resolver::CliGraphResolver;
 use crate::tools::check;
 use crate::tools::check::TypeChecker;
 
-use deno_core::anyhow::bail;
-use deno_core::error::custom_error;
-use deno_core::error::AnyError;
-use deno_core::parking_lot::Mutex;
-use deno_core::parking_lot::RwLock;
-use deno_core::ModuleSpecifier;
-use deno_core::TaskQueue;
-use deno_core::TaskQueuePermit;
-use deno_graph::source::Loader;
-use deno_graph::GraphKind;
-use deno_graph::Module;
-use deno_graph::ModuleError;
-use deno_graph::ModuleGraph;
-use deno_graph::ModuleGraphError;
-use deno_graph::ResolutionError;
-use deno_graph::SpecifierError;
-use deno_runtime::deno_node;
-use deno_runtime::permissions::PermissionsContainer;
+use ::deno_core::anyhow::bail;
+use ::deno_core::error::custom_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::parking_lot::Mutex;
+use ::deno_core::parking_lot::RwLock;
+use ::deno_core::ModuleSpecifier;
+use ::deno_core::TaskQueue;
+use ::deno_core::TaskQueuePermit;
+use ::deno_graph::source::Loader;
+use ::deno_graph::GraphKind;
+use ::deno_graph::Module;
+use ::deno_graph::ModuleError;
+use ::deno_graph::ModuleGraph;
+use ::deno_graph::ModuleGraphError;
+use ::deno_graph::ResolutionError;
+use ::deno_graph::SpecifierError;
+use ::deno_runtime::deno_node;
+use ::deno_runtime::permissions::PermissionsContainer;
 use import_map::ImportMapError;
 use std::collections::HashMap;
 use std::collections::HashSet;
@@ -596,11 +596,11 @@ impl deno_graph::source::Reporter for FileWatcherReporter {
 mod test {
   use std::sync::Arc;
 
-  use deno_ast::ModuleSpecifier;
-  use deno_graph::Position;
-  use deno_graph::Range;
-  use deno_graph::ResolutionError;
-  use deno_graph::SpecifierError;
+  use ::deno_ast::ModuleSpecifier;
+  use ::deno_graph::Position;
+  use ::deno_graph::Range;
+  use ::deno_graph::ResolutionError;
+  use ::deno_graph::SpecifierError;
 
   use crate::graph_util::get_resolution_error_bare_node_specifier;
 
--- a/cli/http_util.rs
+++ b/cli/http_util.rs
@@ -5,18 +5,18 @@ use crate::version::get_user_agent;
 use cache_control::Cachability;
 use cache_control::CacheControl;
 use chrono::DateTime;
-use deno_core::anyhow::bail;
-use deno_core::error::custom_error;
-use deno_core::error::generic_error;
-use deno_core::error::AnyError;
-use deno_core::futures::StreamExt;
-use deno_core::url::Url;
-use deno_runtime::deno_fetch::create_http_client;
-use deno_runtime::deno_fetch::reqwest;
-use deno_runtime::deno_fetch::reqwest::header::LOCATION;
-use deno_runtime::deno_fetch::reqwest::Response;
-use deno_runtime::deno_fetch::CreateHttpClientOptions;
-use deno_runtime::deno_tls::RootCertStoreProvider;
+use ::deno_core::anyhow::bail;
+use ::deno_core::error::custom_error;
+use ::deno_core::error::generic_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::futures::StreamExt;
+use ::deno_core::url::Url;
+use ::deno_runtime::deno_fetch::create_http_client;
+use ::deno_runtime::deno_fetch::reqwest;
+use ::deno_runtime::deno_fetch::reqwest::header::LOCATION;
+use ::deno_runtime::deno_fetch::reqwest::Response;
+use ::deno_runtime::deno_fetch::CreateHttpClientOptions;
+use ::deno_runtime::deno_tls::RootCertStoreProvider;
 use std::collections::HashMap;
 use std::sync::Arc;
 use std::time::Duration;
--- a/cli/js.rs
+++ b/cli/js.rs
@@ -1,6 +1,6 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_core::Snapshot;
+use ::deno_core::Snapshot;
 use log::debug;
 
 static CLI_SNAPSHOT: &[u8] =
--- a/cli/lsp/analysis.rs
+++ b/cli/lsp/analysis.rs
@@ -7,16 +7,16 @@ use super::tsc;
 
 use crate::tools::lint::create_linter;
 
-use deno_ast::SourceRange;
-use deno_ast::SourceRangedForSpanned;
-use deno_ast::SourceTextInfo;
-use deno_core::anyhow::anyhow;
-use deno_core::error::custom_error;
-use deno_core::error::AnyError;
-use deno_core::serde::Deserialize;
-use deno_core::serde_json::json;
-use deno_core::ModuleSpecifier;
-use deno_lint::rules::LintRule;
+use ::deno_ast::SourceRange;
+use ::deno_ast::SourceRangedForSpanned;
+use ::deno_ast::SourceTextInfo;
+use ::deno_core::anyhow::anyhow;
+use ::deno_core::error::custom_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::serde::Deserialize;
+use ::deno_core::serde_json::json;
+use ::deno_core::ModuleSpecifier;
+use ::deno_lint::rules::LintRule;
 use once_cell::sync::Lazy;
 use regex::Regex;
 use std::cmp::Ordering;
--- a/cli/lsp/cache.rs
+++ b/cli/lsp/cache.rs
@@ -3,8 +3,8 @@
 use crate::cache::CachedUrlMetadata;
 use crate::cache::HttpCache;
 
-use deno_core::parking_lot::Mutex;
-use deno_core::ModuleSpecifier;
+use ::deno_core::parking_lot::Mutex;
+use ::deno_core::ModuleSpecifier;
 use std::collections::HashMap;
 use std::fs;
 use std::path::Path;
--- a/cli/lsp/capabilities.rs
+++ b/cli/lsp/capabilities.rs
@@ -5,7 +5,7 @@
 //! language server, which helps determine what messages are sent from the
 //! client.
 //!
-use deno_core::serde_json::json;
+use ::deno_core::serde_json::json;
 use tower_lsp::lsp_types::*;
 
 use super::refactor::ALL_KNOWN_REFACTOR_ACTION_KINDS;
--- a/cli/lsp/client.rs
+++ b/cli/lsp/client.rs
@@ -3,12 +3,12 @@
 use std::sync::Arc;
 
 use async_trait::async_trait;
-use deno_core::anyhow::anyhow;
-use deno_core::anyhow::bail;
-use deno_core::error::AnyError;
-use deno_core::serde_json;
-use deno_core::serde_json::Value;
-use deno_core::task::spawn;
+use ::deno_core::anyhow::anyhow;
+use ::deno_core::anyhow::bail;
+use ::deno_core::error::AnyError;
+use ::deno_core::serde_json;
+use ::deno_core::serde_json::Value;
+use ::deno_core::task::spawn;
 use tower_lsp::lsp_types as lsp;
 use tower_lsp::lsp_types::ConfigurationItem;
 
--- a/cli/lsp/code_lens.rs
+++ b/cli/lsp/code_lens.rs
@@ -8,19 +8,19 @@ use super::text::LineIndex;
 use super::tsc;
 use super::tsc::NavigationTree;
 
-use deno_ast::swc::ast;
-use deno_ast::swc::visit::Visit;
-use deno_ast::swc::visit::VisitWith;
-use deno_ast::ParsedSource;
-use deno_ast::SourceRange;
-use deno_ast::SourceRangedForSpanned;
-use deno_core::error::AnyError;
-use deno_core::resolve_url;
-use deno_core::serde::Deserialize;
-use deno_core::serde::Serialize;
-use deno_core::serde_json;
-use deno_core::serde_json::json;
-use deno_core::ModuleSpecifier;
+use ::deno_ast::swc::ast;
+use ::deno_ast::swc::visit::Visit;
+use ::deno_ast::swc::visit::VisitWith;
+use ::deno_ast::ParsedSource;
+use ::deno_ast::SourceRange;
+use ::deno_ast::SourceRangedForSpanned;
+use ::deno_core::error::AnyError;
+use ::deno_core::resolve_url;
+use ::deno_core::serde::Deserialize;
+use ::deno_core::serde::Serialize;
+use ::deno_core::serde_json;
+use ::deno_core::serde_json::json;
+use ::deno_core::ModuleSpecifier;
 use lazy_regex::lazy_regex;
 use once_cell::sync::Lazy;
 use regex::Regex;
@@ -539,8 +539,8 @@ async fn collect_tsc(
 
 #[cfg(test)]
 mod tests {
-  use deno_ast::MediaType;
-  use deno_ast::SourceTextInfo;
+  use ::deno_ast::MediaType;
+  use ::deno_ast::SourceTextInfo;
 
   use super::*;
 
--- a/cli/lsp/completions.rs
+++ b/cli/lsp/completions.rs
@@ -12,15 +12,15 @@ use crate::util::path::is_supported_ext;
 use crate::util::path::relative_specifier;
 use crate::util::path::specifier_to_file_path;
 
-use deno_ast::LineAndColumnIndex;
-use deno_ast::SourceTextInfo;
-use deno_core::normalize_path;
-use deno_core::resolve_path;
-use deno_core::resolve_url;
-use deno_core::serde::Deserialize;
-use deno_core::serde::Serialize;
-use deno_core::url::Position;
-use deno_core::ModuleSpecifier;
+use ::deno_ast::LineAndColumnIndex;
+use ::deno_ast::SourceTextInfo;
+use ::deno_core::normalize_path;
+use ::deno_core::resolve_path;
+use ::deno_core::resolve_url;
+use ::deno_core::serde::Deserialize;
+use ::deno_core::serde::Serialize;
+use ::deno_core::url::Position;
+use ::deno_core::ModuleSpecifier;
 use import_map::ImportMap;
 use once_cell::sync::Lazy;
 use regex::Regex;
@@ -508,8 +508,8 @@ mod tests {
   use crate::cache::HttpCache;
   use crate::lsp::documents::Documents;
   use crate::lsp::documents::LanguageId;
-  use deno_core::resolve_url;
-  use deno_graph::Range;
+  use ::deno_core::resolve_url;
+  use ::deno_graph::Range;
   use std::collections::HashMap;
   use std::path::Path;
   use test_util::TempDir;
--- a/cli/lsp/config.rs
+++ b/cli/lsp/config.rs
@@ -2,12 +2,12 @@
 
 use super::logging::lsp_log;
 use crate::util::path::specifier_to_file_path;
-use deno_core::error::AnyError;
-use deno_core::serde::Deserialize;
-use deno_core::serde::Serialize;
-use deno_core::serde_json;
-use deno_core::serde_json::Value;
-use deno_core::ModuleSpecifier;
+use ::deno_core::error::AnyError;
+use ::deno_core::serde::Deserialize;
+use ::deno_core::serde::Serialize;
+use ::deno_core::serde_json;
+use ::deno_core::serde_json::Value;
+use ::deno_core::ModuleSpecifier;
 use lsp::Url;
 use std::collections::BTreeMap;
 use std::collections::HashMap;
@@ -665,8 +665,8 @@ impl Config {
 #[cfg(test)]
 mod tests {
   use super::*;
-  use deno_core::resolve_url;
-  use deno_core::serde_json::json;
+  use ::deno_core::resolve_url;
+  use ::deno_core::serde_json::json;
   use pretty_assertions::assert_eq;
 
   #[test]
--- a/cli/lsp/diagnostics.rs
+++ b/cli/lsp/diagnostics.rs
@@ -19,23 +19,23 @@ use crate::graph_util::enhanced_resolution_error_message;
 use crate::lsp::lsp_custom::DiagnosticBatchNotificationParams;
 use crate::tools::lint::get_configured_rules;
 
-use deno_ast::MediaType;
-use deno_core::anyhow::anyhow;
-use deno_core::error::AnyError;
-use deno_core::resolve_url;
-use deno_core::serde::Deserialize;
-use deno_core::serde_json;
-use deno_core::serde_json::json;
-use deno_core::task::spawn;
-use deno_core::task::JoinHandle;
-use deno_core::ModuleSpecifier;
-use deno_graph::Resolution;
-use deno_graph::ResolutionError;
-use deno_graph::SpecifierError;
-use deno_lint::rules::LintRule;
-use deno_runtime::deno_node;
-use deno_runtime::tokio_util::create_basic_runtime;
-use deno_semver::npm::NpmPackageReqReference;
+use ::deno_ast::MediaType;
+use ::deno_core::anyhow::anyhow;
+use ::deno_core::error::AnyError;
+use ::deno_core::resolve_url;
+use ::deno_core::serde::Deserialize;
+use ::deno_core::serde_json;
+use ::deno_core::serde_json::json;
+use ::deno_core::task::spawn;
+use ::deno_core::task::JoinHandle;
+use ::deno_core::ModuleSpecifier;
+use ::deno_graph::Resolution;
+use ::deno_graph::ResolutionError;
+use ::deno_graph::SpecifierError;
+use ::deno_lint::rules::LintRule;
+use ::deno_runtime::deno_node;
+use ::deno_runtime::tokio_util::create_basic_runtime;
+use ::deno_semver::npm::NpmPackageReqReference;
 use log::error;
 use std::collections::HashMap;
 use std::sync::atomic::AtomicUsize;
--- a/cli/lsp/documents.rs
+++ b/cli/lsp/documents.rs
@@ -24,25 +24,25 @@ use crate::util::glob;
 use crate::util::path::specifier_to_file_path;
 use crate::util::text_encoding;
 
-use deno_ast::MediaType;
-use deno_ast::ParsedSource;
-use deno_ast::SourceTextInfo;
-use deno_core::error::custom_error;
-use deno_core::error::AnyError;
-use deno_core::futures::future;
-use deno_core::parking_lot::Mutex;
-use deno_core::url;
-use deno_core::ModuleSpecifier;
-use deno_graph::GraphImport;
-use deno_graph::Resolution;
-use deno_runtime::deno_node;
-use deno_runtime::deno_node::NodeResolution;
-use deno_runtime::deno_node::NodeResolutionMode;
-use deno_runtime::deno_node::NodeResolver;
-use deno_runtime::deno_node::PackageJson;
-use deno_runtime::permissions::PermissionsContainer;
-use deno_semver::npm::NpmPackageReq;
-use deno_semver::npm::NpmPackageReqReference;
+use ::deno_ast::MediaType;
+use ::deno_ast::ParsedSource;
+use ::deno_ast::SourceTextInfo;
+use ::deno_core::error::custom_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::futures::future;
+use ::deno_core::parking_lot::Mutex;
+use ::deno_core::url;
+use ::deno_core::ModuleSpecifier;
+use ::deno_graph::GraphImport;
+use ::deno_graph::Resolution;
+use ::deno_runtime::deno_node;
+use ::deno_runtime::deno_node::NodeResolution;
+use ::deno_runtime::deno_node::NodeResolutionMode;
+use ::deno_runtime::deno_node::NodeResolver;
+use ::deno_runtime::deno_node::PackageJson;
+use ::deno_runtime::permissions::PermissionsContainer;
+use ::deno_semver::npm::NpmPackageReq;
+use ::deno_semver::npm::NpmPackageReqReference;
 use indexmap::IndexMap;
 use lsp::Url;
 use once_cell::sync::Lazy;
--- a/cli/lsp/language_server.rs
+++ b/cli/lsp/language_server.rs
@@ -1,26 +1,26 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_ast::MediaType;
-use deno_core::anyhow::anyhow;
-use deno_core::anyhow::Context;
-use deno_core::error::AnyError;
-use deno_core::parking_lot::Mutex;
-use deno_core::resolve_url;
-use deno_core::serde_json;
-use deno_core::serde_json::json;
-use deno_core::serde_json::Value;
-use deno_core::task::spawn;
-use deno_core::ModuleSpecifier;
-use deno_graph::GraphKind;
-use deno_lockfile::Lockfile;
-use deno_npm::resolution::ValidSerializedNpmResolutionSnapshot;
-use deno_npm::NpmSystemInfo;
-use deno_runtime::deno_fs;
-use deno_runtime::deno_node::NodeResolver;
-use deno_runtime::deno_node::PackageJson;
-use deno_runtime::deno_tls::rustls::RootCertStore;
-use deno_runtime::deno_tls::RootCertStoreProvider;
-use deno_runtime::deno_web::BlobStore;
+use ::deno_ast::MediaType;
+use ::deno_core::anyhow::anyhow;
+use ::deno_core::anyhow::Context;
+use ::deno_core::error::AnyError;
+use ::deno_core::parking_lot::Mutex;
+use ::deno_core::resolve_url;
+use ::deno_core::serde_json;
+use ::deno_core::serde_json::json;
+use ::deno_core::serde_json::Value;
+use ::deno_core::task::spawn;
+use ::deno_core::ModuleSpecifier;
+use ::deno_graph::GraphKind;
+use ::deno_lockfile::Lockfile;
+use ::deno_npm::resolution::ValidSerializedNpmResolutionSnapshot;
+use ::deno_npm::NpmSystemInfo;
+use ::deno_runtime::deno_fs;
+use ::deno_runtime::deno_node::NodeResolver;
+use ::deno_runtime::deno_node::PackageJson;
+use ::deno_runtime::deno_tls::rustls::RootCertStore;
+use ::deno_runtime::deno_tls::RootCertStoreProvider;
+use ::deno_runtime::deno_web::BlobStore;
 use import_map::ImportMap;
 use log::error;
 use serde_json::from_value;
--- a/cli/lsp/lsp_custom.rs
+++ b/cli/lsp/lsp_custom.rs
@@ -1,7 +1,7 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_core::serde::Deserialize;
-use deno_core::serde::Serialize;
+use ::deno_core::serde::Deserialize;
+use ::deno_core::serde::Serialize;
 use tower_lsp::lsp_types as lsp;
 
 pub const CACHE_REQUEST: &str = "deno/cache";
--- a/cli/lsp/mod.rs
+++ b/cli/lsp/mod.rs
@@ -1,6 +1,6 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_core::error::AnyError;
+use ::deno_core::error::AnyError;
 use tower_lsp::LspService;
 use tower_lsp::Server;
 
--- a/cli/lsp/parent_process_checker.rs
+++ b/cli/lsp/parent_process_checker.rs
@@ -1,6 +1,6 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_core::task::spawn;
+use ::deno_core::task::spawn;
 use tokio::time::sleep;
 use tokio::time::Duration;
 
--- a/cli/lsp/path_to_regex.rs
+++ b/cli/lsp/path_to_regex.rs
@@ -26,8 +26,8 @@
 // THE SOFTWARE.
 //
 
-use deno_core::anyhow::anyhow;
-use deno_core::error::AnyError;
+use ::deno_core::anyhow::anyhow;
+use ::deno_core::error::AnyError;
 use fancy_regex::Regex as FancyRegex;
 use once_cell::sync::Lazy;
 use regex::Regex;
--- a/cli/lsp/performance.rs
+++ b/cli/lsp/performance.rs
@@ -1,9 +1,9 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_core::parking_lot::Mutex;
-use deno_core::serde::Deserialize;
-use deno_core::serde::Serialize;
-use deno_core::serde_json::json;
+use ::deno_core::parking_lot::Mutex;
+use ::deno_core::serde::Deserialize;
+use ::deno_core::serde::Serialize;
+use ::deno_core::serde_json::json;
 use std::cmp;
 use std::collections::HashMap;
 use std::collections::VecDeque;
--- a/cli/lsp/refactor.rs
+++ b/cli/lsp/refactor.rs
@@ -3,9 +3,9 @@
 // The logic of this module is heavily influenced by
 // https://github.com/microsoft/vscode/blob/main/extensions/typescript-language-features/src/languageFeatures/refactor.ts
 
-use deno_core::serde::Deserialize;
-use deno_core::serde::Serialize;
-use deno_core::ModuleSpecifier;
+use ::deno_core::serde::Deserialize;
+use ::deno_core::serde::Serialize;
+use ::deno_core::ModuleSpecifier;
 use once_cell::sync::Lazy;
 use tower_lsp::lsp_types as lsp;
 
--- a/cli/lsp/registries.rs
+++ b/cli/lsp/registries.rs
@@ -18,19 +18,19 @@ use crate::cache::HttpCache;
 use crate::file_fetcher::FileFetcher;
 use crate::http_util::HttpClient;
 
-use deno_core::anyhow::anyhow;
-use deno_core::error::AnyError;
-use deno_core::serde::Deserialize;
-use deno_core::serde_json;
-use deno_core::serde_json::json;
-use deno_core::serde_json::Value;
-use deno_core::url::ParseError;
-use deno_core::url::Position;
-use deno_core::url::Url;
-use deno_core::ModuleSpecifier;
-use deno_graph::Dependency;
-use deno_runtime::deno_web::BlobStore;
-use deno_runtime::permissions::PermissionsContainer;
+use ::deno_core::anyhow::anyhow;
+use ::deno_core::error::AnyError;
+use ::deno_core::serde::Deserialize;
+use ::deno_core::serde_json;
+use ::deno_core::serde_json::json;
+use ::deno_core::serde_json::Value;
+use ::deno_core::url::ParseError;
+use ::deno_core::url::Position;
+use ::deno_core::url::Url;
+use ::deno_core::ModuleSpecifier;
+use ::deno_graph::Dependency;
+use ::deno_runtime::deno_web::BlobStore;
+use ::deno_runtime::permissions::PermissionsContainer;
 use log::error;
 use once_cell::sync::Lazy;
 use std::collections::HashMap;
--- a/cli/lsp/repl.rs
+++ b/cli/lsp/repl.rs
@@ -2,12 +2,12 @@
 
 use std::collections::HashMap;
 
-use deno_ast::LineAndColumnIndex;
-use deno_ast::ModuleSpecifier;
-use deno_ast::SourceTextInfo;
-use deno_core::anyhow::anyhow;
-use deno_core::error::AnyError;
-use deno_core::serde_json;
+use ::deno_ast::LineAndColumnIndex;
+use ::deno_ast::ModuleSpecifier;
+use ::deno_ast::SourceTextInfo;
+use ::deno_core::anyhow::anyhow;
+use ::deno_core::error::AnyError;
+use ::deno_core::serde_json;
 use tower_lsp::lsp_types::ClientCapabilities;
 use tower_lsp::lsp_types::ClientInfo;
 use tower_lsp::lsp_types::CompletionContext;
--- a/cli/lsp/testing/collectors.rs
+++ b/cli/lsp/testing/collectors.rs
@@ -2,13 +2,13 @@
 
 use super::definitions::TestDefinition;
 
-use deno_ast::swc::ast;
-use deno_ast::swc::visit::Visit;
-use deno_ast::swc::visit::VisitWith;
-use deno_ast::SourceRange;
-use deno_ast::SourceRangedForSpanned;
-use deno_ast::SourceTextInfo;
-use deno_core::ModuleSpecifier;
+use ::deno_ast::swc::ast;
+use ::deno_ast::swc::visit::Visit;
+use ::deno_ast::swc::visit::VisitWith;
+use ::deno_ast::SourceRange;
+use ::deno_ast::SourceRangedForSpanned;
+use ::deno_ast::SourceTextInfo;
+use ::deno_core::ModuleSpecifier;
 use std::collections::HashMap;
 use std::collections::HashSet;
 
@@ -538,8 +538,8 @@ impl Visit for TestCollector {
 #[cfg(test)]
 pub mod tests {
   use super::*;
-  use deno_ast::StartSourcePos;
-  use deno_core::resolve_url;
+  use ::deno_ast::StartSourcePos;
+  use ::deno_core::resolve_url;
 
   pub fn new_range(start: usize, end: usize) -> SourceRange {
     SourceRange::new(
--- a/cli/lsp/testing/definitions.rs
+++ b/cli/lsp/testing/definitions.rs
@@ -6,9 +6,9 @@ use crate::lsp::analysis::source_range_to_lsp_range;
 use crate::lsp::client::TestingNotification;
 use crate::util::checksum;
 
-use deno_ast::SourceRange;
-use deno_ast::SourceTextInfo;
-use deno_core::ModuleSpecifier;
+use ::deno_ast::SourceRange;
+use ::deno_ast::SourceTextInfo;
+use ::deno_core::ModuleSpecifier;
 use std::collections::HashMap;
 use tower_lsp::lsp_types as lsp;
 
--- a/cli/lsp/testing/execution.rs
+++ b/cli/lsp/testing/execution.rs
@@ -16,19 +16,19 @@ use crate::tools::test::FailFastTracker;
 use crate::tools::test::TestEventSender;
 use crate::util::checksum;
 
-use deno_core::anyhow::anyhow;
-use deno_core::error::AnyError;
-use deno_core::error::JsError;
-use deno_core::futures::future;
-use deno_core::futures::stream;
-use deno_core::futures::StreamExt;
-use deno_core::parking_lot::Mutex;
-use deno_core::parking_lot::RwLock;
-use deno_core::task::spawn;
-use deno_core::task::spawn_blocking;
-use deno_core::ModuleSpecifier;
-use deno_runtime::permissions::Permissions;
-use deno_runtime::tokio_util::create_and_run_current_thread;
+use ::deno_core::anyhow::anyhow;
+use ::deno_core::error::AnyError;
+use ::deno_core::error::JsError;
+use ::deno_core::futures::future;
+use ::deno_core::futures::stream;
+use ::deno_core::futures::StreamExt;
+use ::deno_core::parking_lot::Mutex;
+use ::deno_core::parking_lot::RwLock;
+use ::deno_core::task::spawn;
+use ::deno_core::task::spawn_blocking;
+use ::deno_core::ModuleSpecifier;
+use ::deno_runtime::permissions::Permissions;
+use ::deno_runtime::tokio_util::create_and_run_current_thread;
 use indexmap::IndexMap;
 use std::collections::HashMap;
 use std::collections::HashSet;
@@ -811,7 +811,7 @@ impl LspTestReporter {
 mod tests {
   use super::*;
   use crate::lsp::testing::collectors::tests::new_range;
-  use deno_core::serde_json::json;
+  use ::deno_core::serde_json::json;
 
   #[test]
   fn test_as_queue_and_filters() {
--- a/cli/lsp/testing/lsp_custom.rs
+++ b/cli/lsp/testing/lsp_custom.rs
@@ -1,7 +1,7 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_core::serde::Deserialize;
-use deno_core::serde::Serialize;
+use ::deno_core::serde::Deserialize;
+use ::deno_core::serde::Serialize;
 use tower_lsp::lsp_types as lsp;
 
 pub const TEST_RUN_CANCEL_REQUEST: &str = "deno/testRunCancel";
--- a/cli/lsp/testing/server.rs
+++ b/cli/lsp/testing/server.rs
@@ -12,13 +12,13 @@ use crate::lsp::documents::DocumentsFilter;
 use crate::lsp::language_server::StateSnapshot;
 use crate::lsp::performance::Performance;
 
-use deno_ast::swc::visit::VisitWith;
-use deno_core::error::AnyError;
-use deno_core::parking_lot::Mutex;
-use deno_core::serde_json::json;
-use deno_core::serde_json::Value;
-use deno_core::ModuleSpecifier;
-use deno_runtime::tokio_util::create_basic_runtime;
+use ::deno_ast::swc::visit::VisitWith;
+use ::deno_core::error::AnyError;
+use ::deno_core::parking_lot::Mutex;
+use ::deno_core::serde_json::json;
+use ::deno_core::serde_json::Value;
+use ::deno_core::ModuleSpecifier;
+use ::deno_runtime::tokio_util::create_basic_runtime;
 use std::collections::HashMap;
 use std::collections::HashSet;
 use std::sync::Arc;
--- a/cli/lsp/text.rs
+++ b/cli/lsp/text.rs
@@ -1,7 +1,7 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_core::error::custom_error;
-use deno_core::error::AnyError;
+use ::deno_core::error::custom_error;
+use ::deno_core::error::AnyError;
 use dissimilar::diff;
 use dissimilar::Chunk;
 use std::collections::HashMap;
--- a/cli/lsp/tsc.rs
+++ b/cli/lsp/tsc.rs
@@ -27,24 +27,24 @@ use crate::tsc::ResolveArgs;
 use crate::util::path::relative_specifier;
 use crate::util::path::specifier_to_file_path;
 
-use deno_core::anyhow::anyhow;
-use deno_core::error::custom_error;
-use deno_core::error::AnyError;
-use deno_core::located_script_name;
-use deno_core::op;
-use deno_core::parking_lot::Mutex;
-use deno_core::resolve_url;
-use deno_core::serde::de;
-use deno_core::serde::Deserialize;
-use deno_core::serde::Serialize;
-use deno_core::serde_json;
-use deno_core::serde_json::json;
-use deno_core::serde_json::Value;
-use deno_core::JsRuntime;
-use deno_core::ModuleSpecifier;
-use deno_core::OpState;
-use deno_core::RuntimeOptions;
-use deno_runtime::tokio_util::create_basic_runtime;
+use ::deno_core::anyhow::anyhow;
+use ::deno_core::error::custom_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::located_script_name;
+use ::deno_core::op;
+use ::deno_core::parking_lot::Mutex;
+use ::deno_core::resolve_url;
+use ::deno_core::serde::de;
+use ::deno_core::serde::Deserialize;
+use ::deno_core::serde::Serialize;
+use ::deno_core::serde_json;
+use ::deno_core::serde_json::json;
+use ::deno_core::serde_json::Value;
+use ::deno_core::JsRuntime;
+use ::deno_core::ModuleSpecifier;
+use ::deno_core::OpState;
+use ::deno_core::RuntimeOptions;
+use ::deno_runtime::tokio_util::create_basic_runtime;
 use lazy_regex::lazy_regex;
 use once_cell::sync::Lazy;
 use regex::Captures;
--- a/cli/lsp/urls.rs
+++ b/cli/lsp/urls.rs
@@ -3,13 +3,13 @@
 use crate::file_fetcher::map_content_type;
 
 use data_url::DataUrl;
-use deno_ast::MediaType;
-use deno_core::error::uri_error;
-use deno_core::error::AnyError;
-use deno_core::parking_lot::Mutex;
-use deno_core::url::Position;
-use deno_core::url::Url;
-use deno_core::ModuleSpecifier;
+use ::deno_ast::MediaType;
+use ::deno_core::error::uri_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::parking_lot::Mutex;
+use ::deno_core::url::Position;
+use ::deno_core::url::Url;
+use ::deno_core::ModuleSpecifier;
 use once_cell::sync::Lazy;
 use std::collections::HashMap;
 use std::sync::Arc;
@@ -209,7 +209,7 @@ impl LspUrlMap {
 #[cfg(test)]
 mod tests {
   use super::*;
-  use deno_core::resolve_url;
+  use ::deno_core::resolve_url;
 
   #[test]
   fn test_hash_data_specifier() {
--- a/cli/main.rs
+++ b/cli/main.rs
@@ -32,14 +32,14 @@ use crate::util::display;
 use crate::util::v8::get_v8_flags_from_env;
 use crate::util::v8::init_v8_flags;
 
-use deno_core::anyhow::Context;
-use deno_core::error::AnyError;
-use deno_core::error::JsError;
-use deno_core::futures::FutureExt;
-use deno_core::task::JoinHandle;
-use deno_runtime::colors;
-use deno_runtime::fmt_errors::format_js_error;
-use deno_runtime::tokio_util::create_and_run_current_thread_with_maybe_metrics;
+use ::deno_core::anyhow::Context;
+use ::deno_core::error::AnyError;
+use ::deno_core::error::JsError;
+use ::deno_core::futures::FutureExt;
+use ::deno_core::task::JoinHandle;
+use ::deno_runtime::colors;
+use ::deno_runtime::fmt_errors::format_js_error;
+use ::deno_runtime::tokio_util::create_and_run_current_thread_with_maybe_metrics;
 use factory::CliFactory;
 use std::env;
 use std::env::current_exe;
--- a/cli/module_loader.rs
+++ b/cli/module_loader.rs
@@ -20,37 +20,37 @@ use crate::util::text_encoding::code_without_source_map;
 use crate::util::text_encoding::source_map_from_code;
 use crate::worker::ModuleLoaderFactory;
 
-use deno_ast::MediaType;
-use deno_core::anyhow::anyhow;
-use deno_core::anyhow::Context;
-use deno_core::error::custom_error;
-use deno_core::error::generic_error;
-use deno_core::error::AnyError;
-use deno_core::futures::future::FutureExt;
-use deno_core::futures::Future;
-use deno_core::parking_lot::Mutex;
-use deno_core::resolve_url;
-use deno_core::resolve_url_or_path;
-use deno_core::ModuleCode;
-use deno_core::ModuleLoader;
-use deno_core::ModuleSource;
-use deno_core::ModuleSpecifier;
-use deno_core::ModuleType;
-use deno_core::ResolutionKind;
-use deno_core::SourceMapGetter;
-use deno_graph::source::Resolver;
-use deno_graph::EsmModule;
-use deno_graph::JsonModule;
-use deno_graph::Module;
-use deno_graph::Resolution;
-use deno_lockfile::Lockfile;
-use deno_runtime::deno_fs;
-use deno_runtime::deno_node::NodeResolution;
-use deno_runtime::deno_node::NodeResolutionMode;
-use deno_runtime::deno_node::NodeResolver;
-use deno_runtime::permissions::PermissionsContainer;
-use deno_semver::npm::NpmPackageNvReference;
-use deno_semver::npm::NpmPackageReqReference;
+use ::deno_ast::MediaType;
+use ::deno_core::anyhow::anyhow;
+use ::deno_core::anyhow::Context;
+use ::deno_core::error::custom_error;
+use ::deno_core::error::generic_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::futures::future::FutureExt;
+use ::deno_core::futures::Future;
+use ::deno_core::parking_lot::Mutex;
+use ::deno_core::resolve_url;
+use ::deno_core::resolve_url_or_path;
+use ::deno_core::ModuleCode;
+use ::deno_core::ModuleLoader;
+use ::deno_core::ModuleSource;
+use ::deno_core::ModuleSpecifier;
+use ::deno_core::ModuleType;
+use ::deno_core::ResolutionKind;
+use ::deno_core::SourceMapGetter;
+use ::deno_graph::source::Resolver;
+use ::deno_graph::EsmModule;
+use ::deno_graph::JsonModule;
+use ::deno_graph::Module;
+use ::deno_graph::Resolution;
+use ::deno_lockfile::Lockfile;
+use ::deno_runtime::deno_fs;
+use ::deno_runtime::deno_node::NodeResolution;
+use ::deno_runtime::deno_node::NodeResolutionMode;
+use ::deno_runtime::deno_node::NodeResolver;
+use ::deno_runtime::permissions::PermissionsContainer;
+use ::deno_semver::npm::NpmPackageNvReference;
+use ::deno_semver::npm::NpmPackageReqReference;
 use std::borrow::Cow;
 use std::collections::HashSet;
 use std::pin::Pin;
--- a/cli/napi/async.rs
+++ b/cli/napi/async.rs
@@ -1,6 +1,6 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_runtime::deno_napi::*;
+use ::deno_runtime::deno_napi::*;
 
 use crate::check_env;
 
--- a/cli/napi/env.rs
+++ b/cli/napi/env.rs
@@ -1,6 +1,6 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_runtime::deno_napi::*;
+use ::deno_runtime::deno_napi::*;
 use std::os::raw::c_char;
 
 /// # Safety
--- a/cli/napi/js_native_api.rs
+++ b/cli/napi/js_native_api.rs
@@ -2,15 +2,15 @@
 
 #![allow(non_upper_case_globals)]
 
-use deno_runtime::deno_napi::*;
+use ::deno_runtime::deno_napi::*;
 use libc::INT_MAX;
 use v8::BackingStore;
 use v8::UniqueRef;
 
 use super::util::get_array_buffer_ptr;
-use deno_runtime::deno_napi::function::create_function;
-use deno_runtime::deno_napi::function::create_function_template;
-use deno_runtime::deno_napi::function::CallbackInfo;
+use ::deno_runtime::deno_napi::function::create_function;
+use ::deno_runtime::deno_napi::function::create_function_template;
+use ::deno_runtime::deno_napi::function::CallbackInfo;
 use std::ptr::NonNull;
 
 #[macro_export]
--- a/cli/napi/threadsafe_functions.rs
+++ b/cli/napi/threadsafe_functions.rs
@@ -1,7 +1,7 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_core::futures::channel::mpsc;
-use deno_runtime::deno_napi::*;
+use ::deno_core::futures::channel::mpsc;
+use ::deno_runtime::deno_napi::*;
 use once_cell::sync::Lazy;
 use std::mem::forget;
 use std::sync::atomic::AtomicUsize;
--- a/cli/napi/util.rs
+++ b/cli/napi/util.rs
@@ -1,6 +1,6 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_runtime::deno_napi::*;
+use ::deno_runtime::deno_napi::*;
 use std::cell::Cell;
 
 unsafe fn get_backing_store_slice(
--- a/cli/node.rs
+++ b/cli/node.rs
@@ -2,18 +2,18 @@
 
 use std::collections::HashSet;
 
-use deno_ast::swc::common::SyntaxContext;
-use deno_ast::view::Node;
-use deno_ast::view::NodeTrait;
-use deno_ast::CjsAnalysis;
-use deno_ast::MediaType;
-use deno_ast::ModuleSpecifier;
-use deno_ast::ParsedSource;
-use deno_ast::SourceRanged;
-use deno_core::error::AnyError;
-use deno_runtime::deno_node::analyze::CjsAnalysis as ExtNodeCjsAnalysis;
-use deno_runtime::deno_node::analyze::CjsEsmCodeAnalyzer;
-use deno_runtime::deno_node::analyze::NodeCodeTranslator;
+use ::deno_ast::swc::common::SyntaxContext;
+use ::deno_ast::view::Node;
+use ::deno_ast::view::NodeTrait;
+use ::deno_ast::CjsAnalysis;
+use ::deno_ast::MediaType;
+use ::deno_ast::ModuleSpecifier;
+use ::deno_ast::ParsedSource;
+use ::deno_ast::SourceRanged;
+use ::deno_core::error::AnyError;
+use ::deno_runtime::deno_node::analyze::CjsAnalysis as ExtNodeCjsAnalysis;
+use ::deno_runtime::deno_node::analyze::CjsEsmCodeAnalyzer;
+use ::deno_runtime::deno_node::analyze::NodeCodeTranslator;
 
 use crate::cache::NodeAnalysisCache;
 use crate::util::fs::canonicalize_path_maybe_not_exists;
--- a/cli/npm/cache.rs
+++ b/cli/npm/cache.rs
@@ -6,18 +6,18 @@ use std::path::Path;
 use std::path::PathBuf;
 use std::sync::Arc;
 
-use deno_ast::ModuleSpecifier;
-use deno_core::anyhow::bail;
-use deno_core::anyhow::Context;
-use deno_core::error::custom_error;
-use deno_core::error::AnyError;
-use deno_core::parking_lot::Mutex;
-use deno_core::url::Url;
-use deno_npm::registry::NpmPackageVersionDistInfo;
-use deno_npm::NpmPackageCacheFolderId;
-use deno_runtime::deno_fs;
-use deno_semver::npm::NpmPackageNv;
-use deno_semver::Version;
+use ::deno_ast::ModuleSpecifier;
+use ::deno_core::anyhow::bail;
+use ::deno_core::anyhow::Context;
+use ::deno_core::error::custom_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::parking_lot::Mutex;
+use ::deno_core::url::Url;
+use ::deno_npm::registry::NpmPackageVersionDistInfo;
+use ::deno_npm::NpmPackageCacheFolderId;
+use ::deno_runtime::deno_fs;
+use ::deno_semver::npm::NpmPackageNv;
+use ::deno_semver::Version;
 use once_cell::sync::Lazy;
 
 use crate::args::CacheSetting;
@@ -479,9 +479,9 @@ pub fn mixed_case_package_name_decode(name: &str) -> Option<String> {
 
 #[cfg(test)]
 mod test {
-  use deno_core::url::Url;
-  use deno_semver::npm::NpmPackageNv;
-  use deno_semver::Version;
+  use ::deno_core::url::Url;
+  use ::deno_semver::npm::NpmPackageNv;
+  use ::deno_semver::Version;
 
   use super::NpmCacheDir;
   use crate::npm::cache::NpmPackageCacheFolderId;
--- a/cli/npm/installer.rs
+++ b/cli/npm/installer.rs
@@ -3,12 +3,12 @@
 use std::future::Future;
 use std::sync::Arc;
 
-use deno_core::error::AnyError;
-use deno_core::futures::stream::FuturesOrdered;
-use deno_core::futures::StreamExt;
-use deno_npm::registry::NpmRegistryApi;
-use deno_npm::registry::NpmRegistryPackageInfoLoadError;
-use deno_semver::npm::NpmPackageReq;
+use ::deno_core::error::AnyError;
+use ::deno_core::futures::stream::FuturesOrdered;
+use ::deno_core::futures::StreamExt;
+use ::deno_npm::registry::NpmRegistryApi;
+use ::deno_npm::registry::NpmRegistryPackageInfoLoadError;
+use ::deno_semver::npm::NpmPackageReq;
 
 use crate::args::PackageJsonDepsProvider;
 use crate::util::sync::AtomicFlag;
--- a/cli/npm/registry.rs
+++ b/cli/npm/registry.rs
@@ -8,20 +8,20 @@ use std::path::PathBuf;
 use std::sync::Arc;
 
 use async_trait::async_trait;
-use deno_core::anyhow::anyhow;
-use deno_core::anyhow::Context;
-use deno_core::error::custom_error;
-use deno_core::error::AnyError;
-use deno_core::futures::future::BoxFuture;
-use deno_core::futures::future::Shared;
-use deno_core::futures::FutureExt;
-use deno_core::parking_lot::Mutex;
-use deno_core::serde_json;
-use deno_core::url::Url;
-use deno_core::TaskQueue;
-use deno_npm::registry::NpmPackageInfo;
-use deno_npm::registry::NpmRegistryApi;
-use deno_npm::registry::NpmRegistryPackageInfoLoadError;
+use ::deno_core::anyhow::anyhow;
+use ::deno_core::anyhow::Context;
+use ::deno_core::error::custom_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::futures::future::BoxFuture;
+use ::deno_core::futures::future::Shared;
+use ::deno_core::futures::FutureExt;
+use ::deno_core::parking_lot::Mutex;
+use ::deno_core::serde_json;
+use ::deno_core::url::Url;
+use ::deno_core::TaskQueue;
+use ::deno_npm::registry::NpmPackageInfo;
+use ::deno_npm::registry::NpmRegistryApi;
+use ::deno_npm::registry::NpmRegistryPackageInfoLoadError;
 use once_cell::sync::Lazy;
 
 use crate::args::CacheSetting;
--- a/cli/npm/resolution.rs
+++ b/cli/npm/resolution.rs
@@ -3,31 +3,31 @@
 use std::collections::HashSet;
 use std::sync::Arc;
 
-use deno_core::error::AnyError;
-use deno_core::parking_lot::Mutex;
-use deno_core::parking_lot::RwLock;
-use deno_core::TaskQueue;
-use deno_lockfile::NpmPackageDependencyLockfileInfo;
-use deno_lockfile::NpmPackageLockfileInfo;
-use deno_npm::registry::NpmPackageInfo;
-use deno_npm::resolution::NpmPackageVersionResolutionError;
-use deno_npm::resolution::NpmPackagesPartitioned;
-use deno_npm::resolution::NpmResolutionError;
-use deno_npm::resolution::NpmResolutionSnapshot;
-use deno_npm::resolution::NpmResolutionSnapshotCreateOptions;
-use deno_npm::resolution::PackageNotFoundFromReferrerError;
-use deno_npm::resolution::PackageNvNotFoundError;
-use deno_npm::resolution::PackageReqNotFoundError;
-use deno_npm::resolution::ValidSerializedNpmResolutionSnapshot;
-use deno_npm::NpmPackageCacheFolderId;
-use deno_npm::NpmPackageId;
-use deno_npm::NpmResolutionPackage;
-use deno_npm::NpmSystemInfo;
-use deno_semver::npm::NpmPackageNv;
-use deno_semver::npm::NpmPackageNvReference;
-use deno_semver::npm::NpmPackageReq;
-use deno_semver::npm::NpmPackageReqReference;
-use deno_semver::VersionReq;
+use ::deno_core::error::AnyError;
+use ::deno_core::parking_lot::Mutex;
+use ::deno_core::parking_lot::RwLock;
+use ::deno_core::TaskQueue;
+use ::deno_lockfile::NpmPackageDependencyLockfileInfo;
+use ::deno_lockfile::NpmPackageLockfileInfo;
+use ::deno_npm::registry::NpmPackageInfo;
+use ::deno_npm::resolution::NpmPackageVersionResolutionError;
+use ::deno_npm::resolution::NpmPackagesPartitioned;
+use ::deno_npm::resolution::NpmResolutionError;
+use ::deno_npm::resolution::NpmResolutionSnapshot;
+use ::deno_npm::resolution::NpmResolutionSnapshotCreateOptions;
+use ::deno_npm::resolution::PackageNotFoundFromReferrerError;
+use ::deno_npm::resolution::PackageNvNotFoundError;
+use ::deno_npm::resolution::PackageReqNotFoundError;
+use ::deno_npm::resolution::ValidSerializedNpmResolutionSnapshot;
+use ::deno_npm::NpmPackageCacheFolderId;
+use ::deno_npm::NpmPackageId;
+use ::deno_npm::NpmResolutionPackage;
+use ::deno_npm::NpmSystemInfo;
+use ::deno_semver::npm::NpmPackageNv;
+use ::deno_semver::npm::NpmPackageNvReference;
+use ::deno_semver::npm::NpmPackageReq;
+use ::deno_semver::npm::NpmPackageReqReference;
+use ::deno_semver::VersionReq;
 
 use crate::args::Lockfile;
 
--- a/cli/npm/resolvers/common.rs
+++ b/cli/npm/resolvers/common.rs
@@ -8,16 +8,16 @@ use std::sync::Arc;
 use std::sync::Mutex;
 
 use async_trait::async_trait;
-use deno_ast::ModuleSpecifier;
-use deno_core::error::AnyError;
-use deno_core::futures;
-use deno_core::task::spawn;
-use deno_core::url::Url;
-use deno_npm::NpmPackageId;
-use deno_npm::NpmResolutionPackage;
-use deno_runtime::deno_fs::FileSystem;
-use deno_runtime::deno_node::NodePermissions;
-use deno_runtime::deno_node::NodeResolutionMode;
+use ::deno_ast::ModuleSpecifier;
+use ::deno_core::error::AnyError;
+use ::deno_core::futures;
+use ::deno_core::task::spawn;
+use ::deno_core::url::Url;
+use ::deno_npm::NpmPackageId;
+use ::deno_npm::NpmResolutionPackage;
+use ::deno_runtime::deno_fs::FileSystem;
+use ::deno_runtime::deno_node::NodePermissions;
+use ::deno_runtime::deno_node::NodeResolutionMode;
 
 use crate::npm::cache::should_sync_download;
 use crate::npm::NpmCache;
--- a/cli/npm/resolvers/global.rs
+++ b/cli/npm/resolvers/global.rs
@@ -7,17 +7,17 @@ use std::path::PathBuf;
 use std::sync::Arc;
 
 use async_trait::async_trait;
-use deno_ast::ModuleSpecifier;
-use deno_core::error::AnyError;
-use deno_core::url::Url;
-use deno_npm::resolution::PackageNotFoundFromReferrerError;
-use deno_npm::NpmPackageCacheFolderId;
-use deno_npm::NpmPackageId;
-use deno_npm::NpmResolutionPackage;
-use deno_npm::NpmSystemInfo;
-use deno_runtime::deno_fs::FileSystem;
-use deno_runtime::deno_node::NodePermissions;
-use deno_runtime::deno_node::NodeResolutionMode;
+use ::deno_ast::ModuleSpecifier;
+use ::deno_core::error::AnyError;
+use ::deno_core::url::Url;
+use ::deno_npm::resolution::PackageNotFoundFromReferrerError;
+use ::deno_npm::NpmPackageCacheFolderId;
+use ::deno_npm::NpmPackageId;
+use ::deno_npm::NpmResolutionPackage;
+use ::deno_npm::NpmSystemInfo;
+use ::deno_runtime::deno_fs::FileSystem;
+use ::deno_runtime::deno_node::NodePermissions;
+use ::deno_runtime::deno_node::NodeResolutionMode;
 
 use crate::npm::resolution::NpmResolution;
 use crate::npm::resolvers::common::cache_packages;
--- a/cli/npm/resolvers/local.rs
+++ b/cli/npm/resolvers/local.rs
@@ -16,23 +16,23 @@ use crate::util::fs::LaxSingleProcessFsFlag;
 use crate::util::progress_bar::ProgressBar;
 use crate::util::progress_bar::ProgressMessagePrompt;
 use async_trait::async_trait;
-use deno_ast::ModuleSpecifier;
-use deno_core::anyhow::bail;
-use deno_core::anyhow::Context;
-use deno_core::error::AnyError;
-use deno_core::task::spawn;
-use deno_core::task::JoinHandle;
-use deno_core::url::Url;
-use deno_npm::resolution::NpmResolutionSnapshot;
-use deno_npm::NpmPackageCacheFolderId;
-use deno_npm::NpmPackageId;
-use deno_npm::NpmResolutionPackage;
-use deno_npm::NpmSystemInfo;
-use deno_runtime::deno_core::futures;
-use deno_runtime::deno_fs;
-use deno_runtime::deno_node::NodePermissions;
-use deno_runtime::deno_node::NodeResolutionMode;
-use deno_runtime::deno_node::PackageJson;
+use ::deno_ast::ModuleSpecifier;
+use ::deno_core::anyhow::bail;
+use ::deno_core::anyhow::Context;
+use ::deno_core::error::AnyError;
+use ::deno_core::task::spawn;
+use ::deno_core::task::JoinHandle;
+use ::deno_core::url::Url;
+use ::deno_npm::resolution::NpmResolutionSnapshot;
+use ::deno_npm::NpmPackageCacheFolderId;
+use ::deno_npm::NpmPackageId;
+use ::deno_npm::NpmResolutionPackage;
+use ::deno_npm::NpmSystemInfo;
+use ::deno_runtime::deno_core::futures;
+use ::deno_runtime::deno_fs;
+use ::deno_runtime::deno_node::NodePermissions;
+use ::deno_runtime::deno_node::NodeResolutionMode;
+use ::deno_runtime::deno_node::PackageJson;
 
 use crate::npm::cache::mixed_case_package_name_encode;
 use crate::npm::cache::should_sync_download;
--- a/cli/npm/resolvers/mod.rs
+++ b/cli/npm/resolvers/mod.rs
@@ -8,26 +8,26 @@ use std::path::Path;
 use std::path::PathBuf;
 use std::sync::Arc;
 
-use deno_ast::ModuleSpecifier;
-use deno_core::anyhow::bail;
-use deno_core::error::AnyError;
-use deno_core::parking_lot::Mutex;
-use deno_core::serde_json;
-use deno_core::url::Url;
-use deno_npm::resolution::NpmResolutionSnapshot;
-use deno_npm::resolution::PackageReqNotFoundError;
-use deno_npm::resolution::SerializedNpmResolutionSnapshot;
-use deno_npm::NpmPackageId;
-use deno_npm::NpmSystemInfo;
-use deno_runtime::deno_fs::FileSystem;
-use deno_runtime::deno_node::NodePermissions;
-use deno_runtime::deno_node::NodeResolutionMode;
-use deno_runtime::deno_node::NpmResolver;
-use deno_runtime::deno_node::PathClean;
-use deno_semver::npm::NpmPackageNv;
-use deno_semver::npm::NpmPackageNvReference;
-use deno_semver::npm::NpmPackageReq;
-use deno_semver::npm::NpmPackageReqReference;
+use ::deno_ast::ModuleSpecifier;
+use ::deno_core::anyhow::bail;
+use ::deno_core::error::AnyError;
+use ::deno_core::parking_lot::Mutex;
+use ::deno_core::serde_json;
+use ::deno_core::url::Url;
+use ::deno_npm::resolution::NpmResolutionSnapshot;
+use ::deno_npm::resolution::PackageReqNotFoundError;
+use ::deno_npm::resolution::SerializedNpmResolutionSnapshot;
+use ::deno_npm::NpmPackageId;
+use ::deno_npm::NpmSystemInfo;
+use ::deno_runtime::deno_fs::FileSystem;
+use ::deno_runtime::deno_node::NodePermissions;
+use ::deno_runtime::deno_node::NodeResolutionMode;
+use ::deno_runtime::deno_node::NpmResolver;
+use ::deno_runtime::deno_node::PathClean;
+use ::deno_semver::npm::NpmPackageNv;
+use ::deno_semver::npm::NpmPackageNvReference;
+use ::deno_semver::npm::NpmPackageReq;
+use ::deno_semver::npm::NpmPackageReqReference;
 use global::GlobalNpmPackageResolver;
 use serde::Deserialize;
 use serde::Serialize;
--- a/cli/npm/tarball.rs
+++ b/cli/npm/tarball.rs
@@ -5,10 +5,10 @@ use std::fs;
 use std::path::Path;
 use std::path::PathBuf;
 
-use deno_core::anyhow::bail;
-use deno_core::error::AnyError;
-use deno_npm::registry::NpmPackageVersionDistInfo;
-use deno_semver::npm::NpmPackageNv;
+use ::deno_core::anyhow::bail;
+use ::deno_core::error::AnyError;
+use ::deno_npm::registry::NpmPackageVersionDistInfo;
+use ::deno_semver::npm::NpmPackageNv;
 use flate2::read::GzDecoder;
 use tar::Archive;
 use tar::EntryType;
@@ -134,7 +134,7 @@ fn extract_tarball(data: &[u8], output_folder: &Path) -> Result<(), AnyError> {
 
 #[cfg(test)]
 mod test {
-  use deno_semver::Version;
+  use ::deno_semver::Version;
 
   use super::*;
 
--- a/cli/ops/bench.rs
+++ b/cli/ops/bench.rs
@@ -4,16 +4,16 @@ use std::sync::atomic::AtomicUsize;
 use std::sync::atomic::Ordering;
 use std::time;
 
-use deno_core::error::generic_error;
-use deno_core::error::AnyError;
-use deno_core::op;
-use deno_core::serde_v8;
-use deno_core::v8;
-use deno_core::ModuleSpecifier;
-use deno_core::OpState;
-use deno_runtime::permissions::create_child_permissions;
-use deno_runtime::permissions::ChildPermissionsArg;
-use deno_runtime::permissions::PermissionsContainer;
+use ::deno_core::error::generic_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::op;
+use ::deno_core::serde_v8;
+use ::deno_core::v8;
+use ::deno_core::ModuleSpecifier;
+use ::deno_core::OpState;
+use ::deno_runtime::permissions::create_child_permissions;
+use ::deno_runtime::permissions::ChildPermissionsArg;
+use ::deno_runtime::permissions::PermissionsContainer;
 use serde::Deserialize;
 use serde::Serialize;
 use tokio::sync::mpsc::UnboundedSender;
--- a/cli/ops/mod.rs
+++ b/cli/ops/mod.rs
@@ -3,10 +3,10 @@
 use std::sync::Arc;
 
 use crate::npm::CliNpmResolver;
-use deno_core::error::AnyError;
-use deno_core::op;
-use deno_core::Extension;
-use deno_core::OpState;
+use ::deno_core::error::AnyError;
+use ::deno_core::op;
+use ::deno_core::Extension;
+use ::deno_core::OpState;
 
 pub mod bench;
 pub mod testing;
--- a/cli/ops/testing.rs
+++ b/cli/ops/testing.rs
@@ -6,16 +6,16 @@ use crate::tools::test::TestEventSender;
 use crate::tools::test::TestLocation;
 use crate::tools::test::TestStepDescription;
 
-use deno_core::error::generic_error;
-use deno_core::error::AnyError;
-use deno_core::op;
-use deno_core::serde_v8;
-use deno_core::v8;
-use deno_core::ModuleSpecifier;
-use deno_core::OpState;
-use deno_runtime::permissions::create_child_permissions;
-use deno_runtime::permissions::ChildPermissionsArg;
-use deno_runtime::permissions::PermissionsContainer;
+use ::deno_core::error::generic_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::op;
+use ::deno_core::serde_v8;
+use ::deno_core::v8;
+use ::deno_core::ModuleSpecifier;
+use ::deno_core::OpState;
+use ::deno_runtime::permissions::create_child_permissions;
+use ::deno_runtime::permissions::ChildPermissionsArg;
+use ::deno_runtime::permissions::PermissionsContainer;
 use serde::Deserialize;
 use serde::Deserializer;
 use serde::Serialize;
--- a/cli/resolver.rs
+++ b/cli/resolver.rs
@@ -1,20 +1,20 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_core::anyhow::anyhow;
-use deno_core::error::AnyError;
-use deno_core::futures::future;
-use deno_core::futures::future::LocalBoxFuture;
-use deno_core::futures::FutureExt;
-use deno_core::ModuleSpecifier;
-use deno_core::TaskQueue;
-use deno_graph::source::NpmPackageReqResolution;
-use deno_graph::source::NpmResolver;
-use deno_graph::source::Resolver;
-use deno_graph::source::UnknownBuiltInNodeModuleError;
-use deno_graph::source::DEFAULT_JSX_IMPORT_SOURCE_MODULE;
-use deno_npm::registry::NpmRegistryApi;
-use deno_runtime::deno_node::is_builtin_node_module;
-use deno_semver::npm::NpmPackageReq;
+use ::deno_core::anyhow::anyhow;
+use ::deno_core::error::AnyError;
+use ::deno_core::futures::future;
+use ::deno_core::futures::future::LocalBoxFuture;
+use ::deno_core::futures::FutureExt;
+use ::deno_core::ModuleSpecifier;
+use ::deno_core::TaskQueue;
+use ::deno_graph::source::NpmPackageReqResolution;
+use ::deno_graph::source::NpmResolver;
+use ::deno_graph::source::Resolver;
+use ::deno_graph::source::UnknownBuiltInNodeModuleError;
+use ::deno_graph::source::DEFAULT_JSX_IMPORT_SOURCE_MODULE;
+use ::deno_npm::registry::NpmRegistryApi;
+use ::deno_runtime::deno_node::is_builtin_node_module;
+use ::deno_semver::npm::NpmPackageReq;
 use import_map::ImportMap;
 use std::sync::Arc;
 
--- a/cli/standalone/binary.rs
+++ b/cli/standalone/binary.rs
@@ -9,19 +9,19 @@ use std::io::Write;
 use std::path::Path;
 use std::path::PathBuf;
 
-use deno_ast::ModuleSpecifier;
-use deno_core::anyhow::Context;
-use deno_core::error::AnyError;
-use deno_core::futures::io::AllowStdIo;
-use deno_core::futures::AsyncReadExt;
-use deno_core::futures::AsyncSeekExt;
-use deno_core::serde_json;
-use deno_core::url::Url;
-use deno_npm::registry::PackageDepNpmSchemeValueParseError;
-use deno_npm::NpmSystemInfo;
-use deno_runtime::permissions::PermissionsOptions;
-use deno_semver::npm::NpmPackageReq;
-use deno_semver::npm::NpmVersionReqSpecifierParseError;
+use ::deno_ast::ModuleSpecifier;
+use ::deno_core::anyhow::Context;
+use ::deno_core::error::AnyError;
+use ::deno_core::futures::io::AllowStdIo;
+use ::deno_core::futures::AsyncReadExt;
+use ::deno_core::futures::AsyncSeekExt;
+use ::deno_core::serde_json;
+use ::deno_core::url::Url;
+use ::deno_npm::registry::PackageDepNpmSchemeValueParseError;
+use ::deno_npm::NpmSystemInfo;
+use ::deno_runtime::permissions::PermissionsOptions;
+use ::deno_semver::npm::NpmPackageReq;
+use ::deno_semver::npm::NpmVersionReqSpecifierParseError;
 use log::Level;
 use serde::Deserialize;
 use serde::Serialize;
--- a/cli/standalone/file_system.rs
+++ b/cli/standalone/file_system.rs
@@ -5,15 +5,15 @@ use std::path::PathBuf;
 use std::rc::Rc;
 use std::sync::Arc;
 
-use deno_runtime::deno_fs::FileSystem;
-use deno_runtime::deno_fs::FsDirEntry;
-use deno_runtime::deno_fs::FsFileType;
-use deno_runtime::deno_fs::OpenOptions;
-use deno_runtime::deno_fs::RealFs;
-use deno_runtime::deno_io::fs::File;
-use deno_runtime::deno_io::fs::FsError;
-use deno_runtime::deno_io::fs::FsResult;
-use deno_runtime::deno_io::fs::FsStat;
+use ::deno_runtime::deno_fs::FileSystem;
+use ::deno_runtime::deno_fs::FsDirEntry;
+use ::deno_runtime::deno_fs::FsFileType;
+use ::deno_runtime::deno_fs::OpenOptions;
+use ::deno_runtime::deno_fs::RealFs;
+use ::deno_runtime::deno_io::fs::File;
+use ::deno_runtime::deno_io::fs::FsError;
+use ::deno_runtime::deno_io::fs::FsResult;
+use ::deno_runtime::deno_io::fs::FsStat;
 
 use super::virtual_fs::FileBackedVfs;
 
--- a/cli/standalone/mod.rs
+++ b/cli/standalone/mod.rs
@@ -28,27 +28,27 @@ use crate::worker::CliMainWorkerFactory;
 use crate::worker::CliMainWorkerOptions;
 use crate::worker::HasNodeSpecifierChecker;
 use crate::worker::ModuleLoaderFactory;
-use deno_ast::MediaType;
-use deno_core::anyhow::Context;
-use deno_core::error::type_error;
-use deno_core::error::AnyError;
-use deno_core::futures::FutureExt;
-use deno_core::v8_set_flags;
-use deno_core::ModuleLoader;
-use deno_core::ModuleSpecifier;
-use deno_core::ModuleType;
-use deno_core::ResolutionKind;
-use deno_npm::NpmSystemInfo;
-use deno_runtime::deno_fs;
-use deno_runtime::deno_node::analyze::NodeCodeTranslator;
-use deno_runtime::deno_node::NodeResolver;
-use deno_runtime::deno_tls::rustls::RootCertStore;
-use deno_runtime::deno_tls::RootCertStoreProvider;
-use deno_runtime::deno_web::BlobStore;
-use deno_runtime::permissions::Permissions;
-use deno_runtime::permissions::PermissionsContainer;
-use deno_runtime::WorkerLogLevel;
-use deno_semver::npm::NpmPackageReqReference;
+use ::deno_ast::MediaType;
+use ::deno_core::anyhow::Context;
+use ::deno_core::error::type_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::futures::FutureExt;
+use ::deno_core::v8_set_flags;
+use ::deno_core::ModuleLoader;
+use ::deno_core::ModuleSpecifier;
+use ::deno_core::ModuleType;
+use ::deno_core::ResolutionKind;
+use ::deno_npm::NpmSystemInfo;
+use ::deno_runtime::deno_fs;
+use ::deno_runtime::deno_node::analyze::NodeCodeTranslator;
+use ::deno_runtime::deno_node::NodeResolver;
+use ::deno_runtime::deno_tls::rustls::RootCertStore;
+use ::deno_runtime::deno_tls::RootCertStoreProvider;
+use ::deno_runtime::deno_web::BlobStore;
+use ::deno_runtime::permissions::Permissions;
+use ::deno_runtime::permissions::PermissionsContainer;
+use ::deno_runtime::WorkerLogLevel;
+use ::deno_semver::npm::NpmPackageReqReference;
 use import_map::parse_from_json;
 use std::pin::Pin;
 use std::rc::Rc;
--- a/cli/standalone/virtual_fs.rs
+++ b/cli/standalone/virtual_fs.rs
@@ -12,16 +12,16 @@ use std::path::PathBuf;
 use std::rc::Rc;
 use std::sync::Arc;
 
-use deno_core::anyhow::Context;
-use deno_core::error::AnyError;
-use deno_core::parking_lot::Mutex;
-use deno_core::BufMutView;
-use deno_core::BufView;
-use deno_runtime::deno_fs::FsDirEntry;
-use deno_runtime::deno_io;
-use deno_runtime::deno_io::fs::FsError;
-use deno_runtime::deno_io::fs::FsResult;
-use deno_runtime::deno_io::fs::FsStat;
+use ::deno_core::anyhow::Context;
+use ::deno_core::error::AnyError;
+use ::deno_core::parking_lot::Mutex;
+use ::deno_core::BufMutView;
+use ::deno_core::BufView;
+use ::deno_runtime::deno_fs::FsDirEntry;
+use ::deno_runtime::deno_io;
+use ::deno_runtime::deno_io::fs::FsError;
+use ::deno_runtime::deno_io::fs::FsResult;
+use ::deno_runtime::deno_io::fs::FsStat;
 use serde::Deserialize;
 use serde::Serialize;
 use thiserror::Error;
--- a/cli/tests/integration/bench_tests.rs
+++ b/cli/tests/integration/bench_tests.rs
@@ -1,6 +1,6 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_core::url::Url;
+use ::deno_core::url::Url;
 use test_util as util;
 use util::assert_contains;
 use util::assert_not_contains;
--- a/cli/tests/integration/cert_tests.rs
+++ b/cli/tests/integration/cert_tests.rs
@@ -1,8 +1,8 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_runtime::deno_net::ops_tls::TlsStream;
-use deno_runtime::deno_tls::rustls;
-use deno_runtime::deno_tls::rustls_pemfile;
+use ::deno_runtime::deno_net::ops_tls::TlsStream;
+use ::deno_runtime::deno_tls::rustls;
+use ::deno_runtime::deno_tls::rustls_pemfile;
 use lsp_types::Url;
 use std::io::BufReader;
 use std::io::Cursor;
--- a/cli/tests/integration/inspector_tests.rs
+++ b/cli/tests/integration/inspector_tests.rs
@@ -1,11 +1,11 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_core::anyhow::anyhow;
-use deno_core::error::AnyError;
-use deno_core::serde_json;
-use deno_core::serde_json::json;
-use deno_core::url;
-use deno_runtime::deno_fetch::reqwest;
+use ::deno_core::anyhow::anyhow;
+use ::deno_core::error::AnyError;
+use ::deno_core::serde_json;
+use ::deno_core::serde_json::json;
+use ::deno_core::url;
+use ::deno_runtime::deno_fetch::reqwest;
 use fastwebsockets::FragmentCollector;
 use fastwebsockets::Frame;
 use fastwebsockets::WebSocket;
--- a/cli/tests/integration/lsp_tests.rs
+++ b/cli/tests/integration/lsp_tests.rs
@@ -1,11 +1,11 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_ast::ModuleSpecifier;
-use deno_core::serde::Deserialize;
-use deno_core::serde_json;
-use deno_core::serde_json::json;
-use deno_core::serde_json::Value;
-use deno_core::url::Url;
+use ::deno_ast::ModuleSpecifier;
+use ::deno_core::serde::Deserialize;
+use ::deno_core::serde_json;
+use ::deno_core::serde_json::json;
+use ::deno_core::serde_json::Value;
+use ::deno_core::url::Url;
 use pretty_assertions::assert_eq;
 use std::fs;
 use std::process::Stdio;
--- a/cli/tests/integration/npm_tests.rs
+++ b/cli/tests/integration/npm_tests.rs
@@ -1,8 +1,8 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_core::serde_json;
-use deno_core::serde_json::json;
-use deno_core::serde_json::Value;
+use ::deno_core::serde_json;
+use ::deno_core::serde_json::json;
+use ::deno_core::serde_json::Value;
 use pretty_assertions::assert_eq;
 use std::process::Stdio;
 use test_util as util;
--- a/cli/tests/integration/run_tests.rs
+++ b/cli/tests/integration/run_tests.rs
@@ -1,7 +1,7 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_core::url;
-use deno_runtime::deno_fetch::reqwest;
+use ::deno_core::url;
+use ::deno_runtime::deno_fetch::reqwest;
 use std::io::Read;
 use std::io::Write;
 use std::process::Command;
--- a/cli/tests/integration/test_tests.rs
+++ b/cli/tests/integration/test_tests.rs
@@ -1,6 +1,6 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_core::url::Url;
+use ::deno_core::url::Url;
 use test_util as util;
 use util::assert_contains;
 use util::assert_not_contains;
--- a/cli/tests/integration/vendor_tests.rs
+++ b/cli/tests/integration/vendor_tests.rs
@@ -1,7 +1,7 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_core::serde_json;
-use deno_core::serde_json::json;
+use ::deno_core::serde_json;
+use ::deno_core::serde_json::json;
 use pretty_assertions::assert_eq;
 use std::fmt::Write as _;
 use std::path::PathBuf;
--- a/cli/tools/bench.rs
+++ b/cli/tools/bench.rs
@@ -19,21 +19,21 @@ use crate::util::path::is_supported_ext;
 use crate::version::get_user_agent;
 use crate::worker::CliMainWorkerFactory;
 
-use deno_core::error::generic_error;
-use deno_core::error::AnyError;
-use deno_core::error::JsError;
-use deno_core::futures::future;
-use deno_core::futures::stream;
-use deno_core::futures::StreamExt;
-use deno_core::located_script_name;
-use deno_core::serde_v8;
-use deno_core::task::spawn;
-use deno_core::task::spawn_blocking;
-use deno_core::v8;
-use deno_core::ModuleSpecifier;
-use deno_runtime::permissions::Permissions;
-use deno_runtime::permissions::PermissionsContainer;
-use deno_runtime::tokio_util::create_and_run_current_thread;
+use ::deno_core::error::generic_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::error::JsError;
+use ::deno_core::futures::future;
+use ::deno_core::futures::stream;
+use ::deno_core::futures::StreamExt;
+use ::deno_core::located_script_name;
+use ::deno_core::serde_v8;
+use ::deno_core::task::spawn;
+use ::deno_core::task::spawn_blocking;
+use ::deno_core::v8;
+use ::deno_core::ModuleSpecifier;
+use ::deno_runtime::permissions::Permissions;
+use ::deno_runtime::permissions::PermissionsContainer;
+use ::deno_runtime::tokio_util::create_and_run_current_thread;
 use indexmap::IndexMap;
 use indexmap::IndexSet;
 use log::Level;
--- a/cli/tools/bundle.rs
+++ b/cli/tools/bundle.rs
@@ -2,9 +2,9 @@
 
 use std::path::PathBuf;
 
-use deno_core::error::AnyError;
-use deno_graph::Module;
-use deno_runtime::colors;
+use ::deno_core::error::AnyError;
+use ::deno_graph::Module;
+use ::deno_runtime::colors;
 
 use crate::args::BundleFlags;
 use crate::args::CliOptions;
--- a/cli/tools/check.rs
+++ b/cli/tools/check.rs
@@ -3,13 +3,13 @@
 use std::collections::HashSet;
 use std::sync::Arc;
 
-use deno_ast::MediaType;
-use deno_ast::ModuleSpecifier;
-use deno_core::error::AnyError;
-use deno_graph::Module;
-use deno_graph::ModuleGraph;
-use deno_runtime::colors;
-use deno_runtime::deno_node::NodeResolver;
+use ::deno_ast::MediaType;
+use ::deno_ast::ModuleSpecifier;
+use ::deno_core::error::AnyError;
+use ::deno_graph::Module;
+use ::deno_graph::ModuleGraph;
+use ::deno_runtime::colors;
+use ::deno_runtime::deno_node::NodeResolver;
 use once_cell::sync::Lazy;
 use regex::Regex;
 
@@ -442,7 +442,7 @@ fn get_leading_comments(file_text: &str) -> Vec<String> {
 
 #[cfg(test)]
 mod test {
-  use deno_ast::MediaType;
+  use ::deno_ast::MediaType;
 
   use super::get_leading_comments;
   use super::has_ts_check;
--- a/cli/tools/compile.rs
+++ b/cli/tools/compile.rs
@@ -5,13 +5,13 @@ use crate::args::Flags;
 use crate::factory::CliFactory;
 use crate::standalone::is_standalone_binary;
 use crate::util::path::path_has_trailing_slash;
-use deno_core::anyhow::bail;
-use deno_core::anyhow::Context;
-use deno_core::error::generic_error;
-use deno_core::error::AnyError;
-use deno_core::resolve_url_or_path;
-use deno_graph::GraphKind;
-use deno_runtime::colors;
+use ::deno_core::anyhow::bail;
+use ::deno_core::anyhow::Context;
+use ::deno_core::error::generic_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::resolve_url_or_path;
+use ::deno_graph::GraphKind;
+use ::deno_runtime::colors;
 use std::path::Path;
 use std::path::PathBuf;
 use std::sync::Arc;
--- a/cli/tools/coverage/mod.rs
+++ b/cli/tools/coverage/mod.rs
@@ -10,17 +10,17 @@ use crate::tools::test::is_supported_test_path;
 use crate::util::fs::FileCollector;
 use crate::util::text_encoding::source_map_from_code;
 
-use deno_ast::MediaType;
-use deno_ast::ModuleSpecifier;
-use deno_core::anyhow::anyhow;
-use deno_core::anyhow::Context;
-use deno_core::error::generic_error;
-use deno_core::error::AnyError;
-use deno_core::serde_json;
-use deno_core::sourcemap::SourceMap;
-use deno_core::url::Url;
-use deno_core::LocalInspectorSession;
-use deno_core::ModuleCode;
+use ::deno_ast::MediaType;
+use ::deno_ast::ModuleSpecifier;
+use ::deno_core::anyhow::anyhow;
+use ::deno_core::anyhow::Context;
+use ::deno_core::error::generic_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::serde_json;
+use ::deno_core::sourcemap::SourceMap;
+use ::deno_core::url::Url;
+use ::deno_core::LocalInspectorSession;
+use ::deno_core::ModuleCode;
 use regex::Regex;
 use std::fs;
 use std::fs::File;
--- a/cli/tools/doc.rs
+++ b/cli/tools/doc.rs
@@ -10,14 +10,14 @@ use crate::factory::CliFactory;
 use crate::file_fetcher::File;
 use crate::graph_util::graph_lock_or_exit;
 use crate::tsc::get_types_declaration_file_text;
-use deno_ast::MediaType;
-use deno_core::anyhow::bail;
-use deno_core::error::AnyError;
-use deno_core::resolve_path;
-use deno_core::resolve_url_or_path;
-use deno_doc as doc;
-use deno_graph::GraphKind;
-use deno_graph::ModuleSpecifier;
+use ::deno_ast::MediaType;
+use ::deno_core::anyhow::bail;
+use ::deno_core::error::AnyError;
+use ::deno_core::resolve_path;
+use ::deno_core::resolve_url_or_path;
+use ::deno_doc as doc;
+use ::deno_graph::GraphKind;
+use ::deno_graph::ModuleSpecifier;
 use std::path::PathBuf;
 
 pub async fn print_docs(
--- a/cli/tools/fmt.rs
+++ b/cli/tools/fmt.rs
@@ -21,15 +21,15 @@ use crate::util::file_watcher;
 use crate::util::fs::FileCollector;
 use crate::util::path::get_extension;
 use crate::util::text_encoding;
-use deno_ast::ParsedSource;
-use deno_core::anyhow::anyhow;
-use deno_core::anyhow::bail;
-use deno_core::anyhow::Context;
-use deno_core::error::generic_error;
-use deno_core::error::AnyError;
-use deno_core::futures;
-use deno_core::parking_lot::Mutex;
-use deno_core::task::spawn_blocking;
+use ::deno_ast::ParsedSource;
+use ::deno_core::anyhow::anyhow;
+use ::deno_core::anyhow::bail;
+use ::deno_core::anyhow::Context;
+use ::deno_core::error::generic_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::futures;
+use ::deno_core::parking_lot::Mutex;
+use ::deno_core::task::spawn_blocking;
 use log::debug;
 use log::info;
 use log::warn;
--- a/cli/tools/info.rs
+++ b/cli/tools/info.rs
@@ -5,25 +5,25 @@ use std::collections::HashSet;
 use std::fmt;
 use std::fmt::Write;
 
-use deno_ast::ModuleSpecifier;
-use deno_core::error::AnyError;
-use deno_core::resolve_url_or_path;
-use deno_core::serde_json;
-use deno_core::serde_json::json;
-use deno_graph::Dependency;
-use deno_graph::GraphKind;
-use deno_graph::Module;
-use deno_graph::ModuleError;
-use deno_graph::ModuleGraph;
-use deno_graph::ModuleGraphError;
-use deno_graph::Resolution;
-use deno_npm::resolution::NpmResolutionSnapshot;
-use deno_npm::NpmPackageId;
-use deno_npm::NpmResolutionPackage;
-use deno_runtime::colors;
-use deno_semver::npm::NpmPackageNv;
-use deno_semver::npm::NpmPackageNvReference;
-use deno_semver::npm::NpmPackageReqReference;
+use ::deno_ast::ModuleSpecifier;
+use ::deno_core::error::AnyError;
+use ::deno_core::resolve_url_or_path;
+use ::deno_core::serde_json;
+use ::deno_core::serde_json::json;
+use ::deno_graph::Dependency;
+use ::deno_graph::GraphKind;
+use ::deno_graph::Module;
+use ::deno_graph::ModuleError;
+use ::deno_graph::ModuleGraph;
+use ::deno_graph::ModuleGraphError;
+use ::deno_graph::Resolution;
+use ::deno_npm::resolution::NpmResolutionSnapshot;
+use ::deno_npm::NpmPackageId;
+use ::deno_npm::NpmResolutionPackage;
+use ::deno_runtime::colors;
+use ::deno_semver::npm::NpmPackageNv;
+use ::deno_semver::npm::NpmPackageNvReference;
+use ::deno_semver::npm::NpmPackageReqReference;
 
 use crate::args::Flags;
 use crate::args::InfoFlags;
--- a/cli/tools/init/mod.rs
+++ b/cli/tools/init/mod.rs
@@ -3,8 +3,8 @@
 use crate::args::InitFlags;
 use crate::colors;
 use crate::deno_std;
-use deno_core::anyhow::Context;
-use deno_core::error::AnyError;
+use ::deno_core::anyhow::Context;
+use ::deno_core::error::AnyError;
 use log::info;
 use std::io::Write;
 use std::path::Path;
--- a/cli/tools/installer.rs
+++ b/cli/tools/installer.rs
@@ -10,12 +10,12 @@ use crate::factory::CliFactory;
 use crate::http_util::HttpClient;
 use crate::util::fs::canonicalize_path_maybe_not_exists;
 
-use deno_core::anyhow::Context;
-use deno_core::error::generic_error;
-use deno_core::error::AnyError;
-use deno_core::resolve_url_or_path;
-use deno_core::url::Url;
-use deno_semver::npm::NpmPackageReqReference;
+use ::deno_core::anyhow::Context;
+use ::deno_core::error::generic_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::resolve_url_or_path;
+use ::deno_core::url::Url;
+use ::deno_semver::npm::NpmPackageReqReference;
 use log::Level;
 use once_cell::sync::Lazy;
 use regex::Regex;
--- a/cli/tools/lint.rs
+++ b/cli/tools/lint.rs
@@ -15,18 +15,18 @@ use crate::util::file_watcher;
 use crate::util::fs::FileCollector;
 use crate::util::path::is_supported_ext;
 use crate::util::sync::AtomicFlag;
-use deno_ast::MediaType;
-use deno_core::anyhow::bail;
-use deno_core::error::generic_error;
-use deno_core::error::AnyError;
-use deno_core::error::JsStackFrame;
-use deno_core::serde_json;
-use deno_lint::diagnostic::LintDiagnostic;
-use deno_lint::linter::Linter;
-use deno_lint::linter::LinterBuilder;
-use deno_lint::rules;
-use deno_lint::rules::LintRule;
-use deno_runtime::fmt_errors::format_location;
+use ::deno_ast::MediaType;
+use ::deno_core::anyhow::bail;
+use ::deno_core::error::generic_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::error::JsStackFrame;
+use ::deno_core::serde_json;
+use ::deno_lint::diagnostic::LintDiagnostic;
+use ::deno_lint::linter::Linter;
+use ::deno_lint::linter::LinterBuilder;
+use ::deno_lint::rules;
+use ::deno_lint::rules::LintRule;
+use ::deno_runtime::fmt_errors::format_location;
 use log::debug;
 use log::info;
 use serde::Serialize;
@@ -554,7 +554,7 @@ pub fn get_configured_rules(
 
 #[cfg(test)]
 mod test {
-  use deno_lint::rules::get_recommended_rules;
+  use ::deno_lint::rules::get_recommended_rules;
 
   use super::*;
   use crate::args::LintRulesConfig;
--- a/cli/tools/repl/cdp.rs
+++ b/cli/tools/repl/cdp.rs
@@ -1,8 +1,8 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
 /// <https://chromedevtools.github.io/devtools-protocol/tot/>
-use deno_core::serde_json;
-use deno_core::serde_json::Value;
+use ::deno_core::serde_json;
+use ::deno_core::serde_json::Value;
 use serde::Deserialize;
 use serde::Deserializer;
 use serde::Serialize;
--- a/cli/tools/repl/channel.rs
+++ b/cli/tools/repl/channel.rs
@@ -1,9 +1,9 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_core::anyhow::anyhow;
-use deno_core::error::AnyError;
-use deno_core::serde_json;
-use deno_core::serde_json::Value;
+use ::deno_core::anyhow::anyhow;
+use ::deno_core::error::AnyError;
+use ::deno_core::serde_json;
+use ::deno_core::serde_json::Value;
 use std::cell::RefCell;
 use tokio::sync::mpsc::channel;
 use tokio::sync::mpsc::unbounded_channel;
--- a/cli/tools/repl/editor.rs
+++ b/cli/tools/repl/editor.rs
@@ -1,15 +1,15 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
 use crate::colors;
-use deno_ast::swc::parser::error::SyntaxError;
-use deno_ast::swc::parser::token::BinOpToken;
-use deno_ast::swc::parser::token::Token;
-use deno_ast::swc::parser::token::Word;
-use deno_ast::view::AssignOp;
-use deno_core::anyhow::Context as _;
-use deno_core::error::AnyError;
-use deno_core::parking_lot::Mutex;
-use deno_core::serde_json;
+use ::deno_ast::swc::parser::error::SyntaxError;
+use ::deno_ast::swc::parser::token::BinOpToken;
+use ::deno_ast::swc::parser::token::Token;
+use ::deno_ast::swc::parser::token::Word;
+use ::deno_ast::view::AssignOp;
+use ::deno_core::anyhow::Context as _;
+use ::deno_core::error::AnyError;
+use ::deno_core::parking_lot::Mutex;
+use ::deno_core::serde_json;
 use rustyline::completion::Completer;
 use rustyline::error::ReadlineError;
 use rustyline::highlight::Highlighter;
--- a/cli/tools/repl/mod.rs
+++ b/cli/tools/repl/mod.rs
@@ -6,11 +6,11 @@ use crate::args::ReplFlags;
 use crate::colors;
 use crate::factory::CliFactory;
 use crate::file_fetcher::FileFetcher;
-use deno_core::error::AnyError;
-use deno_core::futures::StreamExt;
-use deno_core::task::spawn_blocking;
-use deno_runtime::permissions::Permissions;
-use deno_runtime::permissions::PermissionsContainer;
+use ::deno_core::error::AnyError;
+use ::deno_core::futures::StreamExt;
+use ::deno_core::task::spawn_blocking;
+use ::deno_runtime::permissions::Permissions;
+use ::deno_runtime::permissions::PermissionsContainer;
 use rustyline::error::ReadlineError;
 
 mod cdp;
--- a/cli/tools/repl/session.rs
+++ b/cli/tools/repl/session.rs
@@ -10,24 +10,24 @@ use crate::lsp::ReplLanguageServer;
 use crate::npm::CliNpmResolver;
 use crate::resolver::CliGraphResolver;
 
-use deno_ast::swc::ast as swc_ast;
-use deno_ast::swc::visit::noop_visit_type;
-use deno_ast::swc::visit::Visit;
-use deno_ast::swc::visit::VisitWith;
-use deno_ast::DiagnosticsError;
-use deno_ast::ImportsNotUsedAsValues;
-use deno_ast::ModuleSpecifier;
-use deno_core::error::AnyError;
-use deno_core::futures::channel::mpsc::UnboundedReceiver;
-use deno_core::futures::FutureExt;
-use deno_core::futures::StreamExt;
-use deno_core::serde_json;
-use deno_core::serde_json::Value;
-use deno_core::LocalInspectorSession;
-use deno_graph::source::Resolver;
-use deno_runtime::deno_node;
-use deno_runtime::worker::MainWorker;
-use deno_semver::npm::NpmPackageReqReference;
+use ::deno_ast::swc::ast as swc_ast;
+use ::deno_ast::swc::visit::noop_visit_type;
+use ::deno_ast::swc::visit::Visit;
+use ::deno_ast::swc::visit::VisitWith;
+use ::deno_ast::DiagnosticsError;
+use ::deno_ast::ImportsNotUsedAsValues;
+use ::deno_ast::ModuleSpecifier;
+use ::deno_core::error::AnyError;
+use ::deno_core::futures::channel::mpsc::UnboundedReceiver;
+use ::deno_core::futures::FutureExt;
+use ::deno_core::futures::StreamExt;
+use ::deno_core::serde_json;
+use ::deno_core::serde_json::Value;
+use ::deno_core::LocalInspectorSession;
+use ::deno_graph::source::Resolver;
+use ::deno_runtime::deno_node;
+use ::deno_runtime::worker::MainWorker;
+use ::deno_semver::npm::NpmPackageReqReference;
 use once_cell::sync::Lazy;
 
 use super::cdp;
@@ -596,7 +596,7 @@ impl Visit for ImportCollector {
   }
 
   fn visit_module_decl(&mut self, module_decl: &swc_ast::ModuleDecl) {
-    use deno_ast::swc::ast::*;
+    use ::deno_ast::swc::ast::*;
 
     match module_decl {
       ModuleDecl::Import(import_decl) => {
--- a/cli/tools/run.rs
+++ b/cli/tools/run.rs
@@ -2,10 +2,10 @@
 
 use std::io::Read;
 
-use deno_ast::MediaType;
-use deno_core::error::AnyError;
-use deno_runtime::permissions::Permissions;
-use deno_runtime::permissions::PermissionsContainer;
+use ::deno_ast::MediaType;
+use ::deno_core::error::AnyError;
+use ::deno_runtime::permissions::Permissions;
+use ::deno_runtime::permissions::PermissionsContainer;
 
 use crate::args::EvalFlags;
 use crate::args::Flags;
--- a/cli/tools/task.rs
+++ b/cli/tools/task.rs
@@ -7,16 +7,16 @@ use crate::colors;
 use crate::factory::CliFactory;
 use crate::npm::CliNpmResolver;
 use crate::util::fs::canonicalize_path;
-use deno_core::anyhow::bail;
-use deno_core::anyhow::Context;
-use deno_core::error::AnyError;
-use deno_core::futures;
-use deno_core::futures::future::LocalBoxFuture;
-use deno_runtime::deno_node::NodeResolver;
-use deno_semver::npm::NpmPackageNv;
-use deno_task_shell::ExecuteResult;
-use deno_task_shell::ShellCommand;
-use deno_task_shell::ShellCommandContext;
+use ::deno_core::anyhow::bail;
+use ::deno_core::anyhow::Context;
+use ::deno_core::error::AnyError;
+use ::deno_core::futures;
+use ::deno_core::futures::future::LocalBoxFuture;
+use ::deno_runtime::deno_node::NodeResolver;
+use ::deno_semver::npm::NpmPackageNv;
+use ::deno_task_shell::ExecuteResult;
+use ::deno_task_shell::ShellCommand;
+use ::deno_task_shell::ShellCommandContext;
 use indexmap::IndexMap;
 use std::collections::HashMap;
 use std::path::PathBuf;
--- a/cli/tools/test.rs
+++ b/cli/tools/test.rs
@@ -22,31 +22,31 @@ use crate::util::path::is_supported_ext;
 use crate::util::path::mapped_specifier_for_tsc;
 use crate::worker::CliMainWorkerFactory;
 
-use deno_ast::swc::common::comments::CommentKind;
-use deno_ast::MediaType;
-use deno_ast::SourceRangedForSpanned;
-use deno_core::error::generic_error;
-use deno_core::error::AnyError;
-use deno_core::error::JsError;
-use deno_core::futures::future;
-use deno_core::futures::stream;
-use deno_core::futures::task::noop_waker;
-use deno_core::futures::FutureExt;
-use deno_core::futures::StreamExt;
-use deno_core::located_script_name;
-use deno_core::parking_lot::Mutex;
-use deno_core::serde_v8;
-use deno_core::task::spawn;
-use deno_core::task::spawn_blocking;
-use deno_core::url::Url;
-use deno_core::v8;
-use deno_core::ModuleSpecifier;
-use deno_runtime::deno_io::Stdio;
-use deno_runtime::deno_io::StdioPipe;
-use deno_runtime::fmt_errors::format_js_error;
-use deno_runtime::permissions::Permissions;
-use deno_runtime::permissions::PermissionsContainer;
-use deno_runtime::tokio_util::create_and_run_current_thread;
+use ::deno_ast::swc::common::comments::CommentKind;
+use ::deno_ast::MediaType;
+use ::deno_ast::SourceRangedForSpanned;
+use ::deno_core::error::generic_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::error::JsError;
+use ::deno_core::futures::future;
+use ::deno_core::futures::stream;
+use ::deno_core::futures::task::noop_waker;
+use ::deno_core::futures::FutureExt;
+use ::deno_core::futures::StreamExt;
+use ::deno_core::located_script_name;
+use ::deno_core::parking_lot::Mutex;
+use ::deno_core::serde_v8;
+use ::deno_core::task::spawn;
+use ::deno_core::task::spawn_blocking;
+use ::deno_core::url::Url;
+use ::deno_core::v8;
+use ::deno_core::ModuleSpecifier;
+use ::deno_runtime::deno_io::Stdio;
+use ::deno_runtime::deno_io::StdioPipe;
+use ::deno_runtime::fmt_errors::format_js_error;
+use ::deno_runtime::permissions::Permissions;
+use ::deno_runtime::permissions::PermissionsContainer;
+use ::deno_runtime::tokio_util::create_and_run_current_thread;
 use indexmap::IndexMap;
 use indexmap::IndexSet;
 use log::Level;
--- a/cli/tools/upgrade.rs
+++ b/cli/tools/upgrade.rs
@@ -12,13 +12,13 @@ use crate::util::progress_bar::ProgressBarStyle;
 use crate::util::time;
 use crate::version;
 
-use deno_core::anyhow::bail;
-use deno_core::anyhow::Context;
-use deno_core::error::AnyError;
-use deno_core::futures::future::BoxFuture;
-use deno_core::futures::FutureExt;
-use deno_core::task::spawn;
-use deno_semver::Version;
+use ::deno_core::anyhow::bail;
+use ::deno_core::anyhow::Context;
+use ::deno_core::error::AnyError;
+use ::deno_core::futures::future::BoxFuture;
+use ::deno_core::futures::FutureExt;
+use ::deno_core::task::spawn;
+use ::deno_semver::Version;
 use once_cell::sync::Lazy;
 use std::borrow::Cow;
 use std::env;
@@ -643,7 +643,7 @@ impl CheckVersionFile {
 mod test {
   use std::sync::Arc;
 
-  use deno_core::parking_lot::Mutex;
+  use ::deno_core::parking_lot::Mutex;
 
   use super::*;
 
--- a/cli/tools/vendor/analyze.rs
+++ b/cli/tools/vendor/analyze.rs
@@ -1,14 +1,14 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_ast::swc::ast::ExportDefaultDecl;
-use deno_ast::swc::ast::ExportSpecifier;
-use deno_ast::swc::ast::ModuleExportName;
-use deno_ast::swc::ast::NamedExport;
-use deno_ast::swc::ast::Program;
-use deno_ast::swc::visit::noop_visit_type;
-use deno_ast::swc::visit::Visit;
-use deno_ast::swc::visit::VisitWith;
-use deno_ast::ParsedSource;
+use ::deno_ast::swc::ast::ExportDefaultDecl;
+use ::deno_ast::swc::ast::ExportSpecifier;
+use ::deno_ast::swc::ast::ModuleExportName;
+use ::deno_ast::swc::ast::NamedExport;
+use ::deno_ast::swc::ast::Program;
+use ::deno_ast::swc::visit::noop_visit_type;
+use ::deno_ast::swc::visit::Visit;
+use ::deno_ast::swc::visit::VisitWith;
+use ::deno_ast::ParsedSource;
 
 /// Gets if the parsed source has a default export.
 pub fn has_default_export(source: &ParsedSource) -> bool {
@@ -60,10 +60,10 @@ fn export_specifier_has_default(s: &ExportSpecifier) -> bool {
 
 #[cfg(test)]
 mod test {
-  use deno_ast::MediaType;
-  use deno_ast::ParseParams;
-  use deno_ast::ParsedSource;
-  use deno_ast::SourceTextInfo;
+  use ::deno_ast::MediaType;
+  use ::deno_ast::ParseParams;
+  use ::deno_ast::ParsedSource;
+  use ::deno_ast::SourceTextInfo;
 
   use super::has_default_export;
 
--- a/cli/tools/vendor/build.rs
+++ b/cli/tools/vendor/build.rs
@@ -5,14 +5,14 @@ use std::path::Path;
 use std::path::PathBuf;
 use std::sync::Arc;
 
-use deno_ast::ModuleSpecifier;
-use deno_core::anyhow::bail;
-use deno_core::anyhow::Context;
-use deno_core::error::AnyError;
-use deno_core::parking_lot::Mutex;
-use deno_graph::EsmModule;
-use deno_graph::Module;
-use deno_graph::ModuleGraph;
+use ::deno_ast::ModuleSpecifier;
+use ::deno_core::anyhow::bail;
+use ::deno_core::anyhow::Context;
+use ::deno_core::error::AnyError;
+use ::deno_core::parking_lot::Mutex;
+use ::deno_graph::EsmModule;
+use ::deno_graph::Module;
+use ::deno_graph::ModuleGraph;
 use import_map::ImportMap;
 use import_map::SpecifierMap;
 
@@ -219,7 +219,7 @@ fn build_proxy_module_source(
 #[cfg(test)]
 mod test {
   use crate::tools::vendor::test::VendorTestBuilder;
-  use deno_core::serde_json::json;
+  use ::deno_core::serde_json::json;
   use pretty_assertions::assert_eq;
 
   #[tokio::test]
--- a/cli/tools/vendor/import_map.rs
+++ b/cli/tools/vendor/import_map.rs
@@ -1,14 +1,14 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_ast::LineAndColumnIndex;
-use deno_ast::ModuleSpecifier;
-use deno_ast::SourceTextInfo;
-use deno_core::error::AnyError;
-use deno_graph::Module;
-use deno_graph::ModuleGraph;
-use deno_graph::Position;
-use deno_graph::Range;
-use deno_graph::Resolution;
+use ::deno_ast::LineAndColumnIndex;
+use ::deno_ast::ModuleSpecifier;
+use ::deno_ast::SourceTextInfo;
+use ::deno_core::error::AnyError;
+use ::deno_graph::Module;
+use ::deno_graph::ModuleGraph;
+use ::deno_graph::Position;
+use ::deno_graph::Range;
+use ::deno_graph::Resolution;
 use import_map::ImportMap;
 use import_map::SpecifierMap;
 use indexmap::IndexMap;
--- a/cli/tools/vendor/mappings.rs
+++ b/cli/tools/vendor/mappings.rs
@@ -5,12 +5,12 @@ use std::collections::HashSet;
 use std::path::Path;
 use std::path::PathBuf;
 
-use deno_ast::MediaType;
-use deno_ast::ModuleSpecifier;
-use deno_core::error::AnyError;
-use deno_graph::Module;
-use deno_graph::ModuleGraph;
-use deno_graph::Position;
+use ::deno_ast::MediaType;
+use ::deno_ast::ModuleSpecifier;
+use ::deno_core::error::AnyError;
+use ::deno_graph::Module;
+use ::deno_graph::ModuleGraph;
+use ::deno_graph::Position;
 
 use crate::util::path::path_with_stem_suffix;
 use crate::util::path::relative_specifier;
--- a/cli/tools/vendor/mod.rs
+++ b/cli/tools/vendor/mod.rs
@@ -4,13 +4,13 @@ use std::path::Path;
 use std::path::PathBuf;
 use std::sync::Arc;
 
-use deno_ast::ModuleSpecifier;
-use deno_ast::TextChange;
-use deno_core::anyhow::bail;
-use deno_core::anyhow::Context;
-use deno_core::error::AnyError;
-use deno_core::resolve_url_or_path;
-use deno_graph::GraphKind;
+use ::deno_ast::ModuleSpecifier;
+use ::deno_ast::TextChange;
+use ::deno_core::anyhow::bail;
+use ::deno_core::anyhow::Context;
+use ::deno_core::error::AnyError;
+use ::deno_core::resolve_url_or_path;
+use ::deno_graph::GraphKind;
 use log::warn;
 
 use crate::args::CliOptions;
--- a/cli/tools/vendor/specifiers.rs
+++ b/cli/tools/vendor/specifiers.rs
@@ -4,9 +4,9 @@ use std::collections::BTreeMap;
 use std::collections::HashSet;
 use std::path::PathBuf;
 
-use deno_ast::ModuleSpecifier;
-use deno_core::anyhow::anyhow;
-use deno_core::error::AnyError;
+use ::deno_ast::ModuleSpecifier;
+use ::deno_core::anyhow::anyhow;
+use ::deno_core::error::AnyError;
 
 use crate::util::path::is_banned_path_char;
 use crate::util::path::path_with_stem_suffix;
--- a/cli/tools/vendor/test.rs
+++ b/cli/tools/vendor/test.rs
@@ -7,17 +7,17 @@ use std::path::Path;
 use std::path::PathBuf;
 use std::sync::Arc;
 
-use deno_ast::ModuleSpecifier;
-use deno_core::anyhow::anyhow;
-use deno_core::anyhow::bail;
-use deno_core::error::AnyError;
-use deno_core::futures;
-use deno_core::serde_json;
-use deno_graph::source::LoadFuture;
-use deno_graph::source::LoadResponse;
-use deno_graph::source::Loader;
-use deno_graph::GraphKind;
-use deno_graph::ModuleGraph;
+use ::deno_ast::ModuleSpecifier;
+use ::deno_core::anyhow::anyhow;
+use ::deno_core::anyhow::bail;
+use ::deno_core::error::AnyError;
+use ::deno_core::futures;
+use ::deno_core::serde_json;
+use ::deno_graph::source::LoadFuture;
+use ::deno_graph::source::LoadResponse;
+use ::deno_graph::source::Loader;
+use ::deno_graph::GraphKind;
+use ::deno_graph::ModuleGraph;
 use import_map::ImportMap;
 
 use crate::cache::ParsedSourceCache;
--- a/cli/tsc/diagnostics.rs
+++ b/cli/tsc/diagnostics.rs
@@ -1,11 +1,11 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_runtime::colors;
+use ::deno_runtime::colors;
 
-use deno_core::serde::Deserialize;
-use deno_core::serde::Deserializer;
-use deno_core::serde::Serialize;
-use deno_core::serde::Serializer;
+use ::deno_core::serde::Deserialize;
+use ::deno_core::serde::Deserializer;
+use ::deno_core::serde::Serialize;
+use ::deno_core::serde::Serializer;
 use lazy_regex::lazy_regex;
 use once_cell::sync::Lazy;
 use regex::Regex;
@@ -381,8 +381,8 @@ impl Error for Diagnostics {}
 #[cfg(test)]
 mod tests {
   use super::*;
-  use deno_core::serde_json;
-  use deno_core::serde_json::json;
+  use ::deno_core::serde_json;
+  use ::deno_core::serde_json::json;
   use test_util::strip_ansi_codes;
 
   #[test]
--- a/cli/tsc/mod.rs
+++ b/cli/tsc/mod.rs
@@ -7,36 +7,36 @@ use crate::node;
 use crate::util::checksum;
 use crate::util::path::mapped_specifier_for_tsc;
 
-use deno_ast::MediaType;
-use deno_core::anyhow::anyhow;
-use deno_core::anyhow::Context;
-use deno_core::ascii_str;
-use deno_core::error::AnyError;
-use deno_core::located_script_name;
-use deno_core::op;
-use deno_core::resolve_url_or_path;
-use deno_core::serde::Deserialize;
-use deno_core::serde::Deserializer;
-use deno_core::serde::Serialize;
-use deno_core::serde::Serializer;
-use deno_core::serde_json;
-use deno_core::serde_json::json;
-use deno_core::serde_json::Value;
-use deno_core::serde_v8;
-use deno_core::JsRuntime;
-use deno_core::ModuleSpecifier;
-use deno_core::OpState;
-use deno_core::RuntimeOptions;
-use deno_core::Snapshot;
-use deno_graph::Module;
-use deno_graph::ModuleGraph;
-use deno_graph::ResolutionResolved;
-use deno_runtime::deno_node;
-use deno_runtime::deno_node::NodeResolution;
-use deno_runtime::deno_node::NodeResolutionMode;
-use deno_runtime::deno_node::NodeResolver;
-use deno_runtime::permissions::PermissionsContainer;
-use deno_semver::npm::NpmPackageReqReference;
+use ::deno_ast::MediaType;
+use ::deno_core::anyhow::anyhow;
+use ::deno_core::anyhow::Context;
+use ::deno_core::ascii_str;
+use ::deno_core::error::AnyError;
+use ::deno_core::located_script_name;
+use ::deno_core::op;
+use ::deno_core::resolve_url_or_path;
+use ::deno_core::serde::Deserialize;
+use ::deno_core::serde::Deserializer;
+use ::deno_core::serde::Serialize;
+use ::deno_core::serde::Serializer;
+use ::deno_core::serde_json;
+use ::deno_core::serde_json::json;
+use ::deno_core::serde_json::Value;
+use ::deno_core::serde_v8;
+use ::deno_core::JsRuntime;
+use ::deno_core::ModuleSpecifier;
+use ::deno_core::OpState;
+use ::deno_core::RuntimeOptions;
+use ::deno_core::Snapshot;
+use ::deno_graph::Module;
+use ::deno_graph::ModuleGraph;
+use ::deno_graph::ResolutionResolved;
+use ::deno_runtime::deno_node;
+use ::deno_runtime::deno_node::NodeResolution;
+use ::deno_runtime::deno_node::NodeResolutionMode;
+use ::deno_runtime::deno_node::NodeResolver;
+use ::deno_runtime::permissions::PermissionsContainer;
+use ::deno_semver::npm::NpmPackageReqReference;
 use lsp_types::Url;
 use once_cell::sync::Lazy;
 use std::borrow::Cow;
@@ -837,10 +837,10 @@ mod tests {
   use super::DiagnosticCategory;
   use super::*;
   use crate::args::TsConfig;
-  use deno_core::futures::future;
-  use deno_core::OpState;
-  use deno_graph::GraphKind;
-  use deno_graph::ModuleGraph;
+  use ::deno_core::futures::future;
+  use ::deno_core::OpState;
+  use ::deno_graph::GraphKind;
+  use ::deno_graph::ModuleGraph;
   use test_util::PathRef;
 
   #[derive(Debug, Default)]
--- a/cli/util/console.rs
+++ b/cli/util/console.rs
@@ -1,6 +1,6 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_runtime::ops::tty::ConsoleSize;
+use ::deno_runtime::ops::tty::ConsoleSize;
 
 /// Gets the console size.
 pub fn console_size() -> Option<ConsoleSize> {
--- a/cli/util/display.rs
+++ b/cli/util/display.rs
@@ -1,7 +1,7 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_core::error::AnyError;
-use deno_core::serde_json;
+use ::deno_core::error::AnyError;
+use ::deno_core::serde_json;
 use std::io::Write;
 
 /// A function that converts a float to a string the represents a human
--- a/cli/util/draw_thread.rs
+++ b/cli/util/draw_thread.rs
@@ -1,9 +1,9 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
 use console_static_text::ConsoleStaticText;
-use deno_core::parking_lot::Mutex;
-use deno_core::task::spawn_blocking;
-use deno_runtime::ops::tty::ConsoleSize;
+use ::deno_core::parking_lot::Mutex;
+use ::deno_core::task::spawn_blocking;
+use ::deno_runtime::ops::tty::ConsoleSize;
 use once_cell::sync::Lazy;
 use std::sync::Arc;
 use std::time::Duration;
--- a/cli/util/file_watcher.rs
+++ b/cli/util/file_watcher.rs
@@ -4,10 +4,10 @@ use crate::args::Flags;
 use crate::colors;
 use crate::util::fs::canonicalize_path;
 
-use deno_core::error::AnyError;
-use deno_core::error::JsError;
-use deno_core::futures::Future;
-use deno_runtime::fmt_errors::format_js_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::error::JsError;
+use ::deno_core::futures::Future;
+use ::deno_runtime::fmt_errors::format_js_error;
 use log::info;
 use notify::event::Event as NotifyEvent;
 use notify::event::EventKind;
--- a/cli/util/fs.rs
+++ b/cli/util/fs.rs
@@ -1,12 +1,12 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_core::anyhow::Context;
-use deno_core::error::AnyError;
-pub use deno_core::normalize_path;
-use deno_core::task::spawn_blocking;
-use deno_core::ModuleSpecifier;
-use deno_runtime::deno_crypto::rand;
-use deno_runtime::deno_node::PathClean;
+use ::deno_core::anyhow::Context;
+use ::deno_core::error::AnyError;
+pub use ::deno_core::normalize_path;
+use ::deno_core::task::spawn_blocking;
+use ::deno_core::ModuleSpecifier;
+use ::deno_runtime::deno_crypto::rand;
+use ::deno_runtime::deno_node::PathClean;
 use std::borrow::Cow;
 use std::env::current_dir;
 use std::fs::OpenOptions;
@@ -594,8 +594,8 @@ impl LaxSingleProcessFsFlag {
 #[cfg(test)]
 mod tests {
   use super::*;
-  use deno_core::futures;
-  use deno_core::parking_lot::Mutex;
+  use ::deno_core::futures;
+  use ::deno_core::parking_lot::Mutex;
   use pretty_assertions::assert_eq;
   use test_util::PathRef;
   use test_util::TempDir;
--- a/cli/util/glob.rs
+++ b/cli/util/glob.rs
@@ -3,8 +3,8 @@
 use std::path::Path;
 use std::path::PathBuf;
 
-use deno_core::anyhow::Context;
-use deno_core::error::AnyError;
+use ::deno_core::anyhow::Context;
+use ::deno_core::error::AnyError;
 
 pub fn expand_globs(paths: Vec<PathBuf>) -> Result<Vec<PathBuf>, AnyError> {
   let mut new_paths = vec![];
--- a/cli/util/path.rs
+++ b/cli/util/path.rs
@@ -4,10 +4,10 @@ use std::borrow::Cow;
 use std::path::Path;
 use std::path::PathBuf;
 
-use deno_ast::MediaType;
-use deno_ast::ModuleSpecifier;
-use deno_core::error::uri_error;
-use deno_core::error::AnyError;
+use ::deno_ast::MediaType;
+use ::deno_ast::ModuleSpecifier;
+use ::deno_core::error::uri_error;
+use ::deno_core::error::AnyError;
 
 /// Checks if the path has extension Deno supports.
 pub fn is_supported_ext(path: &Path) -> bool {
--- a/cli/util/progress_bar/mod.rs
+++ b/cli/util/progress_bar/mod.rs
@@ -5,8 +5,8 @@ use std::sync::atomic::Ordering;
 use std::sync::Arc;
 use std::time::SystemTime;
 
-use deno_core::parking_lot::Mutex;
-use deno_runtime::ops::tty::ConsoleSize;
+use ::deno_core::parking_lot::Mutex;
+use ::deno_runtime::ops::tty::ConsoleSize;
 
 use crate::colors;
 
--- a/cli/util/progress_bar/renderer.rs
+++ b/cli/util/progress_bar/renderer.rs
@@ -2,7 +2,7 @@
 
 use std::time::Duration;
 
-use deno_runtime::colors;
+use ::deno_runtime::colors;
 
 use crate::util::display::human_download_size;
 
--- a/cli/util/text_encoding.rs
+++ b/cli/util/text_encoding.rs
@@ -1,6 +1,6 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_core::ModuleCode;
+use ::deno_core::ModuleCode;
 use encoding_rs::*;
 use std::borrow::Cow;
 use std::io::Error;
--- a/cli/worker.rs
+++ b/cli/worker.rs
@@ -4,41 +4,41 @@ use std::path::PathBuf;
 use std::rc::Rc;
 use std::sync::Arc;
 
-use deno_ast::ModuleSpecifier;
-use deno_core::anyhow::Context;
-use deno_core::error::AnyError;
-use deno_core::futures::task::LocalFutureObj;
-use deno_core::futures::FutureExt;
-use deno_core::located_script_name;
-use deno_core::parking_lot::Mutex;
-use deno_core::url::Url;
-use deno_core::CompiledWasmModuleStore;
-use deno_core::Extension;
-use deno_core::ModuleId;
-use deno_core::ModuleLoader;
-use deno_core::SharedArrayBufferStore;
-use deno_core::SourceMapGetter;
-use deno_lockfile::Lockfile;
-use deno_runtime::colors;
-use deno_runtime::deno_broadcast_channel::InMemoryBroadcastChannel;
-use deno_runtime::deno_fs;
-use deno_runtime::deno_node;
-use deno_runtime::deno_node::NodeResolution;
-use deno_runtime::deno_node::NodeResolver;
-use deno_runtime::deno_tls::RootCertStoreProvider;
-use deno_runtime::deno_web::BlobStore;
-use deno_runtime::fmt_errors::format_js_error;
-use deno_runtime::inspector_server::InspectorServer;
-use deno_runtime::ops::worker_host::CreateWebWorkerCb;
-use deno_runtime::ops::worker_host::WorkerEventCb;
-use deno_runtime::permissions::PermissionsContainer;
-use deno_runtime::web_worker::WebWorker;
-use deno_runtime::web_worker::WebWorkerOptions;
-use deno_runtime::worker::MainWorker;
-use deno_runtime::worker::WorkerOptions;
-use deno_runtime::BootstrapOptions;
-use deno_runtime::WorkerLogLevel;
-use deno_semver::npm::NpmPackageReqReference;
+use ::deno_ast::ModuleSpecifier;
+use ::deno_core::anyhow::Context;
+use ::deno_core::error::AnyError;
+use ::deno_core::futures::task::LocalFutureObj;
+use ::deno_core::futures::FutureExt;
+use ::deno_core::located_script_name;
+use ::deno_core::parking_lot::Mutex;
+use ::deno_core::url::Url;
+use ::deno_core::CompiledWasmModuleStore;
+use ::deno_core::Extension;
+use ::deno_core::ModuleId;
+use ::deno_core::ModuleLoader;
+use ::deno_core::SharedArrayBufferStore;
+use ::deno_core::SourceMapGetter;
+use ::deno_lockfile::Lockfile;
+use ::deno_runtime::colors;
+use ::deno_runtime::deno_broadcast_channel::InMemoryBroadcastChannel;
+use ::deno_runtime::deno_fs;
+use ::deno_runtime::deno_node;
+use ::deno_runtime::deno_node::NodeResolution;
+use ::deno_runtime::deno_node::NodeResolver;
+use ::deno_runtime::deno_tls::RootCertStoreProvider;
+use ::deno_runtime::deno_web::BlobStore;
+use ::deno_runtime::fmt_errors::format_js_error;
+use ::deno_runtime::inspector_server::InspectorServer;
+use ::deno_runtime::ops::worker_host::CreateWebWorkerCb;
+use ::deno_runtime::ops::worker_host::WorkerEventCb;
+use ::deno_runtime::permissions::PermissionsContainer;
+use ::deno_runtime::web_worker::WebWorker;
+use ::deno_runtime::web_worker::WebWorkerOptions;
+use ::deno_runtime::worker::MainWorker;
+use ::deno_runtime::worker::WorkerOptions;
+use ::deno_runtime::BootstrapOptions;
+use ::deno_runtime::WorkerLogLevel;
+use ::deno_semver::npm::NpmPackageReqReference;
 
 use crate::args::StorageKeyResolver;
 use crate::errors;
@@ -618,8 +618,8 @@ fn create_web_worker_callback(
 #[cfg(test)]
 mod tests {
   use super::*;
-  use deno_core::resolve_path;
-  use deno_runtime::permissions::Permissions;
+  use ::deno_core::resolve_path;
+  use ::deno_runtime::permissions::Permissions;
 
   fn create_test_worker() -> MainWorker {
     let main_module =
--- a/core/async_cell.rs
+++ b/core/async_cell.rs
@@ -124,7 +124,7 @@ impl<T> RcRef<AsyncRefCell<T>> {
 ///
 /// ```rust
 /// # use std::rc::Rc;
-/// # use deno_core::RcRef;
+/// # use ::deno_core::RcRef;
 ///
 /// struct Stuff {
 ///   foo: u32,
--- a/core/examples/disable_ops.rs
+++ b/core/examples/disable_ops.rs
@@ -2,9 +2,9 @@
 //!  This example shows you how to define ops in Rust and then call them from
 //!  JavaScript.
 
-use deno_core::Extension;
-use deno_core::JsRuntime;
-use deno_core::RuntimeOptions;
+use ::deno_core::Extension;
+use ::deno_core::JsRuntime;
+use ::deno_core::RuntimeOptions;
 
 fn main() {
   let my_ext = Extension::builder("my_ext")
--- a/core/examples/eval_js_value.rs
+++ b/core/examples/eval_js_value.rs
@@ -6,9 +6,9 @@
 // Here we are deserializing to `serde_json::Value` but you can
 // deserialize to any other type that implementes the `Deserialize` trait.
 
-use deno_core::v8;
-use deno_core::JsRuntime;
-use deno_core::RuntimeOptions;
+use ::deno_core::v8;
+use ::deno_core::JsRuntime;
+use ::deno_core::RuntimeOptions;
 
 fn main() {
   let mut runtime = JsRuntime::new(RuntimeOptions::default());
--- a/core/examples/fs_module_loader.rs
+++ b/core/examples/fs_module_loader.rs
@@ -1,10 +1,10 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
 use anyhow::Context;
-use deno_core::anyhow::Error;
-use deno_core::FsModuleLoader;
-use deno_core::JsRuntime;
-use deno_core::RuntimeOptions;
+use ::deno_core::anyhow::Error;
+use ::deno_core::FsModuleLoader;
+use ::deno_core::JsRuntime;
+use ::deno_core::RuntimeOptions;
 use std::rc::Rc;
 
 fn main() -> Result<(), Error> {
--- a/core/examples/hello_world.rs
+++ b/core/examples/hello_world.rs
@@ -2,15 +2,15 @@
 //!  This example shows you how to define ops in Rust and then call them from
 //!  JavaScript.
 
-use deno_core::op;
-use deno_core::Extension;
-use deno_core::JsRuntime;
-use deno_core::RuntimeOptions;
+use ::deno_core::op;
+use ::deno_core::Extension;
+use ::deno_core::JsRuntime;
+use ::deno_core::RuntimeOptions;
 
 // This is a hack to make the `#[op]` macro work with
 // deno_core examples.
 // You can remove this:
-use deno_core::*;
+use ::deno_core::*;
 
 #[op]
 fn op_sum(nums: Vec<f64>) -> Result<f64, deno_core::error::AnyError> {
--- a/core/examples/http_bench_json_ops/main.rs
+++ b/core/examples/http_bench_json_ops/main.rs
@@ -1,13 +1,13 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
-use deno_core::anyhow::Error;
-use deno_core::op;
-use deno_core::AsyncRefCell;
-use deno_core::AsyncResult;
-use deno_core::JsRuntimeForSnapshot;
-use deno_core::OpState;
-use deno_core::Resource;
-use deno_core::ResourceId;
-use deno_core::ZeroCopyBuf;
+use ::deno_core::anyhow::Error;
+use ::deno_core::op;
+use ::deno_core::AsyncRefCell;
+use ::deno_core::AsyncResult;
+use ::deno_core::JsRuntimeForSnapshot;
+use ::deno_core::OpState;
+use ::deno_core::Resource;
+use ::deno_core::ResourceId;
+use ::deno_core::ZeroCopyBuf;
 use std::cell::RefCell;
 use std::env;
 use std::net::SocketAddr;
@@ -18,7 +18,7 @@ use tokio::io::AsyncWriteExt;
 // This is a hack to make the `#[op]` macro work with
 // deno_core examples.
 // You can remove this:
-use deno_core::*;
+use ::deno_core::*;
 
 // Note: a `tokio::net::TcpListener` doesn't need to be wrapped in a cell,
 // because it only supports one op (`accept`) which does not require a mutable
--- a/core/examples/panik.rs
+++ b/core/examples/panik.rs
@@ -8,15 +8,15 @@
 //!    - https://github.com/rust-lang/rust/issues/74990
 //!    - https://rust-lang.github.io/rfcs/2945-c-unwind-abi.html
 
-use deno_core::op;
-use deno_core::Extension;
-use deno_core::JsRuntime;
-use deno_core::RuntimeOptions;
+use ::deno_core::op;
+use ::deno_core::Extension;
+use ::deno_core::JsRuntime;
+use ::deno_core::RuntimeOptions;
 
 // This is a hack to make the `#[op]` macro work with
 // deno_core examples.
 // You can remove this:
-use deno_core::*;
+use ::deno_core::*;
 
 fn main() {
   #[op]
--- a/core/examples/schedule_task.rs
+++ b/core/examples/schedule_task.rs
@@ -1,11 +1,11 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_core::anyhow::Error;
-use deno_core::op;
-use deno_core::Extension;
-use deno_core::JsRuntime;
-use deno_core::OpState;
-use deno_core::RuntimeOptions;
+use ::deno_core::anyhow::Error;
+use ::deno_core::op;
+use ::deno_core::Extension;
+use ::deno_core::JsRuntime;
+use ::deno_core::OpState;
+use ::deno_core::RuntimeOptions;
 use futures::channel::mpsc;
 use futures::stream::StreamExt;
 use std::task::Poll;
@@ -13,7 +13,7 @@ use std::task::Poll;
 // This is a hack to make the `#[op]` macro work with
 // deno_core examples.
 // You can remove this:
-use deno_core::*;
+use ::deno_core::*;
 
 type Task = Box<dyn FnOnce()>;
 
--- a/core/examples/ts_module_loader.rs
+++ b/core/examples/ts_module_loader.rs
@@ -11,20 +11,20 @@ use anyhow::anyhow;
 use anyhow::bail;
 use anyhow::Context;
 use anyhow::Error;
-use deno_ast::MediaType;
-use deno_ast::ParseParams;
-use deno_ast::SourceTextInfo;
-use deno_core::error::AnyError;
-use deno_core::resolve_import;
-use deno_core::resolve_path;
-use deno_core::JsRuntime;
-use deno_core::ModuleLoader;
-use deno_core::ModuleSource;
-use deno_core::ModuleSourceFuture;
-use deno_core::ModuleSpecifier;
-use deno_core::ModuleType;
-use deno_core::ResolutionKind;
-use deno_core::RuntimeOptions;
+use ::deno_ast::MediaType;
+use ::deno_ast::ParseParams;
+use ::deno_ast::SourceTextInfo;
+use ::deno_core::error::AnyError;
+use ::deno_core::resolve_import;
+use ::deno_core::resolve_path;
+use ::deno_core::JsRuntime;
+use ::deno_core::ModuleLoader;
+use ::deno_core::ModuleSource;
+use ::deno_core::ModuleSourceFuture;
+use ::deno_core::ModuleSpecifier;
+use ::deno_core::ModuleType;
+use ::deno_core::ResolutionKind;
+use ::deno_core::RuntimeOptions;
 use futures::FutureExt;
 
 struct TypescriptModuleLoader;
--- a/core/examples/wasm.rs
+++ b/core/examples/wasm.rs
@@ -1,9 +1,9 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_core::op;
-use deno_core::Extension;
-use deno_core::JsRuntime;
-use deno_core::RuntimeOptions;
+use ::deno_core::op;
+use ::deno_core::Extension;
+use ::deno_core::JsRuntime;
+use ::deno_core::RuntimeOptions;
 use std::mem::transmute;
 use std::ptr::NonNull;
 
@@ -11,7 +11,7 @@ use std::ptr::NonNull;
 // deno_core examples.
 // You can remove this:
 
-use deno_core::*;
+use ::deno_core::*;
 
 struct WasmMemory(NonNull<v8::WasmMemoryObject>);
 
--- a/core/extensions.rs
+++ b/core/extensions.rs
@@ -93,7 +93,7 @@ impl OpDecl {
 /// This can be either a compact form like:
 ///
 /// ```no_compile
-/// # use deno_core::*;
+/// # use ::deno_core::*;
 /// #[op]
 /// fn op_xyz() {}
 ///
@@ -109,7 +109,7 @@ impl OpDecl {
 /// to each `#[op]`:
 ///
 /// ```no_compile
-/// # use deno_core::*;
+/// # use ::deno_core::*;
 /// #[op]
 /// fn op_xyz<P>() where P: Clone {}
 ///
--- a/core/fast_string.rs
+++ b/core/fast_string.rs
@@ -15,7 +15,7 @@ use v8::NewStringType;
 /// Examples of ways to construct a [`FastString`]:
 ///
 /// ```rust
-/// # use deno_core::{ascii_str, FastString};
+/// # use ::deno_core::{ascii_str, FastString};
 ///
 /// let code: FastString = ascii_str!("a string");
 /// let code: FastString = format!("a string").into();
--- a/core/lib.rs
+++ b/core/lib.rs
@@ -39,7 +39,7 @@ pub use sourcemap;
 pub use url;
 pub use v8;
 
-pub use deno_ops::op;
+pub use ::deno_ops::op;
 
 pub use crate::async_cancel::CancelFuture;
 pub use crate::async_cancel::CancelHandle;
--- a/core/modules/tests.rs
+++ b/core/modules/tests.rs
@@ -5,7 +5,7 @@ use crate::runtime::JsRuntime;
 use crate::runtime::JsRuntimeForSnapshot;
 use crate::RuntimeOptions;
 use crate::Snapshot;
-use deno_ops::op;
+use ::deno_ops::op;
 use futures::future::poll_fn;
 use futures::future::FutureExt;
 use parking_lot::Mutex;
--- a/core/ops_builtin.rs
+++ b/core/ops_builtin.rs
@@ -10,7 +10,7 @@ use crate::OpState;
 use crate::Resource;
 use crate::ZeroCopyBuf;
 use anyhow::Error;
-use deno_ops::op;
+use ::deno_ops::op;
 use std::cell::RefCell;
 use std::io::stderr;
 use std::io::stdout;
--- a/core/ops_builtin_v8.rs
+++ b/core/ops_builtin_v8.rs
@@ -13,7 +13,7 @@ use crate::JsRealm;
 use crate::JsRuntime;
 use crate::ZeroCopyBuf;
 use anyhow::Error;
-use deno_ops::op;
+use ::deno_ops::op;
 use serde::Deserialize;
 use serde::Serialize;
 use std::cell::RefCell;
--- a/core/resources.rs
+++ b/core/resources.rs
@@ -359,7 +359,7 @@ impl ResourceTable {
   /// # Example
   ///
   /// ```
-  /// # use deno_core::ResourceTable;
+  /// # use ::deno_core::ResourceTable;
   /// # let resource_table = ResourceTable::default();
   /// let resource_names = resource_table.names().collect::<Vec<_>>();
   /// ```
--- a/core/runtime/jsrealm.rs
+++ b/core/runtime/jsrealm.rs
@@ -83,8 +83,8 @@ pub(crate) struct ContextState {
 ///
 /// Example usage with the [`JsRealm::execute_script`] method:
 /// ```
-/// use deno_core::JsRuntime;
-/// use deno_core::RuntimeOptions;
+/// use ::deno_core::JsRuntime;
+/// use ::deno_core::RuntimeOptions;
 ///
 /// let mut runtime = JsRuntime::new(RuntimeOptions::default());
 /// let new_realm = runtime
--- a/core/runtime/tests.rs
+++ b/core/runtime/tests.rs
@@ -21,7 +21,7 @@ use crate::Extension;
 use crate::ZeroCopyBuf;
 use crate::*;
 use anyhow::Error;
-use deno_ops::op;
+use ::deno_ops::op;
 use futures::future::poll_fn;
 use futures::future::Future;
 use futures::FutureExt;
--- a/ext/broadcast_channel/in_memory_broadcast_channel.rs
+++ b/ext/broadcast_channel/in_memory_broadcast_channel.rs
@@ -3,8 +3,8 @@
 use std::sync::Arc;
 
 use async_trait::async_trait;
-use deno_core::error::AnyError;
-use deno_core::parking_lot::Mutex;
+use ::deno_core::error::AnyError;
+use ::deno_core::parking_lot::Mutex;
 use tokio::sync::broadcast;
 use tokio::sync::mpsc;
 use uuid::Uuid;
--- a/ext/broadcast_channel/lib.rs
+++ b/ext/broadcast_channel/lib.rs
@@ -10,12 +10,12 @@ use std::path::PathBuf;
 use std::rc::Rc;
 
 use async_trait::async_trait;
-use deno_core::error::AnyError;
-use deno_core::op;
-use deno_core::OpState;
-use deno_core::Resource;
-use deno_core::ResourceId;
-use deno_core::ZeroCopyBuf;
+use ::deno_core::error::AnyError;
+use ::deno_core::op;
+use ::deno_core::OpState;
+use ::deno_core::Resource;
+use ::deno_core::ResourceId;
+use ::deno_core::ZeroCopyBuf;
 
 #[async_trait]
 pub trait BroadcastChannel: Clone {
--- a/ext/cache/lib.rs
+++ b/ext/cache/lib.rs
@@ -6,14 +6,14 @@ use std::rc::Rc;
 use std::sync::Arc;
 
 use async_trait::async_trait;
-use deno_core::error::AnyError;
-use deno_core::op;
-use deno_core::serde::Deserialize;
-use deno_core::serde::Serialize;
-use deno_core::ByteString;
-use deno_core::OpState;
-use deno_core::Resource;
-use deno_core::ResourceId;
+use ::deno_core::error::AnyError;
+use ::deno_core::op;
+use ::deno_core::serde::Deserialize;
+use ::deno_core::serde::Serialize;
+use ::deno_core::ByteString;
+use ::deno_core::OpState;
+use ::deno_core::Resource;
+use ::deno_core::ResourceId;
 mod sqlite;
 pub use sqlite::SqliteBackedCache;
 
--- a/ext/cache/sqlite.rs
+++ b/ext/cache/sqlite.rs
@@ -8,13 +8,13 @@ use std::time::SystemTime;
 use std::time::UNIX_EPOCH;
 
 use async_trait::async_trait;
-use deno_core::error::AnyError;
-use deno_core::parking_lot::Mutex;
-use deno_core::task::spawn_blocking;
-use deno_core::AsyncRefCell;
-use deno_core::AsyncResult;
-use deno_core::ByteString;
-use deno_core::Resource;
+use ::deno_core::error::AnyError;
+use ::deno_core::parking_lot::Mutex;
+use ::deno_core::task::spawn_blocking;
+use ::deno_core::AsyncRefCell;
+use ::deno_core::AsyncResult;
+use ::deno_core::ByteString;
+use ::deno_core::Resource;
 use rusqlite::params;
 use rusqlite::Connection;
 use rusqlite::OptionalExtension;
--- a/ext/crypto/decrypt.rs
+++ b/ext/crypto/decrypt.rs
@@ -16,12 +16,12 @@ use ctr::cipher::StreamCipher;
 use ctr::Ctr128BE;
 use ctr::Ctr32BE;
 use ctr::Ctr64BE;
-use deno_core::error::custom_error;
-use deno_core::error::type_error;
-use deno_core::error::AnyError;
-use deno_core::op;
-use deno_core::task::spawn_blocking;
-use deno_core::ZeroCopyBuf;
+use ::deno_core::error::custom_error;
+use ::deno_core::error::type_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::op;
+use ::deno_core::task::spawn_blocking;
+use ::deno_core::ZeroCopyBuf;
 use rsa::pkcs1::DecodeRsaPrivateKey;
 use rsa::PaddingScheme;
 use serde::Deserialize;
--- a/ext/crypto/ed25519.rs
+++ b/ext/crypto/ed25519.rs
@@ -1,8 +1,8 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_core::error::AnyError;
-use deno_core::op;
-use deno_core::ZeroCopyBuf;
+use ::deno_core::error::AnyError;
+use ::deno_core::op;
+use ::deno_core::ZeroCopyBuf;
 use elliptic_curve::pkcs8::PrivateKeyInfo;
 use rand::rngs::OsRng;
 use rand::RngCore;
--- a/ext/crypto/encrypt.rs
+++ b/ext/crypto/encrypt.rs
@@ -16,11 +16,11 @@ use aes_gcm::Nonce;
 use ctr::Ctr128BE;
 use ctr::Ctr32BE;
 use ctr::Ctr64BE;
-use deno_core::error::type_error;
-use deno_core::error::AnyError;
-use deno_core::op;
-use deno_core::task::spawn_blocking;
-use deno_core::ZeroCopyBuf;
+use ::deno_core::error::type_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::op;
+use ::deno_core::task::spawn_blocking;
+use ::deno_core::ZeroCopyBuf;
 use rand::rngs::OsRng;
 use rsa::pkcs1::DecodeRsaPublicKey;
 use rsa::PaddingScheme;
--- a/ext/crypto/export_key.rs
+++ b/ext/crypto/export_key.rs
@@ -2,10 +2,10 @@
 
 use const_oid::AssociatedOid;
 use const_oid::ObjectIdentifier;
-use deno_core::error::custom_error;
-use deno_core::error::AnyError;
-use deno_core::op;
-use deno_core::ZeroCopyBuf;
+use ::deno_core::error::custom_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::op;
+use ::deno_core::ZeroCopyBuf;
 use elliptic_curve::sec1::ToEncodedPoint;
 use p256::pkcs8::DecodePrivateKey;
 use rsa::pkcs1::UIntRef;
--- a/ext/crypto/generate_key.rs
+++ b/ext/crypto/generate_key.rs
@@ -1,9 +1,9 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_core::error::AnyError;
-use deno_core::op;
-use deno_core::task::spawn_blocking;
-use deno_core::ZeroCopyBuf;
+use ::deno_core::error::AnyError;
+use ::deno_core::op;
+use ::deno_core::task::spawn_blocking;
+use ::deno_core::ZeroCopyBuf;
 use elliptic_curve::rand_core::OsRng;
 use num_traits::FromPrimitive;
 use once_cell::sync::Lazy;
--- a/ext/crypto/import_key.rs
+++ b/ext/crypto/import_key.rs
@@ -1,8 +1,8 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_core::error::AnyError;
-use deno_core::op;
-use deno_core::ZeroCopyBuf;
+use ::deno_core::error::AnyError;
+use ::deno_core::op;
+use ::deno_core::ZeroCopyBuf;
 use elliptic_curve::pkcs8::PrivateKeyInfo;
 use p256::pkcs8::EncodePrivateKey;
 use ring::signature::EcdsaKeyPair;
--- a/ext/crypto/lib.rs
+++ b/ext/crypto/lib.rs
@@ -4,15 +4,15 @@ use aes_kw::KekAes128;
 use aes_kw::KekAes192;
 use aes_kw::KekAes256;
 
-use deno_core::error::custom_error;
-use deno_core::error::not_supported;
-use deno_core::error::type_error;
-use deno_core::error::AnyError;
-use deno_core::op;
+use ::deno_core::error::custom_error;
+use ::deno_core::error::not_supported;
+use ::deno_core::error::type_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::op;
 
-use deno_core::task::spawn_blocking;
-use deno_core::OpState;
-use deno_core::ZeroCopyBuf;
+use ::deno_core::task::spawn_blocking;
+use ::deno_core::OpState;
+use ::deno_core::ZeroCopyBuf;
 use serde::Deserialize;
 use shared::operation_error;
 
--- a/ext/crypto/shared.rs
+++ b/ext/crypto/shared.rs
@@ -2,10 +2,10 @@
 
 use std::borrow::Cow;
 
-use deno_core::error::custom_error;
-use deno_core::error::type_error;
-use deno_core::error::AnyError;
-use deno_core::ZeroCopyBuf;
+use ::deno_core::error::custom_error;
+use ::deno_core::error::type_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::ZeroCopyBuf;
 use elliptic_curve::sec1::ToEncodedPoint;
 use rsa::pkcs1::DecodeRsaPrivateKey;
 use rsa::pkcs1::EncodeRsaPublicKey;
--- a/ext/crypto/x25519.rs
+++ b/ext/crypto/x25519.rs
@@ -1,9 +1,9 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
 use curve25519_dalek::montgomery::MontgomeryPoint;
-use deno_core::error::AnyError;
-use deno_core::op;
-use deno_core::ZeroCopyBuf;
+use ::deno_core::error::AnyError;
+use ::deno_core::op;
+use ::deno_core::ZeroCopyBuf;
 use elliptic_curve::pkcs8::PrivateKeyInfo;
 use elliptic_curve::subtle::ConstantTimeEq;
 use rand::rngs::OsRng;
--- a/ext/fetch/byte_stream.rs
+++ b/ext/fetch/byte_stream.rs
@@ -4,7 +4,7 @@ use std::pin::Pin;
 use std::task::Context;
 use std::task::Poll;
 
-use deno_core::futures::Stream;
+use ::deno_core::futures::Stream;
 use tokio::sync::mpsc;
 
 /// [MpscByteStream] is a stream of bytes that is backed by a mpsc channel. It is
@@ -54,7 +54,7 @@ impl Stream for MpscByteStream {
 mod tests {
   use super::*;
   use bytes::Bytes;
-  use deno_core::futures::StreamExt;
+  use ::deno_core::futures::StreamExt;
 
   #[tokio::test]
   async fn success() {
--- a/ext/fetch/fs_fetch_handler.rs
+++ b/ext/fetch/fs_fetch_handler.rs
@@ -5,12 +5,12 @@ use crate::CancelableResponseFuture;
 use crate::FetchHandler;
 use crate::FetchRequestBodyResource;
 
-use deno_core::error::type_error;
-use deno_core::futures::FutureExt;
-use deno_core::futures::TryFutureExt;
-use deno_core::url::Url;
-use deno_core::CancelFuture;
-use deno_core::OpState;
+use ::deno_core::error::type_error;
+use ::deno_core::futures::FutureExt;
+use ::deno_core::futures::TryFutureExt;
+use ::deno_core::url::Url;
+use ::deno_core::CancelFuture;
+use ::deno_core::OpState;
 use reqwest::StatusCode;
 use std::rc::Rc;
 use tokio_util::io::ReaderStream;
--- a/ext/fetch/lib.rs
+++ b/ext/fetch/lib.rs
@@ -13,33 +13,33 @@ use std::pin::Pin;
 use std::rc::Rc;
 use std::sync::Arc;
 
-use deno_core::error::type_error;
-use deno_core::error::AnyError;
-use deno_core::futures::stream::Peekable;
-use deno_core::futures::Future;
-use deno_core::futures::Stream;
-use deno_core::futures::StreamExt;
-use deno_core::op;
-use deno_core::BufView;
-use deno_core::WriteOutcome;
+use ::deno_core::error::type_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::futures::stream::Peekable;
+use ::deno_core::futures::Future;
+use ::deno_core::futures::Stream;
+use ::deno_core::futures::StreamExt;
+use ::deno_core::op;
+use ::deno_core::BufView;
+use ::deno_core::WriteOutcome;
 
-use deno_core::task::spawn;
-use deno_core::url::Url;
-use deno_core::AsyncRefCell;
-use deno_core::AsyncResult;
-use deno_core::ByteString;
-use deno_core::CancelFuture;
-use deno_core::CancelHandle;
-use deno_core::CancelTryFuture;
-use deno_core::Canceled;
-use deno_core::OpState;
-use deno_core::RcRef;
-use deno_core::Resource;
-use deno_core::ResourceId;
-use deno_core::ZeroCopyBuf;
-use deno_tls::rustls::RootCertStore;
-use deno_tls::Proxy;
-use deno_tls::RootCertStoreProvider;
+use ::deno_core::task::spawn;
+use ::deno_core::url::Url;
+use ::deno_core::AsyncRefCell;
+use ::deno_core::AsyncResult;
+use ::deno_core::ByteString;
+use ::deno_core::CancelFuture;
+use ::deno_core::CancelHandle;
+use ::deno_core::CancelTryFuture;
+use ::deno_core::Canceled;
+use ::deno_core::OpState;
+use ::deno_core::RcRef;
+use ::deno_core::Resource;
+use ::deno_core::ResourceId;
+use ::deno_core::ZeroCopyBuf;
+use ::deno_tls::rustls::RootCertStore;
+use ::deno_tls::Proxy;
+use ::deno_tls::RootCertStoreProvider;
 
 use data_url::DataUrl;
 use http::header::CONTENT_LENGTH;
--- a/ext/ffi/call.rs
+++ b/ext/ffi/call.rs
@@ -8,17 +8,17 @@ use crate::symbol::NativeType;
 use crate::symbol::Symbol;
 use crate::FfiPermissions;
 use crate::ForeignFunction;
-use deno_core::anyhow::anyhow;
-use deno_core::error::type_error;
-use deno_core::error::AnyError;
-use deno_core::op;
-use deno_core::serde_json::Value;
-use deno_core::serde_v8;
-use deno_core::serde_v8::ExternalPointer;
-use deno_core::task::spawn_blocking;
-use deno_core::v8;
-use deno_core::OpState;
-use deno_core::ResourceId;
+use ::deno_core::anyhow::anyhow;
+use ::deno_core::error::type_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::op;
+use ::deno_core::serde_json::Value;
+use ::deno_core::serde_v8;
+use ::deno_core::serde_v8::ExternalPointer;
+use ::deno_core::task::spawn_blocking;
+use ::deno_core::v8;
+use ::deno_core::OpState;
+use ::deno_core::ResourceId;
 use libffi::middle::Arg;
 use serde::Serialize;
 use std::cell::RefCell;
--- a/ext/ffi/callback.rs
+++ b/ext/ffi/callback.rs
@@ -8,17 +8,17 @@ use crate::ForeignFunction;
 use crate::PendingFfiAsyncWork;
 use crate::MAX_SAFE_INTEGER;
 use crate::MIN_SAFE_INTEGER;
-use deno_core::error::AnyError;
-use deno_core::futures::channel::mpsc;
-use deno_core::futures::task::AtomicWaker;
-use deno_core::op;
-use deno_core::serde_v8;
-use deno_core::v8;
-use deno_core::CancelFuture;
-use deno_core::CancelHandle;
-use deno_core::OpState;
-use deno_core::Resource;
-use deno_core::ResourceId;
+use ::deno_core::error::AnyError;
+use ::deno_core::futures::channel::mpsc;
+use ::deno_core::futures::task::AtomicWaker;
+use ::deno_core::op;
+use ::deno_core::serde_v8;
+use ::deno_core::v8;
+use ::deno_core::CancelFuture;
+use ::deno_core::CancelHandle;
+use ::deno_core::OpState;
+use ::deno_core::Resource;
+use ::deno_core::ResourceId;
 use libffi::middle::Cif;
 use serde::Deserialize;
 use std::borrow::Cow;
--- a/ext/ffi/dlfcn.rs
+++ b/ext/ffi/dlfcn.rs
@@ -6,14 +6,14 @@ use crate::symbol::NativeType;
 use crate::symbol::Symbol;
 use crate::turbocall;
 use crate::FfiPermissions;
-use deno_core::error::generic_error;
-use deno_core::error::AnyError;
-use deno_core::op;
-use deno_core::serde_v8;
-use deno_core::v8;
-use deno_core::OpState;
-use deno_core::Resource;
-use deno_core::ResourceId;
+use ::deno_core::error::generic_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::op;
+use ::deno_core::serde_v8;
+use ::deno_core::v8;
+use ::deno_core::OpState;
+use ::deno_core::Resource;
+use ::deno_core::ResourceId;
 use dlopen::raw::Library;
 use serde::Deserialize;
 use serde_value::ValueDeserializer;
--- a/ext/ffi/ir.rs
+++ b/ext/ffi/ir.rs
@@ -3,10 +3,10 @@
 use crate::symbol::NativeType;
 use crate::MAX_SAFE_INTEGER;
 use crate::MIN_SAFE_INTEGER;
-use deno_core::error::type_error;
-use deno_core::error::AnyError;
-use deno_core::serde_v8;
-use deno_core::v8;
+use ::deno_core::error::type_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::serde_v8;
+use ::deno_core::v8;
 use libffi::middle::Arg;
 use std::ffi::c_void;
 use std::ptr;
--- a/ext/ffi/lib.rs
+++ b/ext/ffi/lib.rs
@@ -1,8 +1,8 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_core::error::AnyError;
-use deno_core::futures::channel::mpsc;
-use deno_core::OpState;
+use ::deno_core::error::AnyError;
+use ::deno_core::futures::channel::mpsc;
+use ::deno_core::OpState;
 
 use std::cell::RefCell;
 use std::mem::size_of;
--- a/ext/ffi/repr.rs
+++ b/ext/ffi/repr.rs
@@ -2,13 +2,13 @@
 
 use crate::check_unstable;
 use crate::FfiPermissions;
-use deno_core::error::range_error;
-use deno_core::error::type_error;
-use deno_core::error::AnyError;
-use deno_core::op;
-use deno_core::serde_v8;
-use deno_core::v8;
-use deno_core::OpState;
+use ::deno_core::error::range_error;
+use ::deno_core::error::type_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::op;
+use ::deno_core::serde_v8;
+use ::deno_core::v8;
+use ::deno_core::OpState;
 use std::ffi::c_char;
 use std::ffi::c_void;
 use std::ffi::CStr;
--- a/ext/ffi/static.rs
+++ b/ext/ffi/static.rs
@@ -4,12 +4,12 @@ use crate::dlfcn::DynamicLibraryResource;
 use crate::symbol::NativeType;
 use crate::MAX_SAFE_INTEGER;
 use crate::MIN_SAFE_INTEGER;
-use deno_core::error::type_error;
-use deno_core::error::AnyError;
-use deno_core::op;
-use deno_core::serde_v8;
-use deno_core::v8;
-use deno_core::ResourceId;
+use ::deno_core::error::type_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::op;
+use ::deno_core::serde_v8;
+use ::deno_core::v8;
+use ::deno_core::ResourceId;
 use std::ffi::c_void;
 use std::ptr;
 
--- a/ext/ffi/symbol.rs
+++ b/ext/ffi/symbol.rs
@@ -1,7 +1,7 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_core::error::type_error;
-use deno_core::error::AnyError;
+use ::deno_core::error::type_error;
+use ::deno_core::error::AnyError;
 
 /// Defines the accepted types that can be used as
 /// parameters and return values in FFI.
--- a/ext/ffi/turbocall.rs
+++ b/ext/ffi/turbocall.rs
@@ -4,7 +4,7 @@ use std::cmp::max;
 use std::ffi::c_void;
 use std::iter::once;
 
-use deno_core::v8::fast_api;
+use ::deno_core::v8::fast_api;
 use dynasmrt::dynasm;
 use dynasmrt::DynasmApi;
 use dynasmrt::ExecutableBuffer;
--- a/ext/fs/interface.rs
+++ b/ext/fs/interface.rs
@@ -7,9 +7,9 @@ use std::rc::Rc;
 use serde::Deserialize;
 use serde::Serialize;
 
-use deno_io::fs::File;
-use deno_io::fs::FsResult;
-use deno_io::fs::FsStat;
+use ::deno_io::fs::File;
+use ::deno_io::fs::FsResult;
+use ::deno_io::fs::FsStat;
 
 use crate::sync::MaybeSend;
 use crate::sync::MaybeSync;
--- a/ext/fs/lib.rs
+++ b/ext/fs/lib.rs
@@ -16,8 +16,8 @@ pub use crate::sync::MaybeSync;
 
 use crate::ops::*;
 
-use deno_core::error::AnyError;
-use deno_core::OpState;
+use ::deno_core::error::AnyError;
+use ::deno_core::OpState;
 use std::cell::RefCell;
 use std::convert::From;
 use std::path::Path;
--- a/ext/fs/ops.rs
+++ b/ext/fs/ops.rs
@@ -8,18 +8,18 @@ use std::path::Path;
 use std::path::PathBuf;
 use std::rc::Rc;
 
-use deno_core::error::custom_error;
-use deno_core::error::type_error;
-use deno_core::error::AnyError;
-use deno_core::op;
-use deno_core::CancelFuture;
-use deno_core::CancelHandle;
-use deno_core::OpState;
-use deno_core::ResourceId;
-use deno_core::ZeroCopyBuf;
-use deno_io::fs::FileResource;
-use deno_io::fs::FsError;
-use deno_io::fs::FsStat;
+use ::deno_core::error::custom_error;
+use ::deno_core::error::type_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::op;
+use ::deno_core::CancelFuture;
+use ::deno_core::CancelHandle;
+use ::deno_core::OpState;
+use ::deno_core::ResourceId;
+use ::deno_core::ZeroCopyBuf;
+use ::deno_io::fs::FileResource;
+use ::deno_io::fs::FsError;
+use ::deno_io::fs::FsStat;
 use rand::rngs::ThreadRng;
 use rand::thread_rng;
 use rand::Rng;
--- a/ext/fs/std_fs.rs
+++ b/ext/fs/std_fs.rs
@@ -9,11 +9,11 @@ use std::path::Path;
 use std::path::PathBuf;
 use std::rc::Rc;
 
-use deno_core::task::spawn_blocking;
-use deno_io::fs::File;
-use deno_io::fs::FsResult;
-use deno_io::fs::FsStat;
-use deno_io::StdFileResourceInner;
+use ::deno_core::task::spawn_blocking;
+use ::deno_io::fs::File;
+use ::deno_io::fs::FsResult;
+use ::deno_io::fs::FsStat;
+use ::deno_io::StdFileResourceInner;
 
 use crate::interface::FsDirEntry;
 use crate::interface::FsFileType;
@@ -21,7 +21,7 @@ use crate::FileSystem;
 use crate::OpenOptions;
 
 #[cfg(not(unix))]
-use deno_io::fs::FsError;
+use ::deno_io::fs::FsError;
 
 #[derive(Debug, Clone)]
 pub struct RealFs;
--- a/ext/http/benches/compressible.rs
+++ b/ext/http/benches/compressible.rs
@@ -2,7 +2,7 @@
 use bencher::benchmark_group;
 use bencher::benchmark_main;
 use bencher::Bencher;
-use deno_http::compressible::is_content_compressible;
+use ::deno_http::compressible::is_content_compressible;
 
 fn compressible_simple_hit(b: &mut Bencher) {
   b.iter(|| {
--- a/ext/http/http_next.rs
+++ b/ext/http/http_next.rs
@@ -17,27 +17,27 @@ use crate::slab::SlabId;
 use crate::websocket_upgrade::WebSocketUpgrade;
 use crate::LocalExecutor;
 use cache_control::CacheControl;
-use deno_core::error::AnyError;
-use deno_core::futures::TryFutureExt;
-use deno_core::op;
-use deno_core::serde_v8;
-use deno_core::serde_v8::from_v8;
-use deno_core::task::spawn;
-use deno_core::task::JoinHandle;
-use deno_core::v8;
-use deno_core::AsyncRefCell;
-use deno_core::AsyncResult;
-use deno_core::ByteString;
-use deno_core::CancelFuture;
-use deno_core::CancelHandle;
-use deno_core::CancelTryFuture;
-use deno_core::OpState;
-use deno_core::RcRef;
-use deno_core::Resource;
-use deno_core::ResourceId;
-use deno_net::ops_tls::TlsStream;
-use deno_net::raw::NetworkStream;
-use deno_websocket::ws_create_server_stream;
+use ::deno_core::error::AnyError;
+use ::deno_core::futures::TryFutureExt;
+use ::deno_core::op;
+use ::deno_core::serde_v8;
+use ::deno_core::serde_v8::from_v8;
+use ::deno_core::task::spawn;
+use ::deno_core::task::JoinHandle;
+use ::deno_core::v8;
+use ::deno_core::AsyncRefCell;
+use ::deno_core::AsyncResult;
+use ::deno_core::ByteString;
+use ::deno_core::CancelFuture;
+use ::deno_core::CancelHandle;
+use ::deno_core::CancelTryFuture;
+use ::deno_core::OpState;
+use ::deno_core::RcRef;
+use ::deno_core::Resource;
+use ::deno_core::ResourceId;
+use ::deno_net::ops_tls::TlsStream;
+use ::deno_net::raw::NetworkStream;
+use ::deno_websocket::ws_create_server_stream;
 use fly_accept_encoding::Encoding;
 use http::header::ACCEPT_ENCODING;
 use http::header::CACHE_CONTROL;
--- a/ext/http/lib.rs
+++ b/ext/http/lib.rs
@@ -3,39 +3,39 @@
 use async_compression::tokio::write::BrotliEncoder;
 use async_compression::tokio::write::GzipEncoder;
 use cache_control::CacheControl;
-use deno_core::error::custom_error;
-use deno_core::error::AnyError;
-use deno_core::futures::channel::mpsc;
-use deno_core::futures::channel::oneshot;
-use deno_core::futures::future::pending;
-use deno_core::futures::future::select;
-use deno_core::futures::future::Either;
-use deno_core::futures::future::Pending;
-use deno_core::futures::future::RemoteHandle;
-use deno_core::futures::future::Shared;
-use deno_core::futures::never::Never;
-use deno_core::futures::ready;
-use deno_core::futures::stream::Peekable;
-use deno_core::futures::FutureExt;
-use deno_core::futures::StreamExt;
-use deno_core::futures::TryFutureExt;
-use deno_core::op;
-use deno_core::task::spawn;
-use deno_core::AsyncRefCell;
-use deno_core::AsyncResult;
-use deno_core::BufView;
-use deno_core::ByteString;
-use deno_core::CancelFuture;
-use deno_core::CancelHandle;
-use deno_core::CancelTryFuture;
-use deno_core::OpState;
-use deno_core::RcRef;
-use deno_core::Resource;
-use deno_core::ResourceId;
-use deno_core::StringOrBuffer;
-use deno_core::ZeroCopyBuf;
-use deno_net::raw::NetworkStream;
-use deno_websocket::ws_create_server_stream;
+use ::deno_core::error::custom_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::futures::channel::mpsc;
+use ::deno_core::futures::channel::oneshot;
+use ::deno_core::futures::future::pending;
+use ::deno_core::futures::future::select;
+use ::deno_core::futures::future::Either;
+use ::deno_core::futures::future::Pending;
+use ::deno_core::futures::future::RemoteHandle;
+use ::deno_core::futures::future::Shared;
+use ::deno_core::futures::never::Never;
+use ::deno_core::futures::ready;
+use ::deno_core::futures::stream::Peekable;
+use ::deno_core::futures::FutureExt;
+use ::deno_core::futures::StreamExt;
+use ::deno_core::futures::TryFutureExt;
+use ::deno_core::op;
+use ::deno_core::task::spawn;
+use ::deno_core::AsyncRefCell;
+use ::deno_core::AsyncResult;
+use ::deno_core::BufView;
+use ::deno_core::ByteString;
+use ::deno_core::CancelFuture;
+use ::deno_core::CancelHandle;
+use ::deno_core::CancelTryFuture;
+use ::deno_core::OpState;
+use ::deno_core::RcRef;
+use ::deno_core::Resource;
+use ::deno_core::ResourceId;
+use ::deno_core::StringOrBuffer;
+use ::deno_core::ZeroCopyBuf;
+use ::deno_net::raw::NetworkStream;
+use ::deno_websocket::ws_create_server_stream;
 use flate2::write::GzEncoder;
 use flate2::Compression;
 use fly_accept_encoding::Encoding;
--- a/ext/http/network_buffered_stream.rs
+++ b/ext/http/network_buffered_stream.rs
@@ -1,8 +1,8 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
 use bytes::Bytes;
-use deno_core::futures::future::poll_fn;
-use deno_core::futures::ready;
+use ::deno_core::futures::future::poll_fn;
+use ::deno_core::futures::ready;
 use std::io;
 use std::mem::MaybeUninit;
 use std::pin::Pin;
--- a/ext/http/reader_stream.rs
+++ b/ext/http/reader_stream.rs
@@ -8,7 +8,7 @@ use std::task::Context;
 use std::task::Poll;
 
 use bytes::Bytes;
-use deno_core::futures::Stream;
+use ::deno_core::futures::Stream;
 use pin_project::pin_project;
 use tokio::io::AsyncRead;
 use tokio_util::io::ReaderStream;
@@ -68,7 +68,7 @@ impl<R: AsyncRead> Stream for ExternallyAbortableReaderStream<R> {
 mod tests {
   use super::*;
   use bytes::Bytes;
-  use deno_core::futures::StreamExt;
+  use ::deno_core::futures::StreamExt;
   use tokio::io::AsyncWriteExt;
 
   #[tokio::test]
--- a/ext/http/request_body.rs
+++ b/ext/http/request_body.rs
@@ -1,14 +1,14 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 use bytes::Bytes;
-use deno_core::error::AnyError;
-use deno_core::futures::stream::Peekable;
-use deno_core::futures::Stream;
-use deno_core::futures::StreamExt;
-use deno_core::AsyncRefCell;
-use deno_core::AsyncResult;
-use deno_core::BufView;
-use deno_core::RcRef;
-use deno_core::Resource;
+use ::deno_core::error::AnyError;
+use ::deno_core::futures::stream::Peekable;
+use ::deno_core::futures::Stream;
+use ::deno_core::futures::StreamExt;
+use ::deno_core::AsyncRefCell;
+use ::deno_core::AsyncResult;
+use ::deno_core::BufView;
+use ::deno_core::RcRef;
+use ::deno_core::Resource;
 use hyper1::body::Body;
 use hyper1::body::Incoming;
 use hyper1::body::SizeHint;
--- a/ext/http/request_properties.rs
+++ b/ext/http/request_properties.rs
@@ -1,13 +1,13 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
-use deno_core::error::AnyError;
-use deno_core::OpState;
-use deno_core::ResourceId;
-use deno_net::raw::take_network_stream_listener_resource;
-use deno_net::raw::take_network_stream_resource;
-use deno_net::raw::NetworkStream;
-use deno_net::raw::NetworkStreamAddress;
-use deno_net::raw::NetworkStreamListener;
-use deno_net::raw::NetworkStreamType;
+use ::deno_core::error::AnyError;
+use ::deno_core::OpState;
+use ::deno_core::ResourceId;
+use ::deno_net::raw::take_network_stream_listener_resource;
+use ::deno_net::raw::take_network_stream_resource;
+use ::deno_net::raw::NetworkStream;
+use ::deno_net::raw::NetworkStreamAddress;
+use ::deno_net::raw::NetworkStreamListener;
+use ::deno_net::raw::NetworkStreamType;
 use hyper::HeaderMap;
 use hyper::Uri;
 use hyper1::header::HOST;
--- a/ext/http/response_body.rs
+++ b/ext/http/response_body.rs
@@ -10,18 +10,18 @@ use std::task::Waker;
 use brotli::ffi::compressor::BrotliEncoderState;
 use bytes::Bytes;
 use bytes::BytesMut;
-use deno_core::error::bad_resource;
-use deno_core::error::AnyError;
-use deno_core::futures::ready;
-use deno_core::futures::FutureExt;
-use deno_core::AsyncRefCell;
-use deno_core::AsyncResult;
-use deno_core::BufView;
-use deno_core::CancelHandle;
-use deno_core::CancelTryFuture;
-use deno_core::RcRef;
-use deno_core::Resource;
-use deno_core::WriteOutcome;
+use ::deno_core::error::bad_resource;
+use ::deno_core::error::AnyError;
+use ::deno_core::futures::ready;
+use ::deno_core::futures::FutureExt;
+use ::deno_core::AsyncRefCell;
+use ::deno_core::AsyncResult;
+use ::deno_core::BufView;
+use ::deno_core::CancelHandle;
+use ::deno_core::CancelTryFuture;
+use ::deno_core::RcRef;
+use ::deno_core::Resource;
+use ::deno_core::WriteOutcome;
 use flate2::write::GzEncoder;
 use http::HeaderMap;
 use hyper1::body::Body;
@@ -796,7 +796,7 @@ impl Resource for V8StreamHttpResponseBody {
 #[cfg(test)]
 mod tests {
   use super::*;
-  use deno_core::futures::future::poll_fn;
+  use ::deno_core::futures::future::poll_fn;
   use std::hash::Hasher;
   use std::io::Read;
   use std::io::Write;
--- a/ext/http/slab.rs
+++ b/ext/http/slab.rs
@@ -2,7 +2,7 @@
 use crate::request_properties::HttpConnectionProperties;
 use crate::response_body::CompletionHandle;
 use crate::response_body::ResponseBytes;
-use deno_core::error::AnyError;
+use ::deno_core::error::AnyError;
 use http::request::Parts;
 use http::HeaderMap;
 use hyper1::body::Incoming;
@@ -228,7 +228,7 @@ impl SlabEntry {
 #[cfg(test)]
 mod tests {
   use super::*;
-  use deno_net::raw::NetworkStreamType;
+  use ::deno_net::raw::NetworkStreamType;
   use http::Request;
 
   #[test]
--- a/ext/http/websocket_upgrade.rs
+++ b/ext/http/websocket_upgrade.rs
@@ -4,7 +4,7 @@ use std::marker::PhantomData;
 
 use bytes::Bytes;
 use bytes::BytesMut;
-use deno_core::error::AnyError;
+use ::deno_core::error::AnyError;
 use httparse::Status;
 use hyper::http::HeaderName;
 use hyper::http::HeaderValue;
--- a/ext/io/fs.rs
+++ b/ext/io/fs.rs
@@ -6,13 +6,13 @@ use std::rc::Rc;
 use std::time::SystemTime;
 use std::time::UNIX_EPOCH;
 
-use deno_core::error::not_supported;
-use deno_core::error::resource_unavailable;
-use deno_core::error::AnyError;
-use deno_core::BufMutView;
-use deno_core::BufView;
-use deno_core::OpState;
-use deno_core::ResourceId;
+use ::deno_core::error::not_supported;
+use ::deno_core::error::resource_unavailable;
+use ::deno_core::error::AnyError;
+use ::deno_core::BufMutView;
+use ::deno_core::BufView;
+use ::deno_core::OpState;
+use ::deno_core::ResourceId;
 use tokio::task::JoinError;
 
 #[derive(Debug)]
--- a/ext/io/lib.rs
+++ b/ext/io/lib.rs
@@ -1,19 +1,19 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_core::error::AnyError;
-use deno_core::op;
-use deno_core::task::spawn_blocking;
-use deno_core::AsyncMutFuture;
-use deno_core::AsyncRefCell;
-use deno_core::AsyncResult;
-use deno_core::BufMutView;
-use deno_core::BufView;
-use deno_core::CancelHandle;
-use deno_core::CancelTryFuture;
-use deno_core::OpState;
-use deno_core::RcRef;
-use deno_core::Resource;
-use deno_core::TaskQueue;
+use ::deno_core::error::AnyError;
+use ::deno_core::op;
+use ::deno_core::task::spawn_blocking;
+use ::deno_core::AsyncMutFuture;
+use ::deno_core::AsyncRefCell;
+use ::deno_core::AsyncResult;
+use ::deno_core::BufMutView;
+use ::deno_core::BufView;
+use ::deno_core::CancelHandle;
+use ::deno_core::CancelTryFuture;
+use ::deno_core::OpState;
+use ::deno_core::RcRef;
+use ::deno_core::Resource;
+use ::deno_core::TaskQueue;
 use fs::FileResource;
 use fs::FsError;
 use fs::FsResult;
--- a/ext/kv/interface.rs
+++ b/ext/kv/interface.rs
@@ -6,8 +6,8 @@ use std::num::NonZeroU32;
 use std::rc::Rc;
 
 use async_trait::async_trait;
-use deno_core::error::AnyError;
-use deno_core::OpState;
+use ::deno_core::error::AnyError;
+use ::deno_core::OpState;
 use num_bigint::BigInt;
 
 use crate::codec::canonicalize_f64;
--- a/ext/kv/lib.rs
+++ b/ext/kv/lib.rs
@@ -12,17 +12,17 @@ use std::vec;
 
 use codec::decode_key;
 use codec::encode_key;
-use deno_core::anyhow::Context;
-use deno_core::error::type_error;
-use deno_core::error::AnyError;
-use deno_core::op;
-use deno_core::serde_v8::AnyValue;
-use deno_core::serde_v8::BigInt;
-use deno_core::ByteString;
-use deno_core::OpState;
-use deno_core::Resource;
-use deno_core::ResourceId;
-use deno_core::ZeroCopyBuf;
+use ::deno_core::anyhow::Context;
+use ::deno_core::error::type_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::op;
+use ::deno_core::serde_v8::AnyValue;
+use ::deno_core::serde_v8::BigInt;
+use ::deno_core::ByteString;
+use ::deno_core::OpState;
+use ::deno_core::Resource;
+use ::deno_core::ResourceId;
+use ::deno_core::ZeroCopyBuf;
 use serde::Deserialize;
 use serde::Serialize;
 
--- a/ext/kv/sqlite.rs
+++ b/ext/kv/sqlite.rs
@@ -13,14 +13,14 @@ use std::time::Duration;
 use std::time::SystemTime;
 
 use async_trait::async_trait;
-use deno_core::error::type_error;
-use deno_core::error::AnyError;
-use deno_core::futures;
-use deno_core::futures::FutureExt;
-use deno_core::task::spawn;
-use deno_core::task::spawn_blocking;
-use deno_core::AsyncRefCell;
-use deno_core::OpState;
+use ::deno_core::error::type_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::futures;
+use ::deno_core::futures::FutureExt;
+use ::deno_core::task::spawn;
+use ::deno_core::task::spawn_blocking;
+use ::deno_core::AsyncRefCell;
+use ::deno_core::OpState;
 use rusqlite::params;
 use rusqlite::OpenFlags;
 use rusqlite::OptionalExtension;
--- a/ext/napi/lib.rs
+++ b/ext/napi/lib.rs
@@ -6,14 +6,14 @@
 #![deny(clippy::missing_safety_doc)]
 
 use core::ptr::NonNull;
-use deno_core::error::type_error;
-use deno_core::error::AnyError;
-use deno_core::futures::channel::mpsc;
-use deno_core::futures::StreamExt;
-use deno_core::op;
-use deno_core::parking_lot::Mutex;
-use deno_core::serde_v8;
-use deno_core::OpState;
+use ::deno_core::error::type_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::futures::channel::mpsc;
+use ::deno_core::futures::StreamExt;
+use ::deno_core::op;
+use ::deno_core::parking_lot::Mutex;
+use ::deno_core::serde_v8;
+use ::deno_core::OpState;
 use std::cell::RefCell;
 use std::ffi::CString;
 use std::path::Path;
@@ -31,8 +31,8 @@ use libloading::os::unix::*;
 use libloading::os::windows::*;
 
 // Expose common stuff for ease of use.
-// `use deno_napi::*`
-pub use deno_core::v8;
+// `use ::deno_napi::*`
+pub use ::deno_core::v8;
 pub use std::ffi::CStr;
 pub use std::mem::transmute;
 pub use std::os::raw::c_char;
--- a/ext/napi/value.rs
+++ b/ext/napi/value.rs
@@ -1,6 +1,6 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_core::v8;
+use ::deno_core::v8;
 use std::mem::transmute;
 use std::ops::Deref;
 use std::os::raw::c_void;
--- a/ext/net/io.rs
+++ b/ext/net/io.rs
@@ -1,14 +1,14 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_core::error::generic_error;
-use deno_core::error::AnyError;
-use deno_core::AsyncMutFuture;
-use deno_core::AsyncRefCell;
-use deno_core::AsyncResult;
-use deno_core::CancelHandle;
-use deno_core::CancelTryFuture;
-use deno_core::RcRef;
-use deno_core::Resource;
+use ::deno_core::error::generic_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::AsyncMutFuture;
+use ::deno_core::AsyncRefCell;
+use ::deno_core::AsyncResult;
+use ::deno_core::CancelHandle;
+use ::deno_core::CancelTryFuture;
+use ::deno_core::RcRef;
+use ::deno_core::Resource;
 use socket2::SockRef;
 use std::borrow::Cow;
 use std::rc::Rc;
--- a/ext/net/lib.rs
+++ b/ext/net/lib.rs
@@ -8,10 +8,10 @@ pub mod ops_unix;
 pub mod raw;
 pub mod resolve_addr;
 
-use deno_core::error::AnyError;
-use deno_core::OpState;
-use deno_tls::rustls::RootCertStore;
-use deno_tls::RootCertStoreProvider;
+use ::deno_core::error::AnyError;
+use ::deno_core::OpState;
+use ::deno_tls::rustls::RootCertStore;
+use ::deno_tls::RootCertStoreProvider;
 use std::cell::RefCell;
 use std::path::Path;
 use std::path::PathBuf;
--- a/ext/net/ops.rs
+++ b/ext/net/ops.rs
@@ -4,22 +4,22 @@ use crate::io::TcpStreamResource;
 use crate::resolve_addr::resolve_addr;
 use crate::resolve_addr::resolve_addr_sync;
 use crate::NetPermissions;
-use deno_core::error::bad_resource;
-use deno_core::error::custom_error;
-use deno_core::error::generic_error;
-use deno_core::error::AnyError;
-use deno_core::op;
-use deno_core::CancelFuture;
+use ::deno_core::error::bad_resource;
+use ::deno_core::error::custom_error;
+use ::deno_core::error::generic_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::op;
+use ::deno_core::CancelFuture;
 
-use deno_core::AsyncRefCell;
-use deno_core::ByteString;
-use deno_core::CancelHandle;
-use deno_core::CancelTryFuture;
-use deno_core::OpState;
-use deno_core::RcRef;
-use deno_core::Resource;
-use deno_core::ResourceId;
-use deno_core::ZeroCopyBuf;
+use ::deno_core::AsyncRefCell;
+use ::deno_core::ByteString;
+use ::deno_core::CancelHandle;
+use ::deno_core::CancelTryFuture;
+use ::deno_core::OpState;
+use ::deno_core::RcRef;
+use ::deno_core::Resource;
+use ::deno_core::ResourceId;
+use ::deno_core::ZeroCopyBuf;
 use serde::Deserialize;
 use serde::Serialize;
 use socket2::Domain;
@@ -762,9 +762,9 @@ fn rdata_to_return_record(
 mod tests {
   use super::*;
   use crate::UnstableChecker;
-  use deno_core::futures::FutureExt;
-  use deno_core::JsRuntime;
-  use deno_core::RuntimeOptions;
+  use ::deno_core::futures::FutureExt;
+  use ::deno_core::JsRuntime;
+  use ::deno_core::RuntimeOptions;
   use socket2::SockRef;
   use std::net::Ipv4Addr;
   use std::net::Ipv6Addr;
--- a/ext/net/ops_tls.rs
+++ b/ext/net/ops_tls.rs
@@ -8,45 +8,45 @@ use crate::resolve_addr::resolve_addr_sync;
 use crate::DefaultTlsOptions;
 use crate::NetPermissions;
 use crate::UnsafelyIgnoreCertificateErrors;
-use deno_core::error::bad_resource;
-use deno_core::error::custom_error;
-use deno_core::error::generic_error;
-use deno_core::error::invalid_hostname;
-use deno_core::error::type_error;
-use deno_core::error::AnyError;
-use deno_core::futures::future::poll_fn;
-use deno_core::futures::ready;
-use deno_core::futures::task::noop_waker_ref;
-use deno_core::futures::task::AtomicWaker;
-use deno_core::futures::task::Context;
-use deno_core::futures::task::Poll;
-use deno_core::futures::task::RawWaker;
-use deno_core::futures::task::RawWakerVTable;
-use deno_core::futures::task::Waker;
-use deno_core::op;
+use ::deno_core::error::bad_resource;
+use ::deno_core::error::custom_error;
+use ::deno_core::error::generic_error;
+use ::deno_core::error::invalid_hostname;
+use ::deno_core::error::type_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::futures::future::poll_fn;
+use ::deno_core::futures::ready;
+use ::deno_core::futures::task::noop_waker_ref;
+use ::deno_core::futures::task::AtomicWaker;
+use ::deno_core::futures::task::Context;
+use ::deno_core::futures::task::Poll;
+use ::deno_core::futures::task::RawWaker;
+use ::deno_core::futures::task::RawWakerVTable;
+use ::deno_core::futures::task::Waker;
+use ::deno_core::op;
 
-use deno_core::parking_lot::Mutex;
-use deno_core::task::spawn;
-use deno_core::AsyncRefCell;
-use deno_core::AsyncResult;
-use deno_core::ByteString;
-use deno_core::CancelHandle;
-use deno_core::CancelTryFuture;
-use deno_core::OpState;
-use deno_core::RcRef;
-use deno_core::Resource;
-use deno_core::ResourceId;
-use deno_tls::create_client_config;
-use deno_tls::load_certs;
-use deno_tls::load_private_keys;
-use deno_tls::rustls::Certificate;
-use deno_tls::rustls::ClientConfig;
-use deno_tls::rustls::ClientConnection;
-use deno_tls::rustls::Connection;
-use deno_tls::rustls::PrivateKey;
-use deno_tls::rustls::ServerConfig;
-use deno_tls::rustls::ServerConnection;
-use deno_tls::rustls::ServerName;
+use ::deno_core::parking_lot::Mutex;
+use ::deno_core::task::spawn;
+use ::deno_core::AsyncRefCell;
+use ::deno_core::AsyncResult;
+use ::deno_core::ByteString;
+use ::deno_core::CancelHandle;
+use ::deno_core::CancelTryFuture;
+use ::deno_core::OpState;
+use ::deno_core::RcRef;
+use ::deno_core::Resource;
+use ::deno_core::ResourceId;
+use ::deno_tls::create_client_config;
+use ::deno_tls::load_certs;
+use ::deno_tls::load_private_keys;
+use ::deno_tls::rustls::Certificate;
+use ::deno_tls::rustls::ClientConfig;
+use ::deno_tls::rustls::ClientConnection;
+use ::deno_tls::rustls::Connection;
+use ::deno_tls::rustls::PrivateKey;
+use ::deno_tls::rustls::ServerConfig;
+use ::deno_tls::rustls::ServerConnection;
+use ::deno_tls::rustls::ServerName;
 use io::Error;
 use io::Read;
 use io::Write;
--- a/ext/net/ops_unix.rs
+++ b/ext/net/ops_unix.rs
@@ -2,18 +2,18 @@
 
 use crate::io::UnixStreamResource;
 use crate::NetPermissions;
-use deno_core::error::bad_resource;
-use deno_core::error::custom_error;
-use deno_core::error::AnyError;
-use deno_core::op;
-use deno_core::AsyncRefCell;
-use deno_core::CancelHandle;
-use deno_core::CancelTryFuture;
-use deno_core::OpState;
-use deno_core::RcRef;
-use deno_core::Resource;
-use deno_core::ResourceId;
-use deno_core::ZeroCopyBuf;
+use ::deno_core::error::bad_resource;
+use ::deno_core::error::custom_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::op;
+use ::deno_core::AsyncRefCell;
+use ::deno_core::CancelHandle;
+use ::deno_core::CancelTryFuture;
+use ::deno_core::OpState;
+use ::deno_core::RcRef;
+use ::deno_core::Resource;
+use ::deno_core::ResourceId;
+use ::deno_core::ZeroCopyBuf;
 use serde::Deserialize;
 use serde::Serialize;
 use std::borrow::Cow;
--- a/ext/net/raw.rs
+++ b/ext/net/raw.rs
@@ -8,12 +8,12 @@ use crate::ops_tls::TlsStream;
 use crate::ops_tls::TlsStreamResource;
 #[cfg(unix)]
 use crate::ops_unix::UnixListenerResource;
-use deno_core::error::bad_resource;
-use deno_core::error::bad_resource_id;
-use deno_core::error::AnyError;
-use deno_core::ResourceId;
-use deno_core::ResourceTable;
-use deno_tls::rustls::ServerConfig;
+use ::deno_core::error::bad_resource;
+use ::deno_core::error::bad_resource_id;
+use ::deno_core::error::AnyError;
+use ::deno_core::ResourceId;
+use ::deno_core::ResourceTable;
+use ::deno_tls::rustls::ServerConfig;
 use pin_project::pin_project;
 use std::rc::Rc;
 use std::sync::Arc;
--- a/ext/net/resolve_addr.rs
+++ b/ext/net/resolve_addr.rs
@@ -1,6 +1,6 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_core::error::AnyError;
+use ::deno_core::error::AnyError;
 use std::net::SocketAddr;
 use std::net::ToSocketAddrs;
 use tokio::net::lookup_host;
--- a/ext/node/analyze.rs
+++ b/ext/node/analyze.rs
@@ -6,11 +6,11 @@ use std::fmt::Write;
 use std::path::Path;
 use std::path::PathBuf;
 
-use deno_core::anyhow::Context;
-use deno_core::ModuleSpecifier;
+use ::deno_core::anyhow::Context;
+use ::deno_core::ModuleSpecifier;
 use once_cell::sync::Lazy;
 
-use deno_core::error::AnyError;
+use ::deno_core::error::AnyError;
 
 use crate::resolution::NodeResolverRc;
 use crate::NodeModuleKind;
--- a/ext/node/errors.rs
+++ b/ext/node/errors.rs
@@ -2,10 +2,10 @@
 
 use std::path::PathBuf;
 
-use deno_core::error::generic_error;
-use deno_core::error::type_error;
-use deno_core::error::AnyError;
-use deno_core::url::Url;
+use ::deno_core::error::generic_error;
+use ::deno_core::error::type_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::url::Url;
 
 pub fn err_invalid_module_specifier(
   request: &str,
--- a/ext/node/lib.rs
+++ b/ext/node/lib.rs
@@ -5,21 +5,21 @@ use std::path::Path;
 use std::path::PathBuf;
 use std::rc::Rc;
 
-use deno_core::error::AnyError;
-use deno_core::located_script_name;
-use deno_core::op;
-use deno_core::serde_json;
-use deno_core::url::Url;
-use deno_core::JsRuntime;
-use deno_core::ModuleSpecifier;
-use deno_fs::sync::MaybeSend;
-use deno_fs::sync::MaybeSync;
-use deno_npm::resolution::PackageReqNotFoundError;
-use deno_npm::NpmPackageId;
-use deno_semver::npm::NpmPackageNv;
-use deno_semver::npm::NpmPackageNvReference;
-use deno_semver::npm::NpmPackageReq;
-use deno_semver::npm::NpmPackageReqReference;
+use ::deno_core::error::AnyError;
+use ::deno_core::located_script_name;
+use ::deno_core::op;
+use ::deno_core::serde_json;
+use ::deno_core::url::Url;
+use ::deno_core::JsRuntime;
+use ::deno_core::ModuleSpecifier;
+use ::deno_fs::sync::MaybeSend;
+use ::deno_fs::sync::MaybeSync;
+use ::deno_npm::resolution::PackageReqNotFoundError;
+use ::deno_npm::NpmPackageId;
+use ::deno_semver::npm::NpmPackageNv;
+use ::deno_semver::npm::NpmPackageNvReference;
+use ::deno_semver::npm::NpmPackageReq;
+use ::deno_semver::npm::NpmPackageReqReference;
 use once_cell::sync::Lazy;
 
 pub mod analyze;
--- a/ext/node/ops/crypto/cipher.rs
+++ b/ext/node/ops/crypto/cipher.rs
@@ -4,9 +4,9 @@ use aes::cipher::block_padding::Pkcs7;
 use aes::cipher::BlockDecryptMut;
 use aes::cipher::BlockEncryptMut;
 use aes::cipher::KeyIvInit;
-use deno_core::error::type_error;
-use deno_core::error::AnyError;
-use deno_core::Resource;
+use ::deno_core::error::type_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::Resource;
 use digest::KeyInit;
 
 use std::borrow::Cow;
--- a/ext/node/ops/crypto/digest.rs
+++ b/ext/node/ops/crypto/digest.rs
@@ -1,7 +1,7 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
-use deno_core::error::type_error;
-use deno_core::error::AnyError;
-use deno_core::Resource;
+use ::deno_core::error::type_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::Resource;
 use digest::Digest;
 use digest::DynDigest;
 use std::borrow::Cow;
--- a/ext/node/ops/crypto/mod.rs
+++ b/ext/node/ops/crypto/mod.rs
@@ -1,14 +1,14 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
-use deno_core::error::generic_error;
-use deno_core::error::type_error;
-use deno_core::error::AnyError;
-use deno_core::op;
-use deno_core::serde_v8;
-use deno_core::task::spawn_blocking;
-use deno_core::OpState;
-use deno_core::ResourceId;
-use deno_core::StringOrBuffer;
-use deno_core::ZeroCopyBuf;
+use ::deno_core::error::generic_error;
+use ::deno_core::error::type_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::op;
+use ::deno_core::serde_v8;
+use ::deno_core::task::spawn_blocking;
+use ::deno_core::OpState;
+use ::deno_core::ResourceId;
+use ::deno_core::StringOrBuffer;
+use ::deno_core::ZeroCopyBuf;
 use hkdf::Hkdf;
 use num_bigint::BigInt;
 use num_bigint_dig::BigUint;
--- a/ext/node/ops/crypto/x509.rs
+++ b/ext/node/ops/crypto/x509.rs
@@ -1,10 +1,10 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_core::error::bad_resource_id;
-use deno_core::error::AnyError;
-use deno_core::op;
-use deno_core::OpState;
-use deno_core::Resource;
+use ::deno_core::error::bad_resource_id;
+use ::deno_core::error::AnyError;
+use ::deno_core::op;
+use ::deno_core::OpState;
+use ::deno_core::Resource;
 
 use std::borrow::Cow;
 
--- a/ext/node/ops/http.rs
+++ b/ext/node/ops/http.rs
@@ -1,21 +1,21 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_core::error::type_error;
-use deno_core::error::AnyError;
-use deno_core::op;
-use deno_core::url::Url;
-use deno_core::AsyncRefCell;
-use deno_core::ByteString;
-use deno_core::CancelFuture;
-use deno_core::CancelHandle;
-use deno_core::OpState;
-use deno_fetch::get_or_create_client_from_state;
-use deno_fetch::FetchCancelHandle;
-use deno_fetch::FetchRequestBodyResource;
-use deno_fetch::FetchRequestResource;
-use deno_fetch::FetchReturn;
-use deno_fetch::HttpClientResource;
-use deno_fetch::MpscByteStream;
+use ::deno_core::error::type_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::op;
+use ::deno_core::url::Url;
+use ::deno_core::AsyncRefCell;
+use ::deno_core::ByteString;
+use ::deno_core::CancelFuture;
+use ::deno_core::CancelHandle;
+use ::deno_core::OpState;
+use ::deno_fetch::get_or_create_client_from_state;
+use ::deno_fetch::FetchCancelHandle;
+use ::deno_fetch::FetchRequestBodyResource;
+use ::deno_fetch::FetchRequestResource;
+use ::deno_fetch::FetchReturn;
+use ::deno_fetch::HttpClientResource;
+use ::deno_fetch::MpscByteStream;
 use reqwest::header::HeaderMap;
 use reqwest::header::HeaderName;
 use reqwest::header::HeaderValue;
--- a/ext/node/ops/idna.rs
+++ b/ext/node/ops/idna.rs
@@ -1,7 +1,7 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_core::error::AnyError;
-use deno_core::op;
+use ::deno_core::error::AnyError;
+use ::deno_core::op;
 
 #[op]
 pub fn op_node_idna_domain_to_ascii(
--- a/ext/node/ops/require.rs
+++ b/ext/node/ops/require.rs
@@ -1,15 +1,15 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_core::anyhow::Context;
-use deno_core::error::generic_error;
-use deno_core::error::AnyError;
-use deno_core::normalize_path;
-use deno_core::op;
-use deno_core::url::Url;
-use deno_core::JsRuntimeInspector;
-use deno_core::ModuleSpecifier;
-use deno_core::OpState;
-use deno_fs::FileSystemRc;
+use ::deno_core::anyhow::Context;
+use ::deno_core::error::generic_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::normalize_path;
+use ::deno_core::op;
+use ::deno_core::url::Url;
+use ::deno_core::JsRuntimeInspector;
+use ::deno_core::ModuleSpecifier;
+use ::deno_core::OpState;
+use ::deno_fs::FileSystemRc;
 use std::cell::RefCell;
 use std::path::Path;
 use std::path::PathBuf;
--- a/ext/node/ops/v8.rs
+++ b/ext/node/ops/v8.rs
@@ -1,6 +1,6 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
-use deno_core::op;
-use deno_core::v8;
+use ::deno_core::op;
+use ::deno_core::v8;
 
 #[op]
 fn op_v8_cached_data_version_tag() -> u32 {
--- a/ext/node/ops/winerror.rs
+++ b/ext/node/ops/winerror.rs
@@ -24,7 +24,7 @@
 // - https://github.com/libuv/libuv/blob/master/src/win/error.c
 #![allow(unused)]
 
-use deno_core::op;
+use ::deno_core::op;
 
 #[op]
 fn op_node_sys_to_uv_error(err: i32) -> String {
--- a/ext/node/ops/zlib/mod.rs
+++ b/ext/node/ops/zlib/mod.rs
@@ -1,10 +1,10 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_core::error::bad_resource_id;
-use deno_core::error::type_error;
-use deno_core::error::AnyError;
-use deno_core::op;
-use deno_core::OpState;
+use ::deno_core::error::bad_resource_id;
+use ::deno_core::error::type_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::op;
+use ::deno_core::OpState;
 use libz_sys::*;
 use std::borrow::Cow;
 use std::cell::RefCell;
--- a/ext/node/package_json.rs
+++ b/ext/node/package_json.rs
@@ -5,13 +5,13 @@ use crate::NodePermissions;
 
 use super::NpmResolver;
 
-use deno_core::anyhow;
-use deno_core::anyhow::bail;
-use deno_core::error::AnyError;
-use deno_core::serde_json;
-use deno_core::serde_json::Map;
-use deno_core::serde_json::Value;
-use deno_core::ModuleSpecifier;
+use ::deno_core::anyhow;
+use ::deno_core::anyhow::bail;
+use ::deno_core::error::AnyError;
+use ::deno_core::serde_json;
+use ::deno_core::serde_json::Map;
+use ::deno_core::serde_json::Value;
+use ::deno_core::ModuleSpecifier;
 use indexmap::IndexMap;
 use serde::Serialize;
 use std::cell::RefCell;
--- a/ext/node/resolution.rs
+++ b/ext/node/resolution.rs
@@ -3,19 +3,19 @@
 use std::path::Path;
 use std::path::PathBuf;
 
-use deno_core::anyhow::bail;
-use deno_core::anyhow::Context;
-use deno_core::error::generic_error;
-use deno_core::error::AnyError;
-use deno_core::serde_json::Map;
-use deno_core::serde_json::Value;
-use deno_core::url::Url;
-use deno_core::ModuleSpecifier;
-use deno_fs::FileSystemRc;
-use deno_media_type::MediaType;
-use deno_semver::npm::NpmPackageNv;
-use deno_semver::npm::NpmPackageNvReference;
-use deno_semver::npm::NpmPackageReqReference;
+use ::deno_core::anyhow::bail;
+use ::deno_core::anyhow::Context;
+use ::deno_core::error::generic_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::serde_json::Map;
+use ::deno_core::serde_json::Value;
+use ::deno_core::url::Url;
+use ::deno_core::ModuleSpecifier;
+use ::deno_fs::FileSystemRc;
+use ::deno_media_type::MediaType;
+use ::deno_semver::npm::NpmPackageNv;
+use ::deno_semver::npm::NpmPackageNvReference;
+use ::deno_semver::npm::NpmPackageReqReference;
 
 use crate::errors;
 use crate::AllowAllNodePermissions;
@@ -1504,7 +1504,7 @@ fn pattern_key_compare(a: &str, b: &str) -> i32 {
 
 #[cfg(test)]
 mod tests {
-  use deno_core::serde_json::json;
+  use ::deno_core::serde_json::json;
 
   use super::*;
 
--- a/ext/tls/lib.rs
+++ b/ext/tls/lib.rs
@@ -6,9 +6,9 @@ pub use rustls_pemfile;
 pub use webpki;
 pub use webpki_roots;
 
-use deno_core::anyhow::anyhow;
-use deno_core::error::custom_error;
-use deno_core::error::AnyError;
+use ::deno_core::anyhow::anyhow;
+use ::deno_core::error::custom_error;
+use ::deno_core::error::AnyError;
 
 use rustls::client::HandshakeSignatureValid;
 use rustls::client::ServerCertVerified;
--- a/ext/url/benches/url_ops.rs
+++ b/ext/url/benches/url_ops.rs
@@ -1,13 +1,13 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_bench_util::bench_js_sync;
-use deno_bench_util::bench_or_profile;
-use deno_bench_util::bencher::benchmark_group;
-use deno_bench_util::bencher::Bencher;
+use ::deno_bench_util::bench_js_sync;
+use ::deno_bench_util::bench_or_profile;
+use ::deno_bench_util::bencher::benchmark_group;
+use ::deno_bench_util::bencher::Bencher;
 
-use deno_core::Extension;
-use deno_core::ExtensionFileSource;
-use deno_core::ExtensionFileSourceCode;
+use ::deno_core::Extension;
+use ::deno_core::ExtensionFileSource;
+use ::deno_core::ExtensionFileSourceCode;
 
 fn setup() -> Vec<Extension> {
   vec![
--- a/ext/url/lib.rs
+++ b/ext/url/lib.rs
@@ -2,14 +2,14 @@
 
 mod urlpattern;
 
-use deno_core::error::type_error;
-use deno_core::error::AnyError;
-use deno_core::op;
-use deno_core::url::form_urlencoded;
-use deno_core::url::quirks;
-use deno_core::url::Url;
-use deno_core::OpState;
-use deno_core::ZeroCopyBuf;
+use ::deno_core::error::type_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::op;
+use ::deno_core::url::form_urlencoded;
+use ::deno_core::url::quirks;
+use ::deno_core::url::Url;
+use ::deno_core::OpState;
+use ::deno_core::ZeroCopyBuf;
 use std::path::PathBuf;
 
 use crate::urlpattern::op_urlpattern_parse;
--- a/ext/url/urlpattern.rs
+++ b/ext/url/urlpattern.rs
@@ -1,8 +1,8 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_core::error::type_error;
-use deno_core::error::AnyError;
-use deno_core::op;
+use ::deno_core::error::type_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::op;
 
 use urlpattern::quirks;
 use urlpattern::quirks::MatchInput;
--- a/ext/web/benches/encoding.rs
+++ b/ext/web/benches/encoding.rs
@@ -1,14 +1,14 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_bench_util::bench_js_sync;
-use deno_bench_util::bench_or_profile;
-use deno_bench_util::bencher::benchmark_group;
-use deno_bench_util::bencher::Bencher;
-use deno_core::Extension;
-use deno_core::ExtensionFileSource;
-use deno_core::ExtensionFileSourceCode;
-use deno_core::OpState;
-use deno_web::BlobStore;
+use ::deno_bench_util::bench_js_sync;
+use ::deno_bench_util::bench_or_profile;
+use ::deno_bench_util::bencher::benchmark_group;
+use ::deno_bench_util::bencher::Bencher;
+use ::deno_core::Extension;
+use ::deno_core::ExtensionFileSource;
+use ::deno_core::ExtensionFileSourceCode;
+use ::deno_core::OpState;
+use ::deno_web::BlobStore;
 
 #[derive(Clone)]
 struct Permissions;
--- a/ext/web/benches/timers_ops.rs
+++ b/ext/web/benches/timers_ops.rs
@@ -1,14 +1,14 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_bench_util::bench_js_async;
-use deno_bench_util::bench_or_profile;
-use deno_bench_util::bencher::benchmark_group;
-use deno_bench_util::bencher::Bencher;
-use deno_core::Extension;
-use deno_core::ExtensionFileSource;
-use deno_core::ExtensionFileSourceCode;
-use deno_core::OpState;
-use deno_web::BlobStore;
+use ::deno_bench_util::bench_js_async;
+use ::deno_bench_util::bench_or_profile;
+use ::deno_bench_util::bencher::benchmark_group;
+use ::deno_bench_util::bencher::Bencher;
+use ::deno_core::Extension;
+use ::deno_core::ExtensionFileSource;
+use ::deno_core::ExtensionFileSourceCode;
+use ::deno_core::OpState;
+use ::deno_web::BlobStore;
 
 #[derive(Clone)]
 struct Permissions;
--- a/ext/web/blob.rs
+++ b/ext/web/blob.rs
@@ -7,13 +7,13 @@ use std::rc::Rc;
 use std::sync::Arc;
 
 use async_trait::async_trait;
-use deno_core::error::type_error;
-use deno_core::error::AnyError;
-use deno_core::op;
-use deno_core::parking_lot::Mutex;
-use deno_core::url::Url;
-use deno_core::OpState;
-use deno_core::ZeroCopyBuf;
+use ::deno_core::error::type_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::op;
+use ::deno_core::parking_lot::Mutex;
+use ::deno_core::url::Url;
+use ::deno_core::OpState;
+use ::deno_core::ZeroCopyBuf;
 use serde::Deserialize;
 use serde::Serialize;
 use uuid::Uuid;
--- a/ext/web/compression.rs
+++ b/ext/web/compression.rs
@@ -1,11 +1,11 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_core::error::AnyError;
-use deno_core::op;
-use deno_core::OpState;
-use deno_core::Resource;
-use deno_core::ResourceId;
-use deno_core::ZeroCopyBuf;
+use ::deno_core::error::AnyError;
+use ::deno_core::op;
+use ::deno_core::OpState;
+use ::deno_core::Resource;
+use ::deno_core::ResourceId;
+use ::deno_core::ZeroCopyBuf;
 use flate2::write::DeflateDecoder;
 use flate2::write::DeflateEncoder;
 use flate2::write::GzDecoder;
--- a/ext/web/lib.rs
+++ b/ext/web/lib.rs
@@ -6,20 +6,20 @@ mod hr_timer_lock;
 mod message_port;
 mod timers;
 
-use deno_core::error::range_error;
-use deno_core::error::type_error;
-use deno_core::error::AnyError;
-use deno_core::op;
-use deno_core::serde_v8;
-use deno_core::url::Url;
-use deno_core::v8;
-use deno_core::ByteString;
-use deno_core::CancelHandle;
-use deno_core::OpState;
-use deno_core::Resource;
-use deno_core::ResourceId;
-use deno_core::U16String;
-use deno_core::ZeroCopyBuf;
+use ::deno_core::error::range_error;
+use ::deno_core::error::type_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::op;
+use ::deno_core::serde_v8;
+use ::deno_core::url::Url;
+use ::deno_core::v8;
+use ::deno_core::ByteString;
+use ::deno_core::CancelHandle;
+use ::deno_core::OpState;
+use ::deno_core::Resource;
+use ::deno_core::ResourceId;
+use ::deno_core::U16String;
+use ::deno_core::ZeroCopyBuf;
 
 use encoding_rs::CoderResult;
 use encoding_rs::Decoder;
--- a/ext/web/message_port.rs
+++ b/ext/web/message_port.rs
@@ -4,17 +4,17 @@ use std::borrow::Cow;
 use std::cell::RefCell;
 use std::rc::Rc;
 
-use deno_core::error::type_error;
-use deno_core::error::AnyError;
-use deno_core::op;
+use ::deno_core::error::type_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::op;
 
-use deno_core::CancelFuture;
-use deno_core::CancelHandle;
-use deno_core::DetachedBuffer;
-use deno_core::OpState;
-use deno_core::RcRef;
-use deno_core::Resource;
-use deno_core::ResourceId;
+use ::deno_core::CancelFuture;
+use ::deno_core::CancelHandle;
+use ::deno_core::DetachedBuffer;
+use ::deno_core::OpState;
+use ::deno_core::RcRef;
+use ::deno_core::Resource;
+use ::deno_core::ResourceId;
 use serde::Deserialize;
 use serde::Serialize;
 use tokio::sync::mpsc::unbounded_channel;
--- a/ext/web/timers.rs
+++ b/ext/web/timers.rs
@@ -3,13 +3,13 @@
 //! This module helps deno implement timers and performance APIs.
 
 use crate::hr_timer_lock::hr_timer_lock;
-use deno_core::error::AnyError;
-use deno_core::op;
-use deno_core::CancelFuture;
-use deno_core::CancelHandle;
-use deno_core::OpState;
-use deno_core::Resource;
-use deno_core::ResourceId;
+use ::deno_core::error::AnyError;
+use ::deno_core::op;
+use ::deno_core::CancelFuture;
+use ::deno_core::CancelHandle;
+use ::deno_core::OpState;
+use ::deno_core::Resource;
+use ::deno_core::ResourceId;
 use std::borrow::Cow;
 use std::cell::RefCell;
 use std::rc::Rc;
--- a/ext/webidl/benches/dict.rs
+++ b/ext/webidl/benches/dict.rs
@@ -1,13 +1,13 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_bench_util::bench_js_sync;
-use deno_bench_util::bench_or_profile;
-use deno_bench_util::bencher::benchmark_group;
-use deno_bench_util::bencher::Bencher;
+use ::deno_bench_util::bench_js_sync;
+use ::deno_bench_util::bench_or_profile;
+use ::deno_bench_util::bencher::benchmark_group;
+use ::deno_bench_util::bencher::Bencher;
 
-use deno_core::Extension;
-use deno_core::ExtensionFileSource;
-use deno_core::ExtensionFileSourceCode;
+use ::deno_core::Extension;
+use ::deno_core::ExtensionFileSource;
+use ::deno_core::ExtensionFileSourceCode;
 
 fn setup() -> Vec<Extension> {
   vec![
--- a/ext/websocket/lib.rs
+++ b/ext/websocket/lib.rs
@@ -1,24 +1,24 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 use crate::stream::WebSocketStream;
 use bytes::Bytes;
-use deno_core::error::invalid_hostname;
-use deno_core::error::type_error;
-use deno_core::error::AnyError;
-use deno_core::op;
-use deno_core::url;
-use deno_core::AsyncMutFuture;
-use deno_core::AsyncRefCell;
-use deno_core::ByteString;
-use deno_core::CancelFuture;
-use deno_core::CancelHandle;
-use deno_core::OpState;
-use deno_core::RcRef;
-use deno_core::Resource;
-use deno_core::ResourceId;
-use deno_core::ZeroCopyBuf;
-use deno_net::raw::NetworkStream;
-use deno_tls::create_client_config;
-use deno_tls::RootCertStoreProvider;
+use ::deno_core::error::invalid_hostname;
+use ::deno_core::error::type_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::op;
+use ::deno_core::url;
+use ::deno_core::AsyncMutFuture;
+use ::deno_core::AsyncRefCell;
+use ::deno_core::ByteString;
+use ::deno_core::CancelFuture;
+use ::deno_core::CancelHandle;
+use ::deno_core::OpState;
+use ::deno_core::RcRef;
+use ::deno_core::Resource;
+use ::deno_core::ResourceId;
+use ::deno_core::ZeroCopyBuf;
+use ::deno_net::raw::NetworkStream;
+use ::deno_tls::create_client_config;
+use ::deno_tls::RootCertStoreProvider;
 use http::header::CONNECTION;
 use http::header::UPGRADE;
 use http::HeaderName;
--- a/ext/websocket/stream.rs
+++ b/ext/websocket/stream.rs
@@ -1,7 +1,7 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 use bytes::Buf;
 use bytes::Bytes;
-use deno_net::raw::NetworkStream;
+use ::deno_net::raw::NetworkStream;
 use hyper::upgrade::Upgraded;
 use std::pin::Pin;
 use std::task::Poll;
--- a/ext/webstorage/lib.rs
+++ b/ext/webstorage/lib.rs
@@ -5,9 +5,9 @@
 use std::fmt;
 use std::path::PathBuf;
 
-use deno_core::error::AnyError;
-use deno_core::op;
-use deno_core::OpState;
+use ::deno_core::error::AnyError;
+use ::deno_core::op;
+use ::deno_core::OpState;
 use rusqlite::params;
 use rusqlite::Connection;
 use rusqlite::OptionalExtension;
--- a/ops/tests/compile_fail/mem_slices.rs
+++ b/ops/tests/compile_fail/mem_slices.rs
@@ -1,6 +1,6 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_ops::op;
+use ::deno_ops::op;
 
 #[op]
 fn sync_test(slice: &mut [u32]) {
--- a/runtime/build.rs
+++ b/runtime/build.rs
@@ -9,16 +9,16 @@ use std::path::PathBuf;
 ))]
 mod startup_snapshot {
   use super::*;
-  use deno_ast::MediaType;
-  use deno_ast::ParseParams;
-  use deno_ast::SourceTextInfo;
-  use deno_cache::SqliteBackedCache;
-  use deno_core::error::AnyError;
-  use deno_core::snapshot_util::*;
-  use deno_core::Extension;
-  use deno_core::ExtensionFileSource;
-  use deno_core::ModuleCode;
-  use deno_http::DefaultHttpPropertyExtractor;
+  use ::deno_ast::MediaType;
+  use ::deno_ast::ParseParams;
+  use ::deno_ast::SourceTextInfo;
+  use ::deno_cache::SqliteBackedCache;
+  use ::deno_core::error::AnyError;
+  use ::deno_core::snapshot_util::*;
+  use ::deno_core::Extension;
+  use ::deno_core::ExtensionFileSource;
+  use ::deno_core::ModuleCode;
+  use ::deno_http::DefaultHttpPropertyExtractor;
   use std::path::Path;
 
   fn transpile_ts_for_snapshotting(
--- a/runtime/errors.rs
+++ b/runtime/errors.rs
@@ -9,11 +9,11 @@
 //!   Diagnostics are compile-time type errors, whereas JsErrors are runtime
 //!   exceptions.
 
-use deno_core::error::AnyError;
-use deno_core::serde_json;
-use deno_core::url;
-use deno_core::ModuleResolutionError;
-use deno_fetch::reqwest;
+use ::deno_core::error::AnyError;
+use ::deno_core::serde_json;
+use ::deno_core::url;
+use ::deno_core::ModuleResolutionError;
+use ::deno_fetch::reqwest;
 use std::env;
 use std::error::Error;
 use std::io;
@@ -116,7 +116,7 @@ fn get_request_error_class(error: &reqwest::Error) -> &'static str {
 fn get_serde_json_error_class(
   error: &serde_json::error::Error,
 ) -> &'static str {
-  use deno_core::serde_json::error::*;
+  use ::deno_core::serde_json::error::*;
   match error.classify() {
     Category::Io => error
       .source()
--- a/runtime/examples/extension_with_esm/main.rs
+++ b/runtime/examples/extension_with_esm/main.rs
@@ -3,12 +3,12 @@
 use std::path::Path;
 use std::rc::Rc;
 
-use deno_core::error::AnyError;
-use deno_core::FsModuleLoader;
-use deno_core::ModuleSpecifier;
-use deno_runtime::permissions::PermissionsContainer;
-use deno_runtime::worker::MainWorker;
-use deno_runtime::worker::WorkerOptions;
+use ::deno_core::error::AnyError;
+use ::deno_core::FsModuleLoader;
+use ::deno_core::ModuleSpecifier;
+use ::deno_runtime::permissions::PermissionsContainer;
+use ::deno_runtime::worker::MainWorker;
+use ::deno_runtime::worker::WorkerOptions;
 
 deno_core::extension!(
   hello_runtime,
--- a/runtime/examples/extension_with_ops/main.rs
+++ b/runtime/examples/extension_with_ops/main.rs
@@ -3,13 +3,13 @@
 use std::path::Path;
 use std::rc::Rc;
 
-use deno_core::error::AnyError;
-use deno_core::op;
-use deno_core::FsModuleLoader;
-use deno_core::ModuleSpecifier;
-use deno_runtime::permissions::PermissionsContainer;
-use deno_runtime::worker::MainWorker;
-use deno_runtime::worker::WorkerOptions;
+use ::deno_core::error::AnyError;
+use ::deno_core::op;
+use ::deno_core::FsModuleLoader;
+use ::deno_core::ModuleSpecifier;
+use ::deno_runtime::permissions::PermissionsContainer;
+use ::deno_runtime::worker::MainWorker;
+use ::deno_runtime::worker::WorkerOptions;
 
 deno_core::extension!(hello_runtime, ops = [op_hello]);
 
--- a/runtime/fmt_errors.rs
+++ b/runtime/fmt_errors.rs
@@ -4,9 +4,9 @@ use crate::colors::cyan;
 use crate::colors::italic_bold;
 use crate::colors::red;
 use crate::colors::yellow;
-use deno_core::error::format_file_name;
-use deno_core::error::JsError;
-use deno_core::error::JsStackFrame;
+use ::deno_core::error::format_file_name;
+use ::deno_core::error::JsError;
+use ::deno_core::error::JsStackFrame;
 use std::fmt::Write as _;
 
 /// Compares all properties of JsError, except for JsError::cause.
--- a/runtime/fs_util.rs
+++ b/runtime/fs_util.rs
@@ -1,8 +1,8 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_core::anyhow::Context;
-use deno_core::error::AnyError;
-pub use deno_core::normalize_path;
+use ::deno_core::anyhow::Context;
+use ::deno_core::error::AnyError;
+pub use ::deno_core::normalize_path;
 use std::path::Path;
 use std::path::PathBuf;
 
--- a/runtime/inspector_server.rs
+++ b/runtime/inspector_server.rs
@@ -2,23 +2,23 @@
 
 // Alias for the future `!` type.
 use core::convert::Infallible as Never;
-use deno_core::futures::channel::mpsc;
-use deno_core::futures::channel::mpsc::UnboundedReceiver;
-use deno_core::futures::channel::mpsc::UnboundedSender;
-use deno_core::futures::channel::oneshot;
-use deno_core::futures::future;
-use deno_core::futures::future::Future;
-use deno_core::futures::prelude::*;
-use deno_core::futures::select;
-use deno_core::futures::stream::StreamExt;
-use deno_core::futures::task::Poll;
-use deno_core::serde_json;
-use deno_core::serde_json::json;
-use deno_core::serde_json::Value;
-use deno_core::task::spawn;
-use deno_core::InspectorMsg;
-use deno_core::InspectorSessionProxy;
-use deno_core::JsRuntime;
+use ::deno_core::futures::channel::mpsc;
+use ::deno_core::futures::channel::mpsc::UnboundedReceiver;
+use ::deno_core::futures::channel::mpsc::UnboundedSender;
+use ::deno_core::futures::channel::oneshot;
+use ::deno_core::futures::future;
+use ::deno_core::futures::future::Future;
+use ::deno_core::futures::prelude::*;
+use ::deno_core::futures::select;
+use ::deno_core::futures::stream::StreamExt;
+use ::deno_core::futures::task::Poll;
+use ::deno_core::serde_json;
+use ::deno_core::serde_json::json;
+use ::deno_core::serde_json::Value;
+use ::deno_core::task::spawn;
+use ::deno_core::InspectorMsg;
+use ::deno_core::InspectorSessionProxy;
+use ::deno_core::JsRuntime;
 use fastwebsockets::Frame;
 use fastwebsockets::OpCode;
 use fastwebsockets::WebSocket;
--- a/runtime/js.rs
+++ b/runtime/js.rs
@@ -1,6 +1,6 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 #[cfg(not(feature = "dont_create_runtime_snapshot"))]
-use deno_core::Snapshot;
+use ::deno_core::Snapshot;
 #[cfg(not(feature = "dont_create_runtime_snapshot"))]
 use log::debug;
 
--- a/runtime/lib.rs
+++ b/runtime/lib.rs
@@ -1,25 +1,25 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-pub use deno_broadcast_channel;
-pub use deno_cache;
-pub use deno_console;
-pub use deno_core;
-pub use deno_crypto;
-pub use deno_fetch;
-pub use deno_ffi;
-pub use deno_fs;
-pub use deno_http;
-pub use deno_io;
-pub use deno_kv;
-pub use deno_napi;
-pub use deno_net;
-pub use deno_node;
-pub use deno_tls;
-pub use deno_url;
-pub use deno_web;
-pub use deno_webidl;
-pub use deno_websocket;
-pub use deno_webstorage;
+pub use ::deno_broadcast_channel;
+pub use ::deno_cache;
+pub use ::deno_console;
+pub use ::deno_core;
+pub use ::deno_crypto;
+pub use ::deno_fetch;
+pub use ::deno_ffi;
+pub use ::deno_fs;
+pub use ::deno_http;
+pub use ::deno_io;
+pub use ::deno_kv;
+pub use ::deno_napi;
+pub use ::deno_net;
+pub use ::deno_node;
+pub use ::deno_tls;
+pub use ::deno_url;
+pub use ::deno_web;
+pub use ::deno_webidl;
+pub use ::deno_websocket;
+pub use ::deno_webstorage;
 
 pub mod colors;
 pub mod errors;
--- a/runtime/ops/fs_events.rs
+++ b/runtime/ops/fs_events.rs
@@ -1,17 +1,17 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
 use crate::permissions::PermissionsContainer;
-use deno_core::error::AnyError;
-use deno_core::parking_lot::Mutex;
-use deno_core::AsyncRefCell;
-use deno_core::CancelFuture;
-use deno_core::CancelHandle;
-use deno_core::OpState;
-use deno_core::RcRef;
-use deno_core::Resource;
-use deno_core::ResourceId;
+use ::deno_core::error::AnyError;
+use ::deno_core::parking_lot::Mutex;
+use ::deno_core::AsyncRefCell;
+use ::deno_core::CancelFuture;
+use ::deno_core::CancelHandle;
+use ::deno_core::OpState;
+use ::deno_core::RcRef;
+use ::deno_core::Resource;
+use ::deno_core::ResourceId;
 
-use deno_core::op;
+use ::deno_core::op;
 
 use notify::event::Event as NotifyEvent;
 use notify::Error as NotifyError;
--- a/runtime/ops/http.rs
+++ b/runtime/ops/http.rs
@@ -3,27 +3,27 @@
 use std::cell::RefCell;
 use std::rc::Rc;
 
-use deno_core::error::bad_resource;
-use deno_core::error::bad_resource_id;
-use deno_core::error::custom_error;
-use deno_core::error::AnyError;
-use deno_core::op;
-use deno_core::OpState;
-use deno_core::RcRef;
-use deno_core::ResourceId;
-use deno_core::ZeroCopyBuf;
-use deno_http::http_create_conn_resource;
-use deno_http::HttpRequestReader;
-use deno_http::HttpStreamResource;
-use deno_net::io::TcpStreamResource;
-use deno_net::ops_tls::TlsStream;
-use deno_net::ops_tls::TlsStreamResource;
+use ::deno_core::error::bad_resource;
+use ::deno_core::error::bad_resource_id;
+use ::deno_core::error::custom_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::op;
+use ::deno_core::OpState;
+use ::deno_core::RcRef;
+use ::deno_core::ResourceId;
+use ::deno_core::ZeroCopyBuf;
+use ::deno_http::http_create_conn_resource;
+use ::deno_http::HttpRequestReader;
+use ::deno_http::HttpStreamResource;
+use ::deno_net::io::TcpStreamResource;
+use ::deno_net::ops_tls::TlsStream;
+use ::deno_net::ops_tls::TlsStreamResource;
 use hyper::upgrade::Parts;
 use serde::Serialize;
 use tokio::net::TcpStream;
 
 #[cfg(unix)]
-use deno_net::io::UnixStreamResource;
+use ::deno_net::io::UnixStreamResource;
 #[cfg(unix)]
 use tokio::net::UnixStream;
 
--- a/runtime/ops/mod.rs
+++ b/runtime/ops/mod.rs
@@ -12,7 +12,7 @@ mod utils;
 pub mod web_worker;
 pub mod worker_host;
 
-use deno_core::OpState;
+use ::deno_core::OpState;
 use std::cell::RefCell;
 use std::rc::Rc;
 
--- a/runtime/ops/os/mod.rs
+++ b/runtime/ops/os/mod.rs
@@ -3,13 +3,13 @@
 use super::utils::into_string;
 use crate::permissions::PermissionsContainer;
 use crate::worker::ExitCode;
-use deno_core::error::type_error;
-use deno_core::error::AnyError;
-use deno_core::op;
-use deno_core::url::Url;
-use deno_core::v8;
-use deno_core::OpState;
-use deno_node::NODE_ENV_VAR_ALLOWLIST;
+use ::deno_core::error::type_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::op;
+use ::deno_core::url::Url;
+use ::deno_core::v8;
+use ::deno_core::OpState;
+use ::deno_node::NODE_ENV_VAR_ALLOWLIST;
 use serde::Serialize;
 use std::collections::HashMap;
 use std::env;
--- a/runtime/ops/permissions.rs
+++ b/runtime/ops/permissions.rs
@@ -2,12 +2,12 @@
 
 use crate::permissions::parse_sys_kind;
 use crate::permissions::PermissionsContainer;
-use deno_core::error::custom_error;
-use deno_core::error::uri_error;
-use deno_core::error::AnyError;
-use deno_core::op;
-use deno_core::url;
-use deno_core::OpState;
+use ::deno_core::error::custom_error;
+use ::deno_core::error::uri_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::op;
+use ::deno_core::url;
+use ::deno_core::OpState;
 use serde::Deserialize;
 use std::path::Path;
 
--- a/runtime/ops/process.rs
+++ b/runtime/ops/process.rs
@@ -2,21 +2,21 @@
 
 use super::check_unstable;
 use crate::permissions::PermissionsContainer;
-use deno_core::error::type_error;
-use deno_core::error::AnyError;
-use deno_core::op;
-use deno_core::serde_json;
-use deno_core::AsyncMutFuture;
-use deno_core::AsyncRefCell;
-use deno_core::OpState;
-use deno_core::RcRef;
-use deno_core::Resource;
-use deno_core::ResourceId;
-use deno_core::ZeroCopyBuf;
-use deno_io::fs::FileResource;
-use deno_io::ChildStderrResource;
-use deno_io::ChildStdinResource;
-use deno_io::ChildStdoutResource;
+use ::deno_core::error::type_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::op;
+use ::deno_core::serde_json;
+use ::deno_core::AsyncMutFuture;
+use ::deno_core::AsyncRefCell;
+use ::deno_core::OpState;
+use ::deno_core::RcRef;
+use ::deno_core::Resource;
+use ::deno_core::ResourceId;
+use ::deno_core::ZeroCopyBuf;
+use ::deno_io::fs::FileResource;
+use ::deno_io::ChildStderrResource;
+use ::deno_io::ChildStdinResource;
+use ::deno_io::ChildStdoutResource;
 use serde::Deserialize;
 use serde::Serialize;
 use std::borrow::Cow;
--- a/runtime/ops/runtime.rs
+++ b/runtime/ops/runtime.rs
@@ -1,10 +1,10 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
 use crate::permissions::PermissionsContainer;
-use deno_core::error::AnyError;
-use deno_core::op;
-use deno_core::ModuleSpecifier;
-use deno_core::OpState;
+use ::deno_core::error::AnyError;
+use ::deno_core::op;
+use ::deno_core::ModuleSpecifier;
+use ::deno_core::OpState;
 
 deno_core::extension!(
   deno_runtime,
--- a/runtime/ops/signal.rs
+++ b/runtime/ops/signal.rs
@@ -1,14 +1,14 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
-use deno_core::error::type_error;
-use deno_core::error::AnyError;
-use deno_core::op;
-use deno_core::AsyncRefCell;
-use deno_core::CancelFuture;
-use deno_core::CancelHandle;
-use deno_core::OpState;
-use deno_core::RcRef;
-use deno_core::Resource;
-use deno_core::ResourceId;
+use ::deno_core::error::type_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::op;
+use ::deno_core::AsyncRefCell;
+use ::deno_core::CancelFuture;
+use ::deno_core::CancelHandle;
+use ::deno_core::OpState;
+use ::deno_core::RcRef;
+use ::deno_core::Resource;
+use ::deno_core::ResourceId;
 
 use std::borrow::Cow;
 use std::cell::RefCell;
--- a/runtime/ops/tty.rs
+++ b/runtime/ops/tty.rs
@@ -3,15 +3,15 @@
 use std::io::Error;
 use std::rc::Rc;
 
-use deno_core::error::resource_unavailable;
-use deno_core::error::AnyError;
-use deno_core::op;
-use deno_core::OpState;
-use deno_core::Resource;
-use deno_io::fs::FileResource;
+use ::deno_core::error::resource_unavailable;
+use ::deno_core::error::AnyError;
+use ::deno_core::op;
+use ::deno_core::OpState;
+use ::deno_core::Resource;
+use ::deno_io::fs::FileResource;
 
 #[cfg(unix)]
-use deno_core::ResourceId;
+use ::deno_core::ResourceId;
 #[cfg(unix)]
 use nix::sys::termios;
 #[cfg(unix)]
@@ -39,7 +39,7 @@ impl TtyModeStore {
 }
 
 #[cfg(windows)]
-use deno_core::error::custom_error;
+use ::deno_core::error::custom_error;
 #[cfg(windows)]
 use winapi::shared::minwindef::DWORD;
 #[cfg(windows)]
--- a/runtime/ops/utils.rs
+++ b/runtime/ops/utils.rs
@@ -1,7 +1,7 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_core::error::custom_error;
-use deno_core::error::AnyError;
+use ::deno_core::error::custom_error;
+use ::deno_core::error::AnyError;
 
 /// A utility function to map OsStrings to Strings
 pub fn into_string(s: std::ffi::OsString) -> Result<String, AnyError> {
--- a/runtime/ops/web_worker.rs
+++ b/runtime/ops/web_worker.rs
@@ -4,12 +4,12 @@ mod sync_fetch;
 
 use crate::web_worker::WebWorkerInternalHandle;
 use crate::web_worker::WebWorkerType;
-use deno_core::error::AnyError;
-use deno_core::op;
+use ::deno_core::error::AnyError;
+use ::deno_core::op;
 
-use deno_core::CancelFuture;
-use deno_core::OpState;
-use deno_web::JsMessageData;
+use ::deno_core::CancelFuture;
+use ::deno_core::OpState;
+use ::deno_web::JsMessageData;
 use std::cell::RefCell;
 use std::rc::Rc;
 
--- a/runtime/ops/web_worker/sync_fetch.rs
+++ b/runtime/ops/web_worker/sync_fetch.rs
@@ -2,14 +2,14 @@
 
 use crate::web_worker::WebWorkerInternalHandle;
 use crate::web_worker::WebWorkerType;
-use deno_core::error::type_error;
-use deno_core::error::AnyError;
-use deno_core::op;
-use deno_core::url::Url;
-use deno_core::OpState;
-use deno_fetch::data_url::DataUrl;
-use deno_web::BlobStore;
-use deno_websocket::DomExceptionNetworkError;
+use ::deno_core::error::type_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::op;
+use ::deno_core::url::Url;
+use ::deno_core::OpState;
+use ::deno_fetch::data_url::DataUrl;
+use ::deno_web::BlobStore;
+use ::deno_websocket::DomExceptionNetworkError;
 use hyper::body::Bytes;
 use serde::Deserialize;
 use serde::Serialize;
--- a/runtime/ops/worker_host.rs
+++ b/runtime/ops/worker_host.rs
@@ -12,15 +12,15 @@ use crate::web_worker::WebWorkerType;
 use crate::web_worker::WorkerControlEvent;
 use crate::web_worker::WorkerId;
 use crate::worker::FormatJsErrorFn;
-use deno_core::error::AnyError;
-use deno_core::futures::future::LocalFutureObj;
-use deno_core::op;
-use deno_core::serde::Deserialize;
-use deno_core::CancelFuture;
-use deno_core::CancelHandle;
-use deno_core::ModuleSpecifier;
-use deno_core::OpState;
-use deno_web::JsMessageData;
+use ::deno_core::error::AnyError;
+use ::deno_core::futures::future::LocalFutureObj;
+use ::deno_core::op;
+use ::deno_core::serde::Deserialize;
+use ::deno_core::CancelFuture;
+use ::deno_core::CancelHandle;
+use ::deno_core::ModuleSpecifier;
+use ::deno_core::OpState;
+use ::deno_web::JsMessageData;
 use log::debug;
 use std::cell::RefCell;
 use std::collections::HashMap;
--- a/runtime/permissions/mod.rs
+++ b/runtime/permissions/mod.rs
@@ -2,20 +2,20 @@
 
 use crate::colors;
 use crate::fs_util::resolve_from_cwd;
-use deno_core::error::custom_error;
-use deno_core::error::type_error;
-use deno_core::error::uri_error;
-use deno_core::error::AnyError;
-use deno_core::parking_lot::Mutex;
-use deno_core::serde::de;
-use deno_core::serde::Deserialize;
-use deno_core::serde::Deserializer;
-use deno_core::serde::Serialize;
-use deno_core::serde_json;
-use deno_core::url;
-use deno_core::url::Url;
-use deno_core::ModuleSpecifier;
-use deno_core::OpState;
+use ::deno_core::error::custom_error;
+use ::deno_core::error::type_error;
+use ::deno_core::error::uri_error;
+use ::deno_core::error::AnyError;
+use ::deno_core::parking_lot::Mutex;
+use ::deno_core::serde::de;
+use ::deno_core::serde::Deserialize;
+use ::deno_core::serde::Deserializer;
+use ::deno_core::serde::Serialize;
+use ::deno_core::serde_json;
+use ::deno_core::url;
+use ::deno_core::url::Url;
+use ::deno_core::ModuleSpecifier;
+use ::deno_core::OpState;
 use log;
 use once_cell::sync::Lazy;
 use std::borrow::Cow;
@@ -2619,7 +2619,7 @@ pub fn create_child_permissions(
 #[cfg(test)]
 mod tests {
   use super::*;
-  use deno_core::serde_json::json;
+  use ::deno_core::serde_json::json;
   use prompter::tests::*;
 
   // Creates vector of strings, Vec<String>
--- a/runtime/permissions/prompter.rs
+++ b/runtime/permissions/prompter.rs
@@ -1,8 +1,8 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
 use crate::colors;
-use deno_core::error::AnyError;
-use deno_core::parking_lot::Mutex;
+use ::deno_core::error::AnyError;
+use ::deno_core::parking_lot::Mutex;
 use once_cell::sync::Lazy;
 use std::fmt::Write;
 use std::io::BufRead;
@@ -105,7 +105,7 @@ impl PermissionPrompter for TtyPrompter {
       stdin_lock: &mut StdinLock,
       stderr_lock: &mut StderrLock,
     ) -> Result<(), AnyError> {
-      use deno_core::anyhow::bail;
+      use ::deno_core::anyhow::bail;
       use winapi::shared::minwindef::TRUE;
       use winapi::shared::minwindef::UINT;
       use winapi::shared::minwindef::WORD;
--- a/runtime/tokio_util.rs
+++ b/runtime/tokio_util.rs
@@ -2,7 +2,7 @@
 use std::fmt::Debug;
 use std::str::FromStr;
 
-use deno_core::task::MaskFutureAsSend;
+use ::deno_core::task::MaskFutureAsSend;
 use tokio_metrics::RuntimeMonitor;
 
 /// Default configuration for tokio. In the future, this method may have different defaults
--- a/runtime/web_worker.rs
+++ b/runtime/web_worker.rs
@@ -6,42 +6,42 @@ use crate::permissions::PermissionsContainer;
 use crate::tokio_util::create_and_run_current_thread;
 use crate::worker::FormatJsErrorFn;
 use crate::BootstrapOptions;
-use deno_broadcast_channel::InMemoryBroadcastChannel;
-use deno_cache::CreateCache;
-use deno_cache::SqliteBackedCache;
-use deno_core::ascii_str;
-use deno_core::error::AnyError;
-use deno_core::error::JsError;
-use deno_core::futures::channel::mpsc;
-use deno_core::futures::future::poll_fn;
-use deno_core::futures::stream::StreamExt;
-use deno_core::futures::task::AtomicWaker;
-use deno_core::located_script_name;
-use deno_core::serde::Deserialize;
-use deno_core::serde::Serialize;
-use deno_core::serde_json::json;
-use deno_core::v8;
-use deno_core::CancelHandle;
-use deno_core::CompiledWasmModuleStore;
-use deno_core::Extension;
-use deno_core::GetErrorClassFn;
-use deno_core::JsRuntime;
-use deno_core::ModuleCode;
-use deno_core::ModuleId;
-use deno_core::ModuleLoader;
-use deno_core::ModuleSpecifier;
-use deno_core::RuntimeOptions;
-use deno_core::SharedArrayBufferStore;
-use deno_core::Snapshot;
-use deno_core::SourceMapGetter;
-use deno_fs::FileSystem;
-use deno_http::DefaultHttpPropertyExtractor;
-use deno_io::Stdio;
-use deno_kv::sqlite::SqliteDbHandler;
-use deno_tls::RootCertStoreProvider;
-use deno_web::create_entangled_message_port;
-use deno_web::BlobStore;
-use deno_web::MessagePort;
+use ::deno_broadcast_channel::InMemoryBroadcastChannel;
+use ::deno_cache::CreateCache;
+use ::deno_cache::SqliteBackedCache;
+use ::deno_core::ascii_str;
+use ::deno_core::error::AnyError;
+use ::deno_core::error::JsError;
+use ::deno_core::futures::channel::mpsc;
+use ::deno_core::futures::future::poll_fn;
+use ::deno_core::futures::stream::StreamExt;
+use ::deno_core::futures::task::AtomicWaker;
+use ::deno_core::located_script_name;
+use ::deno_core::serde::Deserialize;
+use ::deno_core::serde::Serialize;
+use ::deno_core::serde_json::json;
+use ::deno_core::v8;
+use ::deno_core::CancelHandle;
+use ::deno_core::CompiledWasmModuleStore;
+use ::deno_core::Extension;
+use ::deno_core::GetErrorClassFn;
+use ::deno_core::JsRuntime;
+use ::deno_core::ModuleCode;
+use ::deno_core::ModuleId;
+use ::deno_core::ModuleLoader;
+use ::deno_core::ModuleSpecifier;
+use ::deno_core::RuntimeOptions;
+use ::deno_core::SharedArrayBufferStore;
+use ::deno_core::Snapshot;
+use ::deno_core::SourceMapGetter;
+use ::deno_fs::FileSystem;
+use ::deno_http::DefaultHttpPropertyExtractor;
+use ::deno_io::Stdio;
+use ::deno_kv::sqlite::SqliteDbHandler;
+use ::deno_tls::RootCertStoreProvider;
+use ::deno_web::create_entangled_message_port;
+use ::deno_web::BlobStore;
+use ::deno_web::MessagePort;
 use log::debug;
 use std::cell::RefCell;
 use std::fmt;
@@ -82,7 +82,7 @@ pub enum WorkerControlEvent {
   Close,
 }
 
-use deno_core::serde::Serializer;
+use ::deno_core::serde::Serializer;
 
 impl Serialize for WorkerControlEvent {
   fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
--- a/runtime/worker.rs
+++ b/runtime/worker.rs
@@ -8,34 +8,34 @@ use std::sync::Arc;
 use std::task::Context;
 use std::task::Poll;
 
-use deno_broadcast_channel::InMemoryBroadcastChannel;
-use deno_cache::CreateCache;
-use deno_cache::SqliteBackedCache;
-use deno_core::ascii_str;
-use deno_core::error::AnyError;
-use deno_core::error::JsError;
-use deno_core::futures::Future;
-use deno_core::v8;
-use deno_core::CompiledWasmModuleStore;
-use deno_core::Extension;
-use deno_core::FsModuleLoader;
-use deno_core::GetErrorClassFn;
-use deno_core::JsRuntime;
-use deno_core::LocalInspectorSession;
-use deno_core::ModuleCode;
-use deno_core::ModuleId;
-use deno_core::ModuleLoader;
-use deno_core::ModuleSpecifier;
-use deno_core::RuntimeOptions;
-use deno_core::SharedArrayBufferStore;
-use deno_core::Snapshot;
-use deno_core::SourceMapGetter;
-use deno_fs::FileSystem;
-use deno_http::DefaultHttpPropertyExtractor;
-use deno_io::Stdio;
-use deno_kv::sqlite::SqliteDbHandler;
-use deno_tls::RootCertStoreProvider;
-use deno_web::BlobStore;
+use ::deno_broadcast_channel::InMemoryBroadcastChannel;
+use ::deno_cache::CreateCache;
+use ::deno_cache::SqliteBackedCache;
+use ::deno_core::ascii_str;
+use ::deno_core::error::AnyError;
+use ::deno_core::error::JsError;
+use ::deno_core::futures::Future;
+use ::deno_core::v8;
+use ::deno_core::CompiledWasmModuleStore;
+use ::deno_core::Extension;
+use ::deno_core::FsModuleLoader;
+use ::deno_core::GetErrorClassFn;
+use ::deno_core::JsRuntime;
+use ::deno_core::LocalInspectorSession;
+use ::deno_core::ModuleCode;
+use ::deno_core::ModuleId;
+use ::deno_core::ModuleLoader;
+use ::deno_core::ModuleSpecifier;
+use ::deno_core::RuntimeOptions;
+use ::deno_core::SharedArrayBufferStore;
+use ::deno_core::Snapshot;
+use ::deno_core::SourceMapGetter;
+use ::deno_fs::FileSystem;
+use ::deno_http::DefaultHttpPropertyExtractor;
+use ::deno_io::Stdio;
+use ::deno_kv::sqlite::SqliteDbHandler;
+use ::deno_tls::RootCertStoreProvider;
+use ::deno_web::BlobStore;
 use log::debug;
 
 use crate::inspector_server::InspectorServer;
--- a/runtime/worker_bootstrap.rs
+++ b/runtime/worker_bootstrap.rs
@@ -1,7 +1,7 @@
 // Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
 
-use deno_core::v8;
-use deno_core::ModuleSpecifier;
+use ::deno_core::v8;
+use ::deno_core::ModuleSpecifier;
 use std::thread;
 
 use crate::colors;
